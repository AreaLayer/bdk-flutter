// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.28.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'blockchain.dart';
import 'error.dart';
import 'key.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'types.dart';

// Rust type: RustOpaqueNom<flutter_rust_bridge::for_generated::rust_async::RwLock<DescriptorBase>>
@sealed
class DescriptorBase extends RustOpaque {
  DescriptorBase.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  DescriptorBase.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount:
        BdkCore.instance.api.rust_arc_increment_strong_count_DescriptorBase,
    rustArcDecrementStrongCount:
        BdkCore.instance.api.rust_arc_decrement_strong_count_DescriptorBase,
    rustArcDecrementStrongCountPtr:
        BdkCore.instance.api.rust_arc_decrement_strong_count_DescriptorBasePtr,
  );

  Future<String> asString({dynamic hint}) =>
      BdkCore.instance.api.descriptorBaseAsString(
        that: this,
      );

  Future<String> asStringPrivate({dynamic hint}) =>
      BdkCore.instance.api.descriptorBaseAsStringPrivate(
        that: this,
      );

  Future<int> maxSatisfactionWeight({dynamic hint}) =>
      BdkCore.instance.api.descriptorBaseMaxSatisfactionWeight(
        that: this,
      );

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<DescriptorBase> newInstance(
          {required String descriptor,
          required Network network,
          dynamic hint}) =>
      BdkCore.instance.api.descriptorBaseNew(
          descriptor: descriptor, network: network, hint: hint);

  static Future<DescriptorBase> newBip44(
          {required DescriptorSecretKeyBase secretKey,
          required KeychainKind keychainKind,
          required Network network,
          dynamic hint}) =>
      BdkCore.instance.api.descriptorBaseNewBip44(
          secretKey: secretKey,
          keychainKind: keychainKind,
          network: network,
          hint: hint);

  static Future<DescriptorBase> newBip44Public(
          {required DescriptorPublicKeyBase publicKey,
          required String fingerprint,
          required KeychainKind keychainKind,
          required Network network,
          dynamic hint}) =>
      BdkCore.instance.api.descriptorBaseNewBip44Public(
          publicKey: publicKey,
          fingerprint: fingerprint,
          keychainKind: keychainKind,
          network: network,
          hint: hint);

  static Future<DescriptorBase> newBip49(
          {required DescriptorSecretKeyBase secretKey,
          required KeychainKind keychainKind,
          required Network network,
          dynamic hint}) =>
      BdkCore.instance.api.descriptorBaseNewBip49(
          secretKey: secretKey,
          keychainKind: keychainKind,
          network: network,
          hint: hint);

  static Future<DescriptorBase> newBip49Public(
          {required DescriptorPublicKeyBase publicKey,
          required String fingerprint,
          required KeychainKind keychainKind,
          required Network network,
          dynamic hint}) =>
      BdkCore.instance.api.descriptorBaseNewBip49Public(
          publicKey: publicKey,
          fingerprint: fingerprint,
          keychainKind: keychainKind,
          network: network,
          hint: hint);

  static Future<DescriptorBase> newBip84(
          {required DescriptorSecretKeyBase secretKey,
          required KeychainKind keychainKind,
          required Network network,
          dynamic hint}) =>
      BdkCore.instance.api.descriptorBaseNewBip84(
          secretKey: secretKey,
          keychainKind: keychainKind,
          network: network,
          hint: hint);

  static Future<DescriptorBase> newBip84Public(
          {required DescriptorPublicKeyBase publicKey,
          required String fingerprint,
          required KeychainKind keychainKind,
          required Network network,
          dynamic hint}) =>
      BdkCore.instance.api.descriptorBaseNewBip84Public(
          publicKey: publicKey,
          fingerprint: fingerprint,
          keychainKind: keychainKind,
          network: network,
          hint: hint);

  static Future<DescriptorBase> newBip86(
          {required DescriptorSecretKeyBase secretKey,
          required KeychainKind keychainKind,
          required Network network,
          dynamic hint}) =>
      BdkCore.instance.api.descriptorBaseNewBip86(
          secretKey: secretKey,
          keychainKind: keychainKind,
          network: network,
          hint: hint);

  static Future<DescriptorBase> newBip86Public(
          {required DescriptorPublicKeyBase publicKey,
          required String fingerprint,
          required KeychainKind keychainKind,
          required Network network,
          dynamic hint}) =>
      BdkCore.instance.api.descriptorBaseNewBip86Public(
          publicKey: publicKey,
          fingerprint: fingerprint,
          keychainKind: keychainKind,
          network: network,
          hint: hint);
}
