// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.25.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'blockchain.dart';
import 'error.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'types.dart';

// Rust type: RustOpaqueNom<Mutex < PartiallySignedTransaction >>
@sealed
class MutexPartiallySignedTransaction extends RustOpaque {
  MutexPartiallySignedTransaction.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  MutexPartiallySignedTransaction.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: BdkCore.instance.api
        .rust_arc_increment_strong_count_MutexPartiallySignedTransaction,
    rustArcDecrementStrongCount: BdkCore.instance.api
        .rust_arc_decrement_strong_count_MutexPartiallySignedTransaction,
    rustArcDecrementStrongCountPtr: BdkCore.instance.api
        .rust_arc_decrement_strong_count_MutexPartiallySignedTransactionPtr,
  );
}

class PsbtBase {
  final MutexPartiallySignedTransaction ptr;

  const PsbtBase({
    required this.ptr,
  });

  /// Combines this PartiallySignedTransaction with other PSBT as described by BIP 174.
  ///
  /// In accordance with BIP 174 this function is commutative i.e., `A.combine(B) == B.combine(A)`
  static Future<PsbtBase> combine(
          {required PsbtBase ptr, required PsbtBase other, dynamic hint}) =>
      BdkCore.instance.api.psbtBaseCombine(ptr: ptr, other: other, hint: hint);

  /// Return the transaction.
  static Future<TransactionBase> extractTx(
          {required PsbtBase ptr, dynamic hint}) =>
      BdkCore.instance.api.psbtBaseExtractTx(ptr: ptr, hint: hint);

  /// The total transaction fee amount, sum of input amounts minus sum of output amounts, in Sats.
  /// If the PSBT is missing a TxOut for an input returns None.
  Future<int?> feeAmount({dynamic hint}) =>
      BdkCore.instance.api.psbtBaseFeeAmount(
        that: this,
      );

  /// The transaction's fee rate. This value will only be accurate if calculated AFTER the
  /// `PartiallySignedTransaction` is finalized and all witness/signature data is added to the
  /// transaction.
  /// If the PSBT is missing a TxOut for an input returns None.
  Future<FeeRate?> feeRate({dynamic hint}) =>
      BdkCore.instance.api.psbtBaseFeeRate(
        that: this,
      );

  static Future<PsbtBase> fromStr({required String psbtBase64, dynamic hint}) =>
      BdkCore.instance.api.psbtBaseFromStr(psbtBase64: psbtBase64, hint: hint);

  /// Serialize the PSBT data structure as a String of JSON.
  Future<String> jsonSerialize({dynamic hint}) =>
      BdkCore.instance.api.psbtBaseJsonSerialize(
        that: this,
      );

  Future<String> serialize({dynamic hint}) =>
      BdkCore.instance.api.psbtBaseSerialize(
        that: this,
      );

  Future<String> txid({dynamic hint}) => BdkCore.instance.api.psbtBaseTxid(
        that: this,
      );

  @override
  int get hashCode => ptr.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is PsbtBase && runtimeType == other.runtimeType && ptr == other.ptr;
}
