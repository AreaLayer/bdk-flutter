// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';
import 'package:freezed_annotation/freezed_annotation.dart';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

part 'bindings.freezed.dart';

abstract class Rust {
  Future<String> blockchainInit(
      {required BlockchainConfig config, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBlockchainInitConstMeta;

  Future<int> getBlockchainHeight({required String blockchainId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetBlockchainHeightConstMeta;

  Future<String> getBlockchainHash(
      {required int blockchainHeight, required String id, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetBlockchainHashConstMeta;

  Future<String> broadcast(
      {required String psbtStr, required String blockchainId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBroadcastConstMeta;

  Future<String> psbtToTxid({required String psbtStr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPsbtToTxidConstMeta;

  Future<Uint8List> extractTx({required String psbtStr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kExtractTxConstMeta;

  Future<double> getFeeRate({required String psbtStr, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetFeeRateConstMeta;

  Future<String> combinePsbt(
      {required String psbtStr, required String other, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCombinePsbtConstMeta;

  Future<TxBuilderResult> txBuilderFinish(
      {required String walletId,
      required List<ScriptAmount> recipients,
      required List<OutPoint> utxos,
      required List<OutPoint> unspendable,
      required bool manuallySelectedOnly,
      required bool onlySpendChange,
      required bool doNotSpendChange,
      double? feeRate,
      int? feeAbsolute,
      required bool drainWallet,
      String? drainTo,
      required bool enableRbf,
      int? nSequence,
      required Uint8List data,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTxBuilderFinishConstMeta;

  Future<String> bumpFeeTxBuilderFinish(
      {required String txid,
      required double feeRate,
      String? allowShrinking,
      required String walletId,
      required bool enableRbf,
      int? nSequence,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kBumpFeeTxBuilderFinishConstMeta;

  Future<String> descriptorSecretExtend(
      {required String xprv, required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDescriptorSecretExtendConstMeta;

  Future<String> descriptorSecretDerive(
      {required String xprv, required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDescriptorSecretDeriveConstMeta;

  Future<Uint8List> descriptorSecretAsSecretBytes(
      {String? descriptorSecret, String? xprv, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDescriptorSecretAsSecretBytesConstMeta;

  Future<String> descriptorSecretAsPublic(
      {String? descriptorSecret, String? xprv, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kDescriptorSecretAsPublicConstMeta;

  Future<String> createDescriptorSecret(
      {required Network network,
      required String mnemonic,
      String? password,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateDescriptorSecretConstMeta;

  Future<String> createDerivationPath({required String path, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateDerivationPathConstMeta;

  Future<String> createDescriptorPublic(
      {String? xpub, required String path, required bool derive, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateDescriptorPublicConstMeta;

  Future<String> initScript({required Uint8List rawOutputScript, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitScriptConstMeta;

  Future<String> initAddress({required String address, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kInitAddressConstMeta;

  Future<String> addressToScriptPubkeyHex(
      {required String address, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kAddressToScriptPubkeyHexConstMeta;

  Future<String> walletInit(
      {required String descriptor,
      String? changeDescriptor,
      required Network network,
      required DatabaseConfig databaseConfig,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kWalletInitConstMeta;

  Future<AddressInfo> getAddress(
      {required String walletId,
      required AddressIndex addressIndex,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetAddressConstMeta;

  Future<void> syncWallet(
      {required String walletId, required String blockchainId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSyncWalletConstMeta;

  Future<Balance> getBalance({required String walletId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetBalanceConstMeta;

  Future<List<LocalUtxo>> listUnspentOutputs(
      {required String walletId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListUnspentOutputsConstMeta;

  Future<List<TransactionDetails>> getTransactions(
      {required String walletId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetTransactionsConstMeta;

  Future<String?> sign(
      {required String walletId,
      required String psbtStr,
      required bool isMultiSig,
      dynamic hint});

  FlutterRustBridgeTaskConstMeta get kSignConstMeta;

  Future<Network> getNetwork({required String walletId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGetNetworkConstMeta;

  Future<List<LocalUtxo>> listUnspent({required String walletId, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kListUnspentConstMeta;

  Future<String> generateSeedFromWordCount(
      {required WordCount wordCount, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateSeedFromWordCountConstMeta;

  Future<String> generateSeedFromString(
      {required String mnemonic, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateSeedFromStringConstMeta;

  Future<String> generateSeedFromEntropy(
      {required Uint8List entropy, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateSeedFromEntropyConstMeta;
}

enum AddressIndex {
  New,
  LastUnused,
}

class AddressInfo {
  final int index;
  final String address;

  AddressInfo({
    required this.index,
    required this.address,
  });
}

/// Local Wallet's Balance
class Balance {
  final int immature;

  /// Unconfirmed UTXOs generated by a wallet tx
  final int trustedPending;

  /// Unconfirmed UTXOs received from an external wallet
  final int untrustedPending;

  /// Confirmed and immediately spendable balance
  final int confirmed;

  /// Get sum of trusted_pending and confirmed coins
  final int spendable;

  /// Get the whole balance visible to the wallet
  final int total;

  Balance({
    required this.immature,
    required this.trustedPending,
    required this.untrustedPending,
    required this.confirmed,
    required this.spendable,
    required this.total,
  });
}

class BlockTime {
  final int height;
  final int timestamp;

  BlockTime({
    required this.height,
    required this.timestamp,
  });
}

@freezed
class BlockchainConfig with _$BlockchainConfig {
  const factory BlockchainConfig.electrum({
    required ElectrumConfig config,
  }) = Electrum;
  const factory BlockchainConfig.esplora({
    required EsploraConfig config,
  }) = Esplora;
}

@freezed
class DatabaseConfig with _$DatabaseConfig {
  const factory DatabaseConfig.memory() = Memory;
  const factory DatabaseConfig.sqlite({
    required SqliteDbConfiguration config,
  }) = Sqlite;
  const factory DatabaseConfig.sled({
    required SledDbConfiguration config,
  }) = Sled;
}

class ElectrumConfig {
  final String url;
  final String? socks5;
  final int retry;
  final int? timeout;
  final int stopGap;

  ElectrumConfig({
    required this.url,
    this.socks5,
    required this.retry,
    this.timeout,
    required this.stopGap,
  });
}

class EsploraConfig {
  final String baseUrl;
  final String? proxy;
  final int? concurrency;
  final int stopGap;
  final int? timeout;

  EsploraConfig({
    required this.baseUrl,
    this.proxy,
    this.concurrency,
    required this.stopGap,
    this.timeout,
  });
}

/// Unspent outputs of this wallet
class LocalUtxo {
  final OutPoint outpoint;
  final TxOut txout;
  final bool isSpent;

  LocalUtxo({
    required this.outpoint,
    required this.txout,
    required this.isSpent,
  });
}

enum Network {
  Testnet,
  Regtest,
  Bitcoin,
  Signet,
}

/// A reference to a transaction output.
class OutPoint {
  /// The referenced transaction's txid.
  final String txid;

  /// The index of the referenced output in its transaction's vout.
  final int vout;

  OutPoint({
    required this.txid,
    required this.vout,
  });
}

class ScriptAmount {
  final String script;
  final int amount;

  ScriptAmount({
    required this.script,
    required this.amount,
  });
}

class SledDbConfiguration {
  final String path;
  final String treeName;

  SledDbConfiguration({
    required this.path,
    required this.treeName,
  });
}

class SqliteDbConfiguration {
  final String path;

  SqliteDbConfiguration({
    required this.path,
  });
}

class TransactionDetails {
  /// Transaction id.
  final String txid;

  /// Received value (sats)
  /// Sum of owned outputs of this transaction.
  final int received;

  /// Sent value (sats)
  /// Sum of owned inputs of this transaction.
  final int sent;

  /// Fee value (sats) if confirmed.
  /// The availability of the fee depends on the backend. It's never None with an Electrum
  /// Server backend, but it could be None with a Bitcoin RPC node without txindex that receive
  /// funds while offline.
  final int? fee;

  /// If the transaction is confirmed, contains height and timestamp of the block containing the
  /// transaction, unconfirmed transaction contains `None`.
  final BlockTime? confirmationTime;

  TransactionDetails({
    required this.txid,
    required this.received,
    required this.sent,
    this.fee,
    this.confirmationTime,
  });
}

/// The result after calling the TxBuilder finish() function. Contains unsigned PSBT and
/// transaction details.
class TxBuilderResult {
  final String psbt;
  final TransactionDetails transactionDetails;

  TxBuilderResult({
    required this.psbt,
    required this.transactionDetails,
  });
}

///A transaction output, which defines new coins to be created from old ones.
class TxOut {
  /// The value of the output, in satoshis.
  final int value;

  /// The address of the output.
  final String address;

  TxOut({
    required this.value,
    required this.address,
  });
}

enum WordCount {
  Words12,
  Words18,
  Words24,
}

class RustImpl extends FlutterRustBridgeBase<RustWire> implements Rust {
  factory RustImpl(ffi.DynamicLibrary dylib) => RustImpl.raw(RustWire(dylib));

  RustImpl.raw(RustWire inner) : super(inner);

  Future<String> blockchainInit(
          {required BlockchainConfig config, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_blockchain_init(
            port_, _api2wire_box_autoadd_blockchain_config(config)),
        parseSuccessData: _wire2api_String,
        constMeta: kBlockchainInitConstMeta,
        argValues: [config],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kBlockchainInitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "blockchain_init",
        argNames: ["config"],
      );

  Future<int> getBlockchainHeight(
          {required String blockchainId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_blockchain_height(
            port_, _api2wire_String(blockchainId)),
        parseSuccessData: _wire2api_u32,
        constMeta: kGetBlockchainHeightConstMeta,
        argValues: [blockchainId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetBlockchainHeightConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_blockchain_height",
        argNames: ["blockchainId"],
      );

  Future<String> getBlockchainHash(
          {required int blockchainHeight, required String id, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_blockchain_hash(
            port_, _api2wire_u64(blockchainHeight), _api2wire_String(id)),
        parseSuccessData: _wire2api_String,
        constMeta: kGetBlockchainHashConstMeta,
        argValues: [blockchainHeight, id],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetBlockchainHashConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_blockchain_hash",
        argNames: ["blockchainHeight", "id"],
      );

  Future<String> broadcast(
          {required String psbtStr,
          required String blockchainId,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_broadcast(
            port_, _api2wire_String(psbtStr), _api2wire_String(blockchainId)),
        parseSuccessData: _wire2api_String,
        constMeta: kBroadcastConstMeta,
        argValues: [psbtStr, blockchainId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kBroadcastConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "broadcast",
        argNames: ["psbtStr", "blockchainId"],
      );

  Future<String> psbtToTxid({required String psbtStr, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_psbt_to_txid(port_, _api2wire_String(psbtStr)),
        parseSuccessData: _wire2api_String,
        constMeta: kPsbtToTxidConstMeta,
        argValues: [psbtStr],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kPsbtToTxidConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "psbt_to_txid",
        argNames: ["psbtStr"],
      );

  Future<Uint8List> extractTx({required String psbtStr, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_extract_tx(port_, _api2wire_String(psbtStr)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kExtractTxConstMeta,
        argValues: [psbtStr],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kExtractTxConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "extract_tx",
        argNames: ["psbtStr"],
      );

  Future<double> getFeeRate({required String psbtStr, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_get_fee_rate(port_, _api2wire_String(psbtStr)),
        parseSuccessData: _wire2api_f32,
        constMeta: kGetFeeRateConstMeta,
        argValues: [psbtStr],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetFeeRateConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_fee_rate",
        argNames: ["psbtStr"],
      );

  Future<String> combinePsbt(
          {required String psbtStr, required String other, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_combine_psbt(
            port_, _api2wire_String(psbtStr), _api2wire_String(other)),
        parseSuccessData: _wire2api_String,
        constMeta: kCombinePsbtConstMeta,
        argValues: [psbtStr, other],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCombinePsbtConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "combine_psbt",
        argNames: ["psbtStr", "other"],
      );

  Future<TxBuilderResult> txBuilderFinish(
          {required String walletId,
          required List<ScriptAmount> recipients,
          required List<OutPoint> utxos,
          required List<OutPoint> unspendable,
          required bool manuallySelectedOnly,
          required bool onlySpendChange,
          required bool doNotSpendChange,
          double? feeRate,
          int? feeAbsolute,
          required bool drainWallet,
          String? drainTo,
          required bool enableRbf,
          int? nSequence,
          required Uint8List data,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_tx_builder_finish(
            port_,
            _api2wire_String(walletId),
            _api2wire_list_script_amount(recipients),
            _api2wire_list_out_point(utxos),
            _api2wire_list_out_point(unspendable),
            manuallySelectedOnly,
            onlySpendChange,
            doNotSpendChange,
            _api2wire_opt_box_autoadd_f32(feeRate),
            _api2wire_opt_box_autoadd_u64(feeAbsolute),
            drainWallet,
            _api2wire_opt_String(drainTo),
            enableRbf,
            _api2wire_opt_box_autoadd_u32(nSequence),
            _api2wire_uint_8_list(data)),
        parseSuccessData: _wire2api_tx_builder_result,
        constMeta: kTxBuilderFinishConstMeta,
        argValues: [
          walletId,
          recipients,
          utxos,
          unspendable,
          manuallySelectedOnly,
          onlySpendChange,
          doNotSpendChange,
          feeRate,
          feeAbsolute,
          drainWallet,
          drainTo,
          enableRbf,
          nSequence,
          data
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kTxBuilderFinishConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "tx_builder_finish",
        argNames: [
          "walletId",
          "recipients",
          "utxos",
          "unspendable",
          "manuallySelectedOnly",
          "onlySpendChange",
          "doNotSpendChange",
          "feeRate",
          "feeAbsolute",
          "drainWallet",
          "drainTo",
          "enableRbf",
          "nSequence",
          "data"
        ],
      );

  Future<String> bumpFeeTxBuilderFinish(
          {required String txid,
          required double feeRate,
          String? allowShrinking,
          required String walletId,
          required bool enableRbf,
          int? nSequence,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_bump_fee_tx_builder_finish(
            port_,
            _api2wire_String(txid),
            _api2wire_f32(feeRate),
            _api2wire_opt_String(allowShrinking),
            _api2wire_String(walletId),
            enableRbf,
            _api2wire_opt_box_autoadd_u32(nSequence)),
        parseSuccessData: _wire2api_String,
        constMeta: kBumpFeeTxBuilderFinishConstMeta,
        argValues: [
          txid,
          feeRate,
          allowShrinking,
          walletId,
          enableRbf,
          nSequence
        ],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kBumpFeeTxBuilderFinishConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "bump_fee_tx_builder_finish",
        argNames: [
          "txid",
          "feeRate",
          "allowShrinking",
          "walletId",
          "enableRbf",
          "nSequence"
        ],
      );

  Future<String> descriptorSecretExtend(
          {required String xprv, required String path, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_descriptor_secret_extend(
            port_, _api2wire_String(xprv), _api2wire_String(path)),
        parseSuccessData: _wire2api_String,
        constMeta: kDescriptorSecretExtendConstMeta,
        argValues: [xprv, path],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDescriptorSecretExtendConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "descriptor_secret_extend",
        argNames: ["xprv", "path"],
      );

  Future<String> descriptorSecretDerive(
          {required String xprv, required String path, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_descriptor_secret_derive(
            port_, _api2wire_String(xprv), _api2wire_String(path)),
        parseSuccessData: _wire2api_String,
        constMeta: kDescriptorSecretDeriveConstMeta,
        argValues: [xprv, path],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDescriptorSecretDeriveConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "descriptor_secret_derive",
        argNames: ["xprv", "path"],
      );

  Future<Uint8List> descriptorSecretAsSecretBytes(
          {String? descriptorSecret, String? xprv, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_descriptor_secret_as_secret_bytes(port_,
            _api2wire_opt_String(descriptorSecret), _api2wire_opt_String(xprv)),
        parseSuccessData: _wire2api_uint_8_list,
        constMeta: kDescriptorSecretAsSecretBytesConstMeta,
        argValues: [descriptorSecret, xprv],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDescriptorSecretAsSecretBytesConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "descriptor_secret_as_secret_bytes",
        argNames: ["descriptorSecret", "xprv"],
      );

  Future<String> descriptorSecretAsPublic(
          {String? descriptorSecret, String? xprv, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_descriptor_secret_as_public(port_,
            _api2wire_opt_String(descriptorSecret), _api2wire_opt_String(xprv)),
        parseSuccessData: _wire2api_String,
        constMeta: kDescriptorSecretAsPublicConstMeta,
        argValues: [descriptorSecret, xprv],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kDescriptorSecretAsPublicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "descriptor_secret_as_public",
        argNames: ["descriptorSecret", "xprv"],
      );

  Future<String> createDescriptorSecret(
          {required Network network,
          required String mnemonic,
          String? password,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_create_descriptor_secret(
            port_,
            _api2wire_network(network),
            _api2wire_String(mnemonic),
            _api2wire_opt_String(password)),
        parseSuccessData: _wire2api_String,
        constMeta: kCreateDescriptorSecretConstMeta,
        argValues: [network, mnemonic, password],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateDescriptorSecretConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_descriptor_secret",
        argNames: ["network", "mnemonic", "password"],
      );

  Future<String> createDerivationPath({required String path, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_create_derivation_path(port_, _api2wire_String(path)),
        parseSuccessData: _wire2api_String,
        constMeta: kCreateDerivationPathConstMeta,
        argValues: [path],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateDerivationPathConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_derivation_path",
        argNames: ["path"],
      );

  Future<String> createDescriptorPublic(
          {String? xpub,
          required String path,
          required bool derive,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_create_descriptor_public(
            port_, _api2wire_opt_String(xpub), _api2wire_String(path), derive),
        parseSuccessData: _wire2api_String,
        constMeta: kCreateDescriptorPublicConstMeta,
        argValues: [xpub, path, derive],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateDescriptorPublicConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_descriptor_public",
        argNames: ["xpub", "path", "derive"],
      );

  Future<String> initScript(
          {required Uint8List rawOutputScript, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_init_script(
            port_, _api2wire_uint_8_list(rawOutputScript)),
        parseSuccessData: _wire2api_String,
        constMeta: kInitScriptConstMeta,
        argValues: [rawOutputScript],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInitScriptConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_script",
        argNames: ["rawOutputScript"],
      );

  Future<String> initAddress({required String address, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_init_address(port_, _api2wire_String(address)),
        parseSuccessData: _wire2api_String,
        constMeta: kInitAddressConstMeta,
        argValues: [address],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kInitAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "init_address",
        argNames: ["address"],
      );

  Future<String> addressToScriptPubkeyHex(
          {required String address, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_address_to_script_pubkey_hex(
            port_, _api2wire_String(address)),
        parseSuccessData: _wire2api_String,
        constMeta: kAddressToScriptPubkeyHexConstMeta,
        argValues: [address],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kAddressToScriptPubkeyHexConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "address_to_script_pubkey_hex",
        argNames: ["address"],
      );

  Future<String> walletInit(
          {required String descriptor,
          String? changeDescriptor,
          required Network network,
          required DatabaseConfig databaseConfig,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_wallet_init(
            port_,
            _api2wire_String(descriptor),
            _api2wire_opt_String(changeDescriptor),
            _api2wire_network(network),
            _api2wire_box_autoadd_database_config(databaseConfig)),
        parseSuccessData: _wire2api_String,
        constMeta: kWalletInitConstMeta,
        argValues: [descriptor, changeDescriptor, network, databaseConfig],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kWalletInitConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "wallet_init",
        argNames: [
          "descriptor",
          "changeDescriptor",
          "network",
          "databaseConfig"
        ],
      );

  Future<AddressInfo> getAddress(
          {required String walletId,
          required AddressIndex addressIndex,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_get_address(port_,
            _api2wire_String(walletId), _api2wire_address_index(addressIndex)),
        parseSuccessData: _wire2api_address_info,
        constMeta: kGetAddressConstMeta,
        argValues: [walletId, addressIndex],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetAddressConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_address",
        argNames: ["walletId", "addressIndex"],
      );

  Future<void> syncWallet(
          {required String walletId,
          required String blockchainId,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_sync_wallet(
            port_, _api2wire_String(walletId), _api2wire_String(blockchainId)),
        parseSuccessData: _wire2api_unit,
        constMeta: kSyncWalletConstMeta,
        argValues: [walletId, blockchainId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSyncWalletConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sync_wallet",
        argNames: ["walletId", "blockchainId"],
      );

  Future<Balance> getBalance({required String walletId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_get_balance(port_, _api2wire_String(walletId)),
        parseSuccessData: _wire2api_balance,
        constMeta: kGetBalanceConstMeta,
        argValues: [walletId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetBalanceConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_balance",
        argNames: ["walletId"],
      );

  Future<List<LocalUtxo>> listUnspentOutputs(
          {required String walletId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_list_unspent_outputs(port_, _api2wire_String(walletId)),
        parseSuccessData: _wire2api_list_local_utxo,
        constMeta: kListUnspentOutputsConstMeta,
        argValues: [walletId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kListUnspentOutputsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_unspent_outputs",
        argNames: ["walletId"],
      );

  Future<List<TransactionDetails>> getTransactions(
          {required String walletId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_get_transactions(port_, _api2wire_String(walletId)),
        parseSuccessData: _wire2api_list_transaction_details,
        constMeta: kGetTransactionsConstMeta,
        argValues: [walletId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetTransactionsConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_transactions",
        argNames: ["walletId"],
      );

  Future<String?> sign(
          {required String walletId,
          required String psbtStr,
          required bool isMultiSig,
          dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_sign(port_, _api2wire_String(walletId),
            _api2wire_String(psbtStr), isMultiSig),
        parseSuccessData: _wire2api_opt_String,
        constMeta: kSignConstMeta,
        argValues: [walletId, psbtStr, isMultiSig],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kSignConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "sign",
        argNames: ["walletId", "psbtStr", "isMultiSig"],
      );

  Future<Network> getNetwork({required String walletId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_get_network(port_, _api2wire_String(walletId)),
        parseSuccessData: _wire2api_network,
        constMeta: kGetNetworkConstMeta,
        argValues: [walletId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGetNetworkConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "get_network",
        argNames: ["walletId"],
      );

  Future<List<LocalUtxo>> listUnspent(
          {required String walletId, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_list_unspent(port_, _api2wire_String(walletId)),
        parseSuccessData: _wire2api_list_local_utxo,
        constMeta: kListUnspentConstMeta,
        argValues: [walletId],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kListUnspentConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "list_unspent",
        argNames: ["walletId"],
      );

  Future<String> generateSeedFromWordCount(
          {required WordCount wordCount, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_generate_seed_from_word_count(
            port_, _api2wire_word_count(wordCount)),
        parseSuccessData: _wire2api_String,
        constMeta: kGenerateSeedFromWordCountConstMeta,
        argValues: [wordCount],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGenerateSeedFromWordCountConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_seed_from_word_count",
        argNames: ["wordCount"],
      );

  Future<String> generateSeedFromString(
          {required String mnemonic, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_generate_seed_from_string(
            port_, _api2wire_String(mnemonic)),
        parseSuccessData: _wire2api_String,
        constMeta: kGenerateSeedFromStringConstMeta,
        argValues: [mnemonic],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGenerateSeedFromStringConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_seed_from_string",
        argNames: ["mnemonic"],
      );

  Future<String> generateSeedFromEntropy(
          {required Uint8List entropy, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) => inner.wire_generate_seed_from_entropy(
            port_, _api2wire_uint_8_list(entropy)),
        parseSuccessData: _wire2api_String,
        constMeta: kGenerateSeedFromEntropyConstMeta,
        argValues: [entropy],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGenerateSeedFromEntropyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_seed_from_entropy",
        argNames: ["entropy"],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_address_index(AddressIndex raw) {
    return _api2wire_i32(raw.index);
  }

  bool _api2wire_bool(bool raw) {
    return raw;
  }

  ffi.Pointer<wire_BlockchainConfig> _api2wire_box_autoadd_blockchain_config(
      BlockchainConfig raw) {
    final ptr = inner.new_box_autoadd_blockchain_config_0();
    _api_fill_to_wire_blockchain_config(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_DatabaseConfig> _api2wire_box_autoadd_database_config(
      DatabaseConfig raw) {
    final ptr = inner.new_box_autoadd_database_config_0();
    _api_fill_to_wire_database_config(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_ElectrumConfig> _api2wire_box_autoadd_electrum_config(
      ElectrumConfig raw) {
    final ptr = inner.new_box_autoadd_electrum_config_0();
    _api_fill_to_wire_electrum_config(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_EsploraConfig> _api2wire_box_autoadd_esplora_config(
      EsploraConfig raw) {
    final ptr = inner.new_box_autoadd_esplora_config_0();
    _api_fill_to_wire_esplora_config(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<ffi.Float> _api2wire_box_autoadd_f32(double raw) {
    return inner.new_box_autoadd_f32_0(_api2wire_f32(raw));
  }

  ffi.Pointer<wire_SledDbConfiguration>
      _api2wire_box_autoadd_sled_db_configuration(SledDbConfiguration raw) {
    final ptr = inner.new_box_autoadd_sled_db_configuration_0();
    _api_fill_to_wire_sled_db_configuration(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<wire_SqliteDbConfiguration>
      _api2wire_box_autoadd_sqlite_db_configuration(SqliteDbConfiguration raw) {
    final ptr = inner.new_box_autoadd_sqlite_db_configuration_0();
    _api_fill_to_wire_sqlite_db_configuration(raw, ptr.ref);
    return ptr;
  }

  ffi.Pointer<ffi.Uint32> _api2wire_box_autoadd_u32(int raw) {
    return inner.new_box_autoadd_u32_0(_api2wire_u32(raw));
  }

  ffi.Pointer<ffi.Uint64> _api2wire_box_autoadd_u64(int raw) {
    return inner.new_box_autoadd_u64_0(_api2wire_u64(raw));
  }

  ffi.Pointer<ffi.Uint8> _api2wire_box_autoadd_u8(int raw) {
    return inner.new_box_autoadd_u8_0(_api2wire_u8(raw));
  }

  double _api2wire_f32(double raw) {
    return raw;
  }

  int _api2wire_i32(int raw) {
    return raw;
  }

  ffi.Pointer<wire_list_out_point> _api2wire_list_out_point(
      List<OutPoint> raw) {
    final ans = inner.new_list_out_point_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_out_point(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  ffi.Pointer<wire_list_script_amount> _api2wire_list_script_amount(
      List<ScriptAmount> raw) {
    final ans = inner.new_list_script_amount_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_script_amount(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  int _api2wire_network(Network raw) {
    return _api2wire_i32(raw.index);
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_opt_String(String? raw) {
    return raw == null ? ffi.nullptr : _api2wire_String(raw);
  }

  ffi.Pointer<ffi.Float> _api2wire_opt_box_autoadd_f32(double? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_f32(raw);
  }

  ffi.Pointer<ffi.Uint32> _api2wire_opt_box_autoadd_u32(int? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_u32(raw);
  }

  ffi.Pointer<ffi.Uint64> _api2wire_opt_box_autoadd_u64(int? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_u64(raw);
  }

  ffi.Pointer<ffi.Uint8> _api2wire_opt_box_autoadd_u8(int? raw) {
    return raw == null ? ffi.nullptr : _api2wire_box_autoadd_u8(raw);
  }

  int _api2wire_u32(int raw) {
    return raw;
  }

  int _api2wire_u64(int raw) {
    return raw;
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  int _api2wire_word_count(WordCount raw) {
    return _api2wire_i32(raw.index);
  }

  // Section: api_fill_to_wire

  void _api_fill_to_wire_blockchain_config(
      BlockchainConfig apiObj, wire_BlockchainConfig wireObj) {
    if (apiObj is Electrum) {
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_BlockchainConfig_Electrum();
      wireObj.kind.ref.Electrum.ref.config =
          _api2wire_box_autoadd_electrum_config(apiObj.config);
    }
    if (apiObj is Esplora) {
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_BlockchainConfig_Esplora();
      wireObj.kind.ref.Esplora.ref.config =
          _api2wire_box_autoadd_esplora_config(apiObj.config);
    }
  }

  void _api_fill_to_wire_box_autoadd_blockchain_config(
      BlockchainConfig apiObj, ffi.Pointer<wire_BlockchainConfig> wireObj) {
    _api_fill_to_wire_blockchain_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_database_config(
      DatabaseConfig apiObj, ffi.Pointer<wire_DatabaseConfig> wireObj) {
    _api_fill_to_wire_database_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_electrum_config(
      ElectrumConfig apiObj, ffi.Pointer<wire_ElectrumConfig> wireObj) {
    _api_fill_to_wire_electrum_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_esplora_config(
      EsploraConfig apiObj, ffi.Pointer<wire_EsploraConfig> wireObj) {
    _api_fill_to_wire_esplora_config(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sled_db_configuration(
      SledDbConfiguration apiObj,
      ffi.Pointer<wire_SledDbConfiguration> wireObj) {
    _api_fill_to_wire_sled_db_configuration(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_autoadd_sqlite_db_configuration(
      SqliteDbConfiguration apiObj,
      ffi.Pointer<wire_SqliteDbConfiguration> wireObj) {
    _api_fill_to_wire_sqlite_db_configuration(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_database_config(
      DatabaseConfig apiObj, wire_DatabaseConfig wireObj) {
    if (apiObj is Memory) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is Sqlite) {
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_DatabaseConfig_Sqlite();
      wireObj.kind.ref.Sqlite.ref.config =
          _api2wire_box_autoadd_sqlite_db_configuration(apiObj.config);
    }
    if (apiObj is Sled) {
      wireObj.tag = 2;
      wireObj.kind = inner.inflate_DatabaseConfig_Sled();
      wireObj.kind.ref.Sled.ref.config =
          _api2wire_box_autoadd_sled_db_configuration(apiObj.config);
    }
  }

  void _api_fill_to_wire_electrum_config(
      ElectrumConfig apiObj, wire_ElectrumConfig wireObj) {
    wireObj.url = _api2wire_String(apiObj.url);
    wireObj.socks5 = _api2wire_opt_String(apiObj.socks5);
    wireObj.retry = _api2wire_u8(apiObj.retry);
    wireObj.timeout = _api2wire_opt_box_autoadd_u8(apiObj.timeout);
    wireObj.stop_gap = _api2wire_u64(apiObj.stopGap);
  }

  void _api_fill_to_wire_esplora_config(
      EsploraConfig apiObj, wire_EsploraConfig wireObj) {
    wireObj.base_url = _api2wire_String(apiObj.baseUrl);
    wireObj.proxy = _api2wire_opt_String(apiObj.proxy);
    wireObj.concurrency = _api2wire_opt_box_autoadd_u8(apiObj.concurrency);
    wireObj.stop_gap = _api2wire_u64(apiObj.stopGap);
    wireObj.timeout = _api2wire_opt_box_autoadd_u64(apiObj.timeout);
  }

  void _api_fill_to_wire_out_point(OutPoint apiObj, wire_OutPoint wireObj) {
    wireObj.txid = _api2wire_String(apiObj.txid);
    wireObj.vout = _api2wire_u32(apiObj.vout);
  }

  void _api_fill_to_wire_script_amount(
      ScriptAmount apiObj, wire_ScriptAmount wireObj) {
    wireObj.script = _api2wire_String(apiObj.script);
    wireObj.amount = _api2wire_u64(apiObj.amount);
  }

  void _api_fill_to_wire_sled_db_configuration(
      SledDbConfiguration apiObj, wire_SledDbConfiguration wireObj) {
    wireObj.path = _api2wire_String(apiObj.path);
    wireObj.tree_name = _api2wire_String(apiObj.treeName);
  }

  void _api_fill_to_wire_sqlite_db_configuration(
      SqliteDbConfiguration apiObj, wire_SqliteDbConfiguration wireObj) {
    wireObj.path = _api2wire_String(apiObj.path);
  }
}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

AddressInfo _wire2api_address_info(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return AddressInfo(
    index: _wire2api_u32(arr[0]),
    address: _wire2api_String(arr[1]),
  );
}

Balance _wire2api_balance(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 6)
    throw Exception('unexpected arr length: expect 6 but see ${arr.length}');
  return Balance(
    immature: _wire2api_u64(arr[0]),
    trustedPending: _wire2api_u64(arr[1]),
    untrustedPending: _wire2api_u64(arr[2]),
    confirmed: _wire2api_u64(arr[3]),
    spendable: _wire2api_u64(arr[4]),
    total: _wire2api_u64(arr[5]),
  );
}

BlockTime _wire2api_block_time(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return BlockTime(
    height: _wire2api_u32(arr[0]),
    timestamp: _wire2api_u64(arr[1]),
  );
}

bool _wire2api_bool(dynamic raw) {
  return raw as bool;
}

BlockTime _wire2api_box_autoadd_block_time(dynamic raw) {
  return _wire2api_block_time(raw);
}

int _wire2api_box_autoadd_u64(dynamic raw) {
  return raw as int;
}

double _wire2api_f32(dynamic raw) {
  return raw as double;
}

int _wire2api_i32(dynamic raw) {
  return raw as int;
}

List<LocalUtxo> _wire2api_list_local_utxo(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_local_utxo).toList();
}

List<TransactionDetails> _wire2api_list_transaction_details(dynamic raw) {
  return (raw as List<dynamic>).map(_wire2api_transaction_details).toList();
}

LocalUtxo _wire2api_local_utxo(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return LocalUtxo(
    outpoint: _wire2api_out_point(arr[0]),
    txout: _wire2api_tx_out(arr[1]),
    isSpent: _wire2api_bool(arr[2]),
  );
}

Network _wire2api_network(dynamic raw) {
  return Network.values[raw];
}

String? _wire2api_opt_String(dynamic raw) {
  return raw == null ? null : _wire2api_String(raw);
}

BlockTime? _wire2api_opt_box_autoadd_block_time(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_block_time(raw);
}

int? _wire2api_opt_box_autoadd_u64(dynamic raw) {
  return raw == null ? null : _wire2api_box_autoadd_u64(raw);
}

OutPoint _wire2api_out_point(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return OutPoint(
    txid: _wire2api_String(arr[0]),
    vout: _wire2api_u32(arr[1]),
  );
}

TransactionDetails _wire2api_transaction_details(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 5)
    throw Exception('unexpected arr length: expect 5 but see ${arr.length}');
  return TransactionDetails(
    txid: _wire2api_String(arr[0]),
    received: _wire2api_u64(arr[1]),
    sent: _wire2api_u64(arr[2]),
    fee: _wire2api_opt_box_autoadd_u64(arr[3]),
    confirmationTime: _wire2api_opt_box_autoadd_block_time(arr[4]),
  );
}

TxBuilderResult _wire2api_tx_builder_result(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return TxBuilderResult(
    psbt: _wire2api_String(arr[0]),
    transactionDetails: _wire2api_transaction_details(arr[1]),
  );
}

TxOut _wire2api_tx_out(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 2)
    throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
  return TxOut(
    value: _wire2api_u64(arr[0]),
    address: _wire2api_String(arr[1]),
  );
}

int _wire2api_u32(dynamic raw) {
  return raw as int;
}

int _wire2api_u64(dynamic raw) {
  return raw as int;
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

void _wire2api_unit(dynamic raw) {
  return;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class RustWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_blockchain_init(
    int port_,
    ffi.Pointer<wire_BlockchainConfig> config,
  ) {
    return _wire_blockchain_init(
      port_,
      config,
    );
  }

  late final _wire_blockchain_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_BlockchainConfig>)>>('wire_blockchain_init');
  late final _wire_blockchain_init = _wire_blockchain_initPtr
      .asFunction<void Function(int, ffi.Pointer<wire_BlockchainConfig>)>();

  void wire_get_blockchain_height(
    int port_,
    ffi.Pointer<wire_uint_8_list> blockchain_id,
  ) {
    return _wire_get_blockchain_height(
      port_,
      blockchain_id,
    );
  }

  late final _wire_get_blockchain_heightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_blockchain_height');
  late final _wire_get_blockchain_height = _wire_get_blockchain_heightPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_blockchain_hash(
    int port_,
    int blockchain_height,
    ffi.Pointer<wire_uint_8_list> id,
  ) {
    return _wire_get_blockchain_hash(
      port_,
      blockchain_height,
      id,
    );
  }

  late final _wire_get_blockchain_hashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Uint64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_blockchain_hash');
  late final _wire_get_blockchain_hash = _wire_get_blockchain_hashPtr
      .asFunction<void Function(int, int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_broadcast(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
    ffi.Pointer<wire_uint_8_list> blockchain_id,
  ) {
    return _wire_broadcast(
      port_,
      psbt_str,
      blockchain_id,
    );
  }

  late final _wire_broadcastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_broadcast');
  late final _wire_broadcast = _wire_broadcastPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_psbt_to_txid(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_psbt_to_txid(
      port_,
      psbt_str,
    );
  }

  late final _wire_psbt_to_txidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_psbt_to_txid');
  late final _wire_psbt_to_txid = _wire_psbt_to_txidPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_extract_tx(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_extract_tx(
      port_,
      psbt_str,
    );
  }

  late final _wire_extract_txPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_extract_tx');
  late final _wire_extract_tx = _wire_extract_txPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_fee_rate(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
  ) {
    return _wire_get_fee_rate(
      port_,
      psbt_str,
    );
  }

  late final _wire_get_fee_ratePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_get_fee_rate');
  late final _wire_get_fee_rate = _wire_get_fee_ratePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_combine_psbt(
    int port_,
    ffi.Pointer<wire_uint_8_list> psbt_str,
    ffi.Pointer<wire_uint_8_list> other,
  ) {
    return _wire_combine_psbt(
      port_,
      psbt_str,
      other,
    );
  }

  late final _wire_combine_psbtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_combine_psbt');
  late final _wire_combine_psbt = _wire_combine_psbtPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_tx_builder_finish(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
    ffi.Pointer<wire_list_script_amount> recipients,
    ffi.Pointer<wire_list_out_point> utxos,
    ffi.Pointer<wire_list_out_point> unspendable,
    bool manually_selected_only,
    bool only_spend_change,
    bool do_not_spend_change,
    ffi.Pointer<ffi.Float> fee_rate,
    ffi.Pointer<ffi.Uint64> fee_absolute,
    bool drain_wallet,
    ffi.Pointer<wire_uint_8_list> drain_to,
    bool enable_rbf,
    ffi.Pointer<ffi.Uint32> n_sequence,
    ffi.Pointer<wire_uint_8_list> data,
  ) {
    return _wire_tx_builder_finish(
      port_,
      wallet_id,
      recipients,
      utxos,
      unspendable,
      manually_selected_only,
      only_spend_change,
      do_not_spend_change,
      fee_rate,
      fee_absolute,
      drain_wallet,
      drain_to,
      enable_rbf,
      n_sequence,
      data,
    );
  }

  late final _wire_tx_builder_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_list_script_amount>,
              ffi.Pointer<wire_list_out_point>,
              ffi.Pointer<wire_list_out_point>,
              ffi.Bool,
              ffi.Bool,
              ffi.Bool,
              ffi.Pointer<ffi.Float>,
              ffi.Pointer<ffi.Uint64>,
              ffi.Bool,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool,
              ffi.Pointer<ffi.Uint32>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_tx_builder_finish');
  late final _wire_tx_builder_finish = _wire_tx_builder_finishPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_list_script_amount>,
          ffi.Pointer<wire_list_out_point>,
          ffi.Pointer<wire_list_out_point>,
          bool,
          bool,
          bool,
          ffi.Pointer<ffi.Float>,
          ffi.Pointer<ffi.Uint64>,
          bool,
          ffi.Pointer<wire_uint_8_list>,
          bool,
          ffi.Pointer<ffi.Uint32>,
          ffi.Pointer<wire_uint_8_list>)>();

  void wire_bump_fee_tx_builder_finish(
    int port_,
    ffi.Pointer<wire_uint_8_list> txid,
    double fee_rate,
    ffi.Pointer<wire_uint_8_list> allow_shrinking,
    ffi.Pointer<wire_uint_8_list> wallet_id,
    bool enable_rbf,
    ffi.Pointer<ffi.Uint32> n_sequence,
  ) {
    return _wire_bump_fee_tx_builder_finish(
      port_,
      txid,
      fee_rate,
      allow_shrinking,
      wallet_id,
      enable_rbf,
      n_sequence,
    );
  }

  late final _wire_bump_fee_tx_builder_finishPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Float,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool,
              ffi.Pointer<ffi.Uint32>)>>('wire_bump_fee_tx_builder_finish');
  late final _wire_bump_fee_tx_builder_finish =
      _wire_bump_fee_tx_builder_finishPtr.asFunction<
          void Function(
              int,
              ffi.Pointer<wire_uint_8_list>,
              double,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              bool,
              ffi.Pointer<ffi.Uint32>)>();

  void wire_descriptor_secret_extend(
    int port_,
    ffi.Pointer<wire_uint_8_list> xprv,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_descriptor_secret_extend(
      port_,
      xprv,
      path,
    );
  }

  late final _wire_descriptor_secret_extendPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_descriptor_secret_extend');
  late final _wire_descriptor_secret_extend =
      _wire_descriptor_secret_extendPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_descriptor_secret_derive(
    int port_,
    ffi.Pointer<wire_uint_8_list> xprv,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_descriptor_secret_derive(
      port_,
      xprv,
      path,
    );
  }

  late final _wire_descriptor_secret_derivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_descriptor_secret_derive');
  late final _wire_descriptor_secret_derive =
      _wire_descriptor_secret_derivePtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_descriptor_secret_as_secret_bytes(
    int port_,
    ffi.Pointer<wire_uint_8_list> descriptor_secret,
    ffi.Pointer<wire_uint_8_list> xprv,
  ) {
    return _wire_descriptor_secret_as_secret_bytes(
      port_,
      descriptor_secret,
      xprv,
    );
  }

  late final _wire_descriptor_secret_as_secret_bytesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_descriptor_secret_as_secret_bytes');
  late final _wire_descriptor_secret_as_secret_bytes =
      _wire_descriptor_secret_as_secret_bytesPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_descriptor_secret_as_public(
    int port_,
    ffi.Pointer<wire_uint_8_list> descriptor_secret,
    ffi.Pointer<wire_uint_8_list> xprv,
  ) {
    return _wire_descriptor_secret_as_public(
      port_,
      descriptor_secret,
      xprv,
    );
  }

  late final _wire_descriptor_secret_as_publicPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
                  ffi.Pointer<wire_uint_8_list>)>>(
      'wire_descriptor_secret_as_public');
  late final _wire_descriptor_secret_as_public =
      _wire_descriptor_secret_as_publicPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_descriptor_secret(
    int port_,
    int network,
    ffi.Pointer<wire_uint_8_list> mnemonic,
    ffi.Pointer<wire_uint_8_list> password,
  ) {
    return _wire_create_descriptor_secret(
      port_,
      network,
      mnemonic,
      password,
    );
  }

  late final _wire_create_descriptor_secretPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Int32, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_create_descriptor_secret');
  late final _wire_create_descriptor_secret =
      _wire_create_descriptor_secretPtr.asFunction<
          void Function(int, int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_derivation_path(
    int port_,
    ffi.Pointer<wire_uint_8_list> path,
  ) {
    return _wire_create_derivation_path(
      port_,
      path,
    );
  }

  late final _wire_create_derivation_pathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_create_derivation_path');
  late final _wire_create_derivation_path = _wire_create_derivation_pathPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_descriptor_public(
    int port_,
    ffi.Pointer<wire_uint_8_list> xpub,
    ffi.Pointer<wire_uint_8_list> path,
    bool derive,
  ) {
    return _wire_create_descriptor_public(
      port_,
      xpub,
      path,
      derive,
    );
  }

  late final _wire_create_descriptor_publicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Bool)>>('wire_create_descriptor_public');
  late final _wire_create_descriptor_public =
      _wire_create_descriptor_publicPtr.asFunction<
          void Function(int, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_init_script(
    int port_,
    ffi.Pointer<wire_uint_8_list> raw_output_script,
  ) {
    return _wire_init_script(
      port_,
      raw_output_script,
    );
  }

  late final _wire_init_scriptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_init_script');
  late final _wire_init_script = _wire_init_scriptPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_init_address(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_init_address(
      port_,
      address,
    );
  }

  late final _wire_init_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_init_address');
  late final _wire_init_address = _wire_init_addressPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_address_to_script_pubkey_hex(
    int port_,
    ffi.Pointer<wire_uint_8_list> address,
  ) {
    return _wire_address_to_script_pubkey_hex(
      port_,
      address,
    );
  }

  late final _wire_address_to_script_pubkey_hexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_address_to_script_pubkey_hex');
  late final _wire_address_to_script_pubkey_hex =
      _wire_address_to_script_pubkey_hexPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_wallet_init(
    int port_,
    ffi.Pointer<wire_uint_8_list> descriptor,
    ffi.Pointer<wire_uint_8_list> change_descriptor,
    int network,
    ffi.Pointer<wire_DatabaseConfig> database_config,
  ) {
    return _wire_wallet_init(
      port_,
      descriptor,
      change_descriptor,
      network,
      database_config,
    );
  }

  late final _wire_wallet_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>,
              ffi.Int32,
              ffi.Pointer<wire_DatabaseConfig>)>>('wire_wallet_init');
  late final _wire_wallet_init = _wire_wallet_initPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>,
          int,
          ffi.Pointer<wire_DatabaseConfig>)>();

  void wire_get_address(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
    int address_index,
  ) {
    return _wire_get_address(
      port_,
      wallet_id,
      address_index,
    );
  }

  late final _wire_get_addressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Int32)>>('wire_get_address');
  late final _wire_get_address = _wire_get_addressPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>, int)>();

  void wire_sync_wallet(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
    ffi.Pointer<wire_uint_8_list> blockchain_id,
  ) {
    return _wire_sync_wallet(
      port_,
      wallet_id,
      blockchain_id,
    );
  }

  late final _wire_sync_walletPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>)>>('wire_sync_wallet');
  late final _wire_sync_wallet = _wire_sync_walletPtr.asFunction<
      void Function(
          int, ffi.Pointer<wire_uint_8_list>, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_balance(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
  ) {
    return _wire_get_balance(
      port_,
      wallet_id,
    );
  }

  late final _wire_get_balancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_get_balance');
  late final _wire_get_balance = _wire_get_balancePtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_list_unspent_outputs(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
  ) {
    return _wire_list_unspent_outputs(
      port_,
      wallet_id,
    );
  }

  late final _wire_list_unspent_outputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_list_unspent_outputs');
  late final _wire_list_unspent_outputs = _wire_list_unspent_outputsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_get_transactions(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
  ) {
    return _wire_get_transactions(
      port_,
      wallet_id,
    );
  }

  late final _wire_get_transactionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_get_transactions');
  late final _wire_get_transactions = _wire_get_transactionsPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_sign(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
    ffi.Pointer<wire_uint_8_list> psbt_str,
    bool is_multi_sig,
  ) {
    return _wire_sign(
      port_,
      wallet_id,
      psbt_str,
      is_multi_sig,
    );
  }

  late final _wire_signPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>,
              ffi.Pointer<wire_uint_8_list>, ffi.Bool)>>('wire_sign');
  late final _wire_sign = _wire_signPtr.asFunction<
      void Function(int, ffi.Pointer<wire_uint_8_list>,
          ffi.Pointer<wire_uint_8_list>, bool)>();

  void wire_get_network(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
  ) {
    return _wire_get_network(
      port_,
      wallet_id,
    );
  }

  late final _wire_get_networkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_get_network');
  late final _wire_get_network = _wire_get_networkPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_list_unspent(
    int port_,
    ffi.Pointer<wire_uint_8_list> wallet_id,
  ) {
    return _wire_list_unspent(
      port_,
      wallet_id,
    );
  }

  late final _wire_list_unspentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>('wire_list_unspent');
  late final _wire_list_unspent = _wire_list_unspentPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_seed_from_word_count(
    int port_,
    int word_count,
  ) {
    return _wire_generate_seed_from_word_count(
      port_,
      word_count,
    );
  }

  late final _wire_generate_seed_from_word_countPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'wire_generate_seed_from_word_count');
  late final _wire_generate_seed_from_word_count =
      _wire_generate_seed_from_word_countPtr
          .asFunction<void Function(int, int)>();

  void wire_generate_seed_from_string(
    int port_,
    ffi.Pointer<wire_uint_8_list> mnemonic,
  ) {
    return _wire_generate_seed_from_string(
      port_,
      mnemonic,
    );
  }

  late final _wire_generate_seed_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_generate_seed_from_string');
  late final _wire_generate_seed_from_string =
      _wire_generate_seed_from_stringPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_generate_seed_from_entropy(
    int port_,
    ffi.Pointer<wire_uint_8_list> entropy,
  ) {
    return _wire_generate_seed_from_entropy(
      port_,
      entropy,
    );
  }

  late final _wire_generate_seed_from_entropyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64, ffi.Pointer<wire_uint_8_list>)>>(
      'wire_generate_seed_from_entropy');
  late final _wire_generate_seed_from_entropy =
      _wire_generate_seed_from_entropyPtr
          .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_BlockchainConfig> new_box_autoadd_blockchain_config_0() {
    return _new_box_autoadd_blockchain_config_0();
  }

  late final _new_box_autoadd_blockchain_config_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_BlockchainConfig> Function()>>(
      'new_box_autoadd_blockchain_config_0');
  late final _new_box_autoadd_blockchain_config_0 =
      _new_box_autoadd_blockchain_config_0Ptr
          .asFunction<ffi.Pointer<wire_BlockchainConfig> Function()>();

  ffi.Pointer<wire_DatabaseConfig> new_box_autoadd_database_config_0() {
    return _new_box_autoadd_database_config_0();
  }

  late final _new_box_autoadd_database_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_DatabaseConfig> Function()>>(
          'new_box_autoadd_database_config_0');
  late final _new_box_autoadd_database_config_0 =
      _new_box_autoadd_database_config_0Ptr
          .asFunction<ffi.Pointer<wire_DatabaseConfig> Function()>();

  ffi.Pointer<wire_ElectrumConfig> new_box_autoadd_electrum_config_0() {
    return _new_box_autoadd_electrum_config_0();
  }

  late final _new_box_autoadd_electrum_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_ElectrumConfig> Function()>>(
          'new_box_autoadd_electrum_config_0');
  late final _new_box_autoadd_electrum_config_0 =
      _new_box_autoadd_electrum_config_0Ptr
          .asFunction<ffi.Pointer<wire_ElectrumConfig> Function()>();

  ffi.Pointer<wire_EsploraConfig> new_box_autoadd_esplora_config_0() {
    return _new_box_autoadd_esplora_config_0();
  }

  late final _new_box_autoadd_esplora_config_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_EsploraConfig> Function()>>(
          'new_box_autoadd_esplora_config_0');
  late final _new_box_autoadd_esplora_config_0 =
      _new_box_autoadd_esplora_config_0Ptr
          .asFunction<ffi.Pointer<wire_EsploraConfig> Function()>();

  ffi.Pointer<ffi.Float> new_box_autoadd_f32_0(
    double value,
  ) {
    return _new_box_autoadd_f32_0(
      value,
    );
  }

  late final _new_box_autoadd_f32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Float> Function(ffi.Float)>>(
          'new_box_autoadd_f32_0');
  late final _new_box_autoadd_f32_0 = _new_box_autoadd_f32_0Ptr
      .asFunction<ffi.Pointer<ffi.Float> Function(double)>();

  ffi.Pointer<wire_SledDbConfiguration>
      new_box_autoadd_sled_db_configuration_0() {
    return _new_box_autoadd_sled_db_configuration_0();
  }

  late final _new_box_autoadd_sled_db_configuration_0Ptr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_SledDbConfiguration> Function()>>(
      'new_box_autoadd_sled_db_configuration_0');
  late final _new_box_autoadd_sled_db_configuration_0 =
      _new_box_autoadd_sled_db_configuration_0Ptr
          .asFunction<ffi.Pointer<wire_SledDbConfiguration> Function()>();

  ffi.Pointer<wire_SqliteDbConfiguration>
      new_box_autoadd_sqlite_db_configuration_0() {
    return _new_box_autoadd_sqlite_db_configuration_0();
  }

  late final _new_box_autoadd_sqlite_db_configuration_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_SqliteDbConfiguration>
              Function()>>('new_box_autoadd_sqlite_db_configuration_0');
  late final _new_box_autoadd_sqlite_db_configuration_0 =
      _new_box_autoadd_sqlite_db_configuration_0Ptr
          .asFunction<ffi.Pointer<wire_SqliteDbConfiguration> Function()>();

  ffi.Pointer<ffi.Uint32> new_box_autoadd_u32_0(
    int value,
  ) {
    return _new_box_autoadd_u32_0(
      value,
    );
  }

  late final _new_box_autoadd_u32_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint32> Function(ffi.Uint32)>>(
          'new_box_autoadd_u32_0');
  late final _new_box_autoadd_u32_0 = _new_box_autoadd_u32_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint32> Function(int)>();

  ffi.Pointer<ffi.Uint64> new_box_autoadd_u64_0(
    int value,
  ) {
    return _new_box_autoadd_u64_0(
      value,
    );
  }

  late final _new_box_autoadd_u64_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(ffi.Uint64)>>(
          'new_box_autoadd_u64_0');
  late final _new_box_autoadd_u64_0 = _new_box_autoadd_u64_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint64> Function(int)>();

  ffi.Pointer<ffi.Uint8> new_box_autoadd_u8_0(
    int value,
  ) {
    return _new_box_autoadd_u8_0(
      value,
    );
  }

  late final _new_box_autoadd_u8_0Ptr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Uint8> Function(ffi.Uint8)>>(
          'new_box_autoadd_u8_0');
  late final _new_box_autoadd_u8_0 = _new_box_autoadd_u8_0Ptr
      .asFunction<ffi.Pointer<ffi.Uint8> Function(int)>();

  ffi.Pointer<wire_list_out_point> new_list_out_point_0(
    int len,
  ) {
    return _new_list_out_point_0(
      len,
    );
  }

  late final _new_list_out_point_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_out_point> Function(
              ffi.Int32)>>('new_list_out_point_0');
  late final _new_list_out_point_0 = _new_list_out_point_0Ptr
      .asFunction<ffi.Pointer<wire_list_out_point> Function(int)>();

  ffi.Pointer<wire_list_script_amount> new_list_script_amount_0(
    int len,
  ) {
    return _new_list_script_amount_0(
      len,
    );
  }

  late final _new_list_script_amount_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_list_script_amount> Function(
              ffi.Int32)>>('new_list_script_amount_0');
  late final _new_list_script_amount_0 = _new_list_script_amount_0Ptr
      .asFunction<ffi.Pointer<wire_list_script_amount> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<BlockchainConfigKind> inflate_BlockchainConfig_Electrum() {
    return _inflate_BlockchainConfig_Electrum();
  }

  late final _inflate_BlockchainConfig_ElectrumPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BlockchainConfigKind> Function()>>(
          'inflate_BlockchainConfig_Electrum');
  late final _inflate_BlockchainConfig_Electrum =
      _inflate_BlockchainConfig_ElectrumPtr
          .asFunction<ffi.Pointer<BlockchainConfigKind> Function()>();

  ffi.Pointer<BlockchainConfigKind> inflate_BlockchainConfig_Esplora() {
    return _inflate_BlockchainConfig_Esplora();
  }

  late final _inflate_BlockchainConfig_EsploraPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<BlockchainConfigKind> Function()>>(
          'inflate_BlockchainConfig_Esplora');
  late final _inflate_BlockchainConfig_Esplora =
      _inflate_BlockchainConfig_EsploraPtr
          .asFunction<ffi.Pointer<BlockchainConfigKind> Function()>();

  ffi.Pointer<DatabaseConfigKind> inflate_DatabaseConfig_Sqlite() {
    return _inflate_DatabaseConfig_Sqlite();
  }

  late final _inflate_DatabaseConfig_SqlitePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DatabaseConfigKind> Function()>>(
          'inflate_DatabaseConfig_Sqlite');
  late final _inflate_DatabaseConfig_Sqlite = _inflate_DatabaseConfig_SqlitePtr
      .asFunction<ffi.Pointer<DatabaseConfigKind> Function()>();

  ffi.Pointer<DatabaseConfigKind> inflate_DatabaseConfig_Sled() {
    return _inflate_DatabaseConfig_Sled();
  }

  late final _inflate_DatabaseConfig_SledPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DatabaseConfigKind> Function()>>(
          'inflate_DatabaseConfig_Sled');
  late final _inflate_DatabaseConfig_Sled = _inflate_DatabaseConfig_SledPtr
      .asFunction<ffi.Pointer<DatabaseConfigKind> Function()>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_ElectrumConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> url;

  external ffi.Pointer<wire_uint_8_list> socks5;

  @ffi.Uint8()
  external int retry;

  external ffi.Pointer<ffi.Uint8> timeout;

  @ffi.Uint64()
  external int stop_gap;
}

class BlockchainConfig_Electrum extends ffi.Struct {
  external ffi.Pointer<wire_ElectrumConfig> config;
}

class wire_EsploraConfig extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> base_url;

  external ffi.Pointer<wire_uint_8_list> proxy;

  external ffi.Pointer<ffi.Uint8> concurrency;

  @ffi.Uint64()
  external int stop_gap;

  external ffi.Pointer<ffi.Uint64> timeout;
}

class BlockchainConfig_Esplora extends ffi.Struct {
  external ffi.Pointer<wire_EsploraConfig> config;
}

class BlockchainConfigKind extends ffi.Union {
  external ffi.Pointer<BlockchainConfig_Electrum> Electrum;

  external ffi.Pointer<BlockchainConfig_Esplora> Esplora;
}

class wire_BlockchainConfig extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<BlockchainConfigKind> kind;
}

class wire_ScriptAmount extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> script;

  @ffi.Uint64()
  external int amount;
}

class wire_list_script_amount extends ffi.Struct {
  external ffi.Pointer<wire_ScriptAmount> ptr;

  @ffi.Int32()
  external int len;
}

class wire_OutPoint extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> txid;

  @ffi.Uint32()
  external int vout;
}

class wire_list_out_point extends ffi.Struct {
  external ffi.Pointer<wire_OutPoint> ptr;

  @ffi.Int32()
  external int len;
}

class DatabaseConfig_Memory extends ffi.Opaque {}

class wire_SqliteDbConfiguration extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> path;
}

class DatabaseConfig_Sqlite extends ffi.Struct {
  external ffi.Pointer<wire_SqliteDbConfiguration> config;
}

class wire_SledDbConfiguration extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> path;

  external ffi.Pointer<wire_uint_8_list> tree_name;
}

class DatabaseConfig_Sled extends ffi.Struct {
  external ffi.Pointer<wire_SledDbConfiguration> config;
}

class DatabaseConfigKind extends ffi.Union {
  external ffi.Pointer<DatabaseConfig_Memory> Memory;

  external ffi.Pointer<DatabaseConfig_Sqlite> Sqlite;

  external ffi.Pointer<DatabaseConfig_Sled> Sled;
}

class wire_DatabaseConfig extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<DatabaseConfigKind> kind;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
