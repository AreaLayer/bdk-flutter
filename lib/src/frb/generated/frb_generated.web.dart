// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.25.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/types.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_web.dart';
import 'util/error.dart';

abstract class BdkCoreApiImplPlatform extends BaseApiImpl<BdkCoreWire> {
  BdkCoreApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BdkBitcoinAddressPtr => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress;

  @protected
  BdkBitcoinAddress
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          dynamic raw);

  @protected
  BdkBitcoinAddress
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  AddressBase dco_decode_address_base(dynamic raw);

  @protected
  BdkError dco_decode_bdk_error(dynamic raw);

  @protected
  BitcoinAddressError dco_decode_bitcoin_address_error(dynamic raw);

  @protected
  BitcoinConsensusError dco_decode_bitcoin_consensus_error(dynamic raw);

  @protected
  BitcoinHexError dco_decode_bitcoin_hex_error(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  AddressBase dco_decode_box_autoadd_address_base(dynamic raw);

  @protected
  BitcoinAddressError dco_decode_box_autoadd_bitcoin_address_error(dynamic raw);

  @protected
  BitcoinConsensusError dco_decode_box_autoadd_bitcoin_consensus_error(
      dynamic raw);

  @protected
  BitcoinHexError dco_decode_box_autoadd_bitcoin_hex_error(dynamic raw);

  @protected
  ScriptBufBase dco_decode_box_autoadd_script_buf_base(dynamic raw);

  @protected
  TransactionBase dco_decode_box_autoadd_transaction_base(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<Uint8List> dco_decode_list_list_prim_u_8_strict(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<TxIn> dco_decode_list_tx_in(dynamic raw);

  @protected
  List<TxOut> dco_decode_list_tx_out(dynamic raw);

  @protected
  Network dco_decode_network(dynamic raw);

  @protected
  OutPoint dco_decode_out_point(dynamic raw);

  @protected
  Payload dco_decode_payload(dynamic raw);

  @protected
  ScriptBufBase dco_decode_script_buf_base(dynamic raw);

  @protected
  TransactionBase dco_decode_transaction_base(dynamic raw);

  @protected
  TxIn dco_decode_tx_in(dynamic raw);

  @protected
  TxOut dco_decode_tx_out(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  U8Array4 dco_decode_u_8_array_4(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  Variant dco_decode_variant(dynamic raw);

  @protected
  WitnessVersion dco_decode_witness_version(dynamic raw);

  @protected
  BdkBitcoinAddress
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          SseDeserializer deserializer);

  @protected
  BdkBitcoinAddress
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AddressBase sse_decode_address_base(SseDeserializer deserializer);

  @protected
  BdkError sse_decode_bdk_error(SseDeserializer deserializer);

  @protected
  BitcoinAddressError sse_decode_bitcoin_address_error(
      SseDeserializer deserializer);

  @protected
  BitcoinConsensusError sse_decode_bitcoin_consensus_error(
      SseDeserializer deserializer);

  @protected
  BitcoinHexError sse_decode_bitcoin_hex_error(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  AddressBase sse_decode_box_autoadd_address_base(SseDeserializer deserializer);

  @protected
  BitcoinAddressError sse_decode_box_autoadd_bitcoin_address_error(
      SseDeserializer deserializer);

  @protected
  BitcoinConsensusError sse_decode_box_autoadd_bitcoin_consensus_error(
      SseDeserializer deserializer);

  @protected
  BitcoinHexError sse_decode_box_autoadd_bitcoin_hex_error(
      SseDeserializer deserializer);

  @protected
  ScriptBufBase sse_decode_box_autoadd_script_buf_base(
      SseDeserializer deserializer);

  @protected
  TransactionBase sse_decode_box_autoadd_transaction_base(
      SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<Uint8List> sse_decode_list_list_prim_u_8_strict(
      SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<TxIn> sse_decode_list_tx_in(SseDeserializer deserializer);

  @protected
  List<TxOut> sse_decode_list_tx_out(SseDeserializer deserializer);

  @protected
  Network sse_decode_network(SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_out_point(SseDeserializer deserializer);

  @protected
  Payload sse_decode_payload(SseDeserializer deserializer);

  @protected
  ScriptBufBase sse_decode_script_buf_base(SseDeserializer deserializer);

  @protected
  TransactionBase sse_decode_transaction_base(SseDeserializer deserializer);

  @protected
  TxIn sse_decode_tx_in(SseDeserializer deserializer);

  @protected
  TxOut sse_decode_tx_out(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  U8Array4 sse_decode_u_8_array_4(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  Variant sse_decode_variant(SseDeserializer deserializer);

  @protected
  WitnessVersion sse_decode_witness_version(SseDeserializer deserializer);

  @protected
  String cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  List<dynamic> cst_encode_address_base(AddressBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          raw.field0)
    ];
  }

  @protected
  List<dynamic> cst_encode_bdk_error(BdkError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is BdkError_HexError) {
      return [0, cst_encode_box_autoadd_bitcoin_hex_error(raw.field0)];
    }
    if (raw is BdkError_ConsensusError) {
      return [1, cst_encode_box_autoadd_bitcoin_consensus_error(raw.field0)];
    }
    if (raw is BdkError_AddressError) {
      return [2, cst_encode_box_autoadd_bitcoin_address_error(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_bitcoin_address_error(BitcoinAddressError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is BitcoinAddressError_Base58) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is BitcoinAddressError_Bech32) {
      return [1, cst_encode_String(raw.field0)];
    }
    if (raw is BitcoinAddressError_EmptyBech32Payload) {
      return [2];
    }
    if (raw is BitcoinAddressError_InvalidBech32Variant) {
      return [
        3,
        cst_encode_variant(raw.expected),
        cst_encode_variant(raw.found)
      ];
    }
    if (raw is BitcoinAddressError_InvalidWitnessVersion) {
      return [4, cst_encode_u_8(raw.field0)];
    }
    if (raw is BitcoinAddressError_UnparsableWitnessVersion) {
      return [5, cst_encode_String(raw.field0)];
    }
    if (raw is BitcoinAddressError_MalformedWitnessVersion) {
      return [6];
    }
    if (raw is BitcoinAddressError_InvalidWitnessProgramLength) {
      return [7, cst_encode_usize(raw.field0)];
    }
    if (raw is BitcoinAddressError_InvalidSegwitV0ProgramLength) {
      return [8, cst_encode_usize(raw.field0)];
    }
    if (raw is BitcoinAddressError_UncompressedPubkey) {
      return [9];
    }
    if (raw is BitcoinAddressError_ExcessiveScriptSize) {
      return [10];
    }
    if (raw is BitcoinAddressError_UnrecognizedScript) {
      return [11];
    }
    if (raw is BitcoinAddressError_UnknownAddressType) {
      return [12, cst_encode_String(raw.field0)];
    }
    if (raw is BitcoinAddressError_NetworkValidation) {
      return [
        13,
        cst_encode_network(raw.networkRequired),
        cst_encode_network(raw.networkFound),
        cst_encode_String(raw.address)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_bitcoin_consensus_error(BitcoinConsensusError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is BitcoinConsensusError_Io) {
      return [0, cst_encode_String(raw.field0)];
    }
    if (raw is BitcoinConsensusError_OversizedVectorAllocation) {
      return [1, cst_encode_usize(raw.requested), cst_encode_usize(raw.max)];
    }
    if (raw is BitcoinConsensusError_InvalidChecksum) {
      return [
        2,
        cst_encode_u_8_array_4(raw.expected),
        cst_encode_u_8_array_4(raw.actual)
      ];
    }
    if (raw is BitcoinConsensusError_NonMinimalVarInt) {
      return [3];
    }
    if (raw is BitcoinConsensusError_ParseFailed) {
      return [4, cst_encode_String(raw.field0)];
    }
    if (raw is BitcoinConsensusError_UnsupportedSegwitFlag) {
      return [5, cst_encode_u_8(raw.field0)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_bitcoin_hex_error(BitcoinHexError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is BitcoinHexError_InvalidChar) {
      return [0, cst_encode_u_8(raw.field0)];
    }
    if (raw is BitcoinHexError_OddLengthString) {
      return [1, cst_encode_usize(raw.field0)];
    }
    if (raw is BitcoinHexError_InvalidLength) {
      return [2, cst_encode_usize(raw.field0), cst_encode_usize(raw.field1)];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_address_base(AddressBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_address_base(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bitcoin_address_error(
      BitcoinAddressError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bitcoin_address_error(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bitcoin_consensus_error(
      BitcoinConsensusError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bitcoin_consensus_error(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_bitcoin_hex_error(BitcoinHexError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_bitcoin_hex_error(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_script_buf_base(ScriptBufBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_script_buf_base(raw);
  }

  @protected
  List<dynamic> cst_encode_box_autoadd_transaction_base(TransactionBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_transaction_base(raw);
  }

  @protected
  List<dynamic> cst_encode_list_list_prim_u_8_strict(List<Uint8List> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_list_prim_u_8_strict).toList();
  }

  @protected
  List<int> cst_encode_list_prim_u_8_loose(List<int> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  Uint8List cst_encode_list_prim_u_8_strict(Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  List<dynamic> cst_encode_list_tx_in(List<TxIn> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_tx_in).toList();
  }

  @protected
  List<dynamic> cst_encode_list_tx_out(List<TxOut> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.map(cst_encode_tx_out).toList();
  }

  @protected
  List<dynamic> cst_encode_out_point(OutPoint raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.txid), cst_encode_u_32(raw.vout)];
  }

  @protected
  List<dynamic> cst_encode_payload(Payload raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    if (raw is Payload_PubkeyHash) {
      return [0, cst_encode_String(raw.pubkeyHash)];
    }
    if (raw is Payload_ScriptHash) {
      return [1, cst_encode_String(raw.scriptHash)];
    }
    if (raw is Payload_WitnessProgram) {
      return [
        2,
        cst_encode_witness_version(raw.version),
        cst_encode_list_prim_u_8_strict(raw.program)
      ];
    }

    throw Exception('unreachable');
  }

  @protected
  List<dynamic> cst_encode_script_buf_base(ScriptBufBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_list_prim_u_8_strict(raw.bytes)];
  }

  @protected
  List<dynamic> cst_encode_transaction_base(TransactionBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [cst_encode_String(raw.inner)];
  }

  @protected
  List<dynamic> cst_encode_tx_in(TxIn raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_out_point(raw.previousOutput),
      cst_encode_script_buf_base(raw.scriptSig),
      cst_encode_u_32(raw.sequence),
      cst_encode_list_list_prim_u_8_strict(raw.witness)
    ];
  }

  @protected
  List<dynamic> cst_encode_tx_out(TxOut raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return [
      cst_encode_u_64(raw.value),
      cst_encode_script_buf_base(raw.scriptPubkey)
    ];
  }

  @protected
  Object cst_encode_u_64(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return castNativeBigInt(raw);
  }

  @protected
  Uint8List cst_encode_u_8_array_4(U8Array4 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return Uint8List.fromList(raw);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
      BdkBitcoinAddress raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
      BdkBitcoinAddress raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_network(Network raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  int cst_encode_variant(Variant raw);

  @protected
  int cst_encode_witness_version(WitnessVersion raw);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          BdkBitcoinAddress self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          BdkBitcoinAddress self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_address_base(AddressBase self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_error(BdkError self, SseSerializer serializer);

  @protected
  void sse_encode_bitcoin_address_error(
      BitcoinAddressError self, SseSerializer serializer);

  @protected
  void sse_encode_bitcoin_consensus_error(
      BitcoinConsensusError self, SseSerializer serializer);

  @protected
  void sse_encode_bitcoin_hex_error(
      BitcoinHexError self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_address_base(
      AddressBase self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bitcoin_address_error(
      BitcoinAddressError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bitcoin_consensus_error(
      BitcoinConsensusError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bitcoin_hex_error(
      BitcoinHexError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_script_buf_base(
      ScriptBufBase self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_transaction_base(
      TransactionBase self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_list_prim_u_8_strict(
      List<Uint8List> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_tx_in(List<TxIn> self, SseSerializer serializer);

  @protected
  void sse_encode_list_tx_out(List<TxOut> self, SseSerializer serializer);

  @protected
  void sse_encode_network(Network self, SseSerializer serializer);

  @protected
  void sse_encode_out_point(OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_payload(Payload self, SseSerializer serializer);

  @protected
  void sse_encode_script_buf_base(ScriptBufBase self, SseSerializer serializer);

  @protected
  void sse_encode_transaction_base(
      TransactionBase self, SseSerializer serializer);

  @protected
  void sse_encode_tx_in(TxIn self, SseSerializer serializer);

  @protected
  void sse_encode_tx_out(TxOut self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_4(U8Array4 self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);

  @protected
  void sse_encode_variant(Variant self, SseSerializer serializer);

  @protected
  void sse_encode_witness_version(
      WitnessVersion self, SseSerializer serializer);
}

// Section: wire_class

class BdkCoreWire implements BaseWire {
  BdkCoreWire.fromExternalLibrary(ExternalLibrary lib);

  void wire_AddressBase_as_string(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_AddressBase_as_string(port_, that);

  void wire_AddressBase_from_script(
          NativePortType port_, List<dynamic> script, int network) =>
      wasmModule.wire_AddressBase_from_script(port_, script, network);

  void wire_AddressBase_from_string(
          NativePortType port_, String address, int network) =>
      wasmModule.wire_AddressBase_from_string(port_, address, network);

  void wire_AddressBase_is_valid_for_network(
          NativePortType port_, List<dynamic> that, int network) =>
      wasmModule.wire_AddressBase_is_valid_for_network(port_, that, network);

  void wire_AddressBase_network(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_AddressBase_network(port_, that);

  void wire_AddressBase_payload(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_AddressBase_payload(port_, that);

  void wire_AddressBase_script_pubkey(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_AddressBase_script_pubkey(port_, that);

  void wire_AddressBase_to_qr_uri(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_AddressBase_to_qr_uri(port_, that);

  void wire_ScriptBufBase_empty(NativePortType port_) =>
      wasmModule.wire_ScriptBufBase_empty(port_);

  void wire_ScriptBufBase_from_hex(NativePortType port_, String s) =>
      wasmModule.wire_ScriptBufBase_from_hex(port_, s);

  void wire_ScriptBufBase_with_capacity(NativePortType port_, int capacity) =>
      wasmModule.wire_ScriptBufBase_with_capacity(port_, capacity);

  void wire_TransactionBase_input(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_TransactionBase_input(port_, that);

  void wire_TransactionBase_is_coin_base(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_TransactionBase_is_coin_base(port_, that);

  void wire_TransactionBase_is_explicitly_rbf(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_TransactionBase_is_explicitly_rbf(port_, that);

  void wire_TransactionBase_is_lock_time_enabled(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_TransactionBase_is_lock_time_enabled(port_, that);

  void wire_TransactionBase_lock_time(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_TransactionBase_lock_time(port_, that);

  void wire_TransactionBase_new(
          NativePortType port_, List<int> transaction_bytes) =>
      wasmModule.wire_TransactionBase_new(port_, transaction_bytes);

  void wire_TransactionBase_output(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_TransactionBase_output(port_, that);

  void wire_TransactionBase_serialize(
          NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_TransactionBase_serialize(port_, that);

  void wire_TransactionBase_size(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_TransactionBase_size(port_, that);

  void wire_TransactionBase_txid(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_TransactionBase_txid(port_, that);

  void wire_TransactionBase_version(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_TransactionBase_version(port_, that);

  void wire_TransactionBase_vsize(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_TransactionBase_vsize(port_, that);

  void wire_TransactionBase_weight(NativePortType port_, List<dynamic> that) =>
      wasmModule.wire_TransactionBase_weight(port_, that);

  void rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          dynamic ptr) =>
      wasmModule
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
              ptr);

  void rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          dynamic ptr) =>
      wasmModule
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
              ptr);
}

@JS('wasm_bindgen')
external BdkCoreWasmModule get wasmModule;

@JS()
@anonymous
class BdkCoreWasmModule implements WasmModule {
  @override
  external Object /* Promise */ call([String? moduleName]);

  @override
  external BdkCoreWasmModule bind(dynamic thisArg, String moduleName);

  external void wire_AddressBase_as_string(
      NativePortType port_, List<dynamic> that);

  external void wire_AddressBase_from_script(
      NativePortType port_, List<dynamic> script, int network);

  external void wire_AddressBase_from_string(
      NativePortType port_, String address, int network);

  external void wire_AddressBase_is_valid_for_network(
      NativePortType port_, List<dynamic> that, int network);

  external void wire_AddressBase_network(
      NativePortType port_, List<dynamic> that);

  external void wire_AddressBase_payload(
      NativePortType port_, List<dynamic> that);

  external void wire_AddressBase_script_pubkey(
      NativePortType port_, List<dynamic> that);

  external void wire_AddressBase_to_qr_uri(
      NativePortType port_, List<dynamic> that);

  external void wire_ScriptBufBase_empty(NativePortType port_);

  external void wire_ScriptBufBase_from_hex(NativePortType port_, String s);

  external void wire_ScriptBufBase_with_capacity(
      NativePortType port_, int capacity);

  external void wire_TransactionBase_input(
      NativePortType port_, List<dynamic> that);

  external void wire_TransactionBase_is_coin_base(
      NativePortType port_, List<dynamic> that);

  external void wire_TransactionBase_is_explicitly_rbf(
      NativePortType port_, List<dynamic> that);

  external void wire_TransactionBase_is_lock_time_enabled(
      NativePortType port_, List<dynamic> that);

  external void wire_TransactionBase_lock_time(
      NativePortType port_, List<dynamic> that);

  external void wire_TransactionBase_new(
      NativePortType port_, List<int> transaction_bytes);

  external void wire_TransactionBase_output(
      NativePortType port_, List<dynamic> that);

  external void wire_TransactionBase_serialize(
      NativePortType port_, List<dynamic> that);

  external void wire_TransactionBase_size(
      NativePortType port_, List<dynamic> that);

  external void wire_TransactionBase_txid(
      NativePortType port_, List<dynamic> that);

  external void wire_TransactionBase_version(
      NativePortType port_, List<dynamic> that);

  external void wire_TransactionBase_vsize(
      NativePortType port_, List<dynamic> that);

  external void wire_TransactionBase_weight(
      NativePortType port_, List<dynamic> that);

  external void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          dynamic ptr);

  external void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          dynamic ptr);
}
