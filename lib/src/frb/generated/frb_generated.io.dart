// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.25.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/types.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';
import 'util/error.dart';

abstract class BdkCoreApiImplPlatform extends BaseApiImpl<BdkCoreWire> {
  BdkCoreApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BdkBitcoinAddressPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddressPtr;

  @protected
  BdkBitcoinAddress
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          dynamic raw);

  @protected
  BdkBitcoinAddress
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  AddressBase dco_decode_address_base(dynamic raw);

  @protected
  BdkError dco_decode_bdk_error(dynamic raw);

  @protected
  BitcoinAddressError dco_decode_bitcoin_address_error(dynamic raw);

  @protected
  BitcoinConsensusError dco_decode_bitcoin_consensus_error(dynamic raw);

  @protected
  BitcoinHexError dco_decode_bitcoin_hex_error(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  AddressBase dco_decode_box_autoadd_address_base(dynamic raw);

  @protected
  BitcoinAddressError dco_decode_box_autoadd_bitcoin_address_error(dynamic raw);

  @protected
  BitcoinConsensusError dco_decode_box_autoadd_bitcoin_consensus_error(
      dynamic raw);

  @protected
  BitcoinHexError dco_decode_box_autoadd_bitcoin_hex_error(dynamic raw);

  @protected
  ScriptBufBase dco_decode_box_autoadd_script_buf_base(dynamic raw);

  @protected
  TransactionBase dco_decode_box_autoadd_transaction_base(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  List<Uint8List> dco_decode_list_list_prim_u_8_strict(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<TxIn> dco_decode_list_tx_in(dynamic raw);

  @protected
  List<TxOut> dco_decode_list_tx_out(dynamic raw);

  @protected
  Network dco_decode_network(dynamic raw);

  @protected
  OutPoint dco_decode_out_point(dynamic raw);

  @protected
  Payload dco_decode_payload(dynamic raw);

  @protected
  ScriptBufBase dco_decode_script_buf_base(dynamic raw);

  @protected
  TransactionBase dco_decode_transaction_base(dynamic raw);

  @protected
  TxIn dco_decode_tx_in(dynamic raw);

  @protected
  TxOut dco_decode_tx_out(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  U8Array4 dco_decode_u_8_array_4(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  Variant dco_decode_variant(dynamic raw);

  @protected
  WitnessVersion dco_decode_witness_version(dynamic raw);

  @protected
  BdkBitcoinAddress
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          SseDeserializer deserializer);

  @protected
  BdkBitcoinAddress
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AddressBase sse_decode_address_base(SseDeserializer deserializer);

  @protected
  BdkError sse_decode_bdk_error(SseDeserializer deserializer);

  @protected
  BitcoinAddressError sse_decode_bitcoin_address_error(
      SseDeserializer deserializer);

  @protected
  BitcoinConsensusError sse_decode_bitcoin_consensus_error(
      SseDeserializer deserializer);

  @protected
  BitcoinHexError sse_decode_bitcoin_hex_error(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  AddressBase sse_decode_box_autoadd_address_base(SseDeserializer deserializer);

  @protected
  BitcoinAddressError sse_decode_box_autoadd_bitcoin_address_error(
      SseDeserializer deserializer);

  @protected
  BitcoinConsensusError sse_decode_box_autoadd_bitcoin_consensus_error(
      SseDeserializer deserializer);

  @protected
  BitcoinHexError sse_decode_box_autoadd_bitcoin_hex_error(
      SseDeserializer deserializer);

  @protected
  ScriptBufBase sse_decode_box_autoadd_script_buf_base(
      SseDeserializer deserializer);

  @protected
  TransactionBase sse_decode_box_autoadd_transaction_base(
      SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  List<Uint8List> sse_decode_list_list_prim_u_8_strict(
      SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<TxIn> sse_decode_list_tx_in(SseDeserializer deserializer);

  @protected
  List<TxOut> sse_decode_list_tx_out(SseDeserializer deserializer);

  @protected
  Network sse_decode_network(SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_out_point(SseDeserializer deserializer);

  @protected
  Payload sse_decode_payload(SseDeserializer deserializer);

  @protected
  ScriptBufBase sse_decode_script_buf_base(SseDeserializer deserializer);

  @protected
  TransactionBase sse_decode_transaction_base(SseDeserializer deserializer);

  @protected
  TxIn sse_decode_tx_in(SseDeserializer deserializer);

  @protected
  TxOut sse_decode_tx_out(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  U8Array4 sse_decode_u_8_array_4(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  Variant sse_decode_variant(SseDeserializer deserializer);

  @protected
  WitnessVersion sse_decode_witness_version(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_address_base> cst_encode_box_autoadd_address_base(
      AddressBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_address_base();
    cst_api_fill_to_wire_address_base(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bitcoin_address_error>
      cst_encode_box_autoadd_bitcoin_address_error(BitcoinAddressError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bitcoin_address_error();
    cst_api_fill_to_wire_bitcoin_address_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bitcoin_consensus_error>
      cst_encode_box_autoadd_bitcoin_consensus_error(
          BitcoinConsensusError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bitcoin_consensus_error();
    cst_api_fill_to_wire_bitcoin_consensus_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_bitcoin_hex_error>
      cst_encode_box_autoadd_bitcoin_hex_error(BitcoinHexError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_bitcoin_hex_error();
    cst_api_fill_to_wire_bitcoin_hex_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_script_buf_base> cst_encode_box_autoadd_script_buf_base(
      ScriptBufBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_script_buf_base();
    cst_api_fill_to_wire_script_buf_base(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_transaction_base>
      cst_encode_box_autoadd_transaction_base(TransactionBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_transaction_base();
    cst_api_fill_to_wire_transaction_base(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_list_list_prim_u_8_strict>
      cst_encode_list_list_prim_u_8_strict(List<Uint8List> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_list_prim_u_8_strict(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_list_prim_u_8_strict(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_encode_list_prim_u_8_loose(
      List<int> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_loose(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_tx_in> cst_encode_list_tx_in(List<TxIn> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_tx_in(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_tx_in(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_tx_out> cst_encode_list_tx_out(List<TxOut> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_tx_out(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_tx_out(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  int cst_encode_u_64(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toInt();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_u_8_array_4(
      U8Array4 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(4);
    ans.ref.ptr.asTypedList(4).setAll(0, raw);
    return ans;
  }

  @protected
  void cst_api_fill_to_wire_address_base(
      AddressBase apiObj, wire_cst_address_base wireObj) {
    wireObj.field0 =
        cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
            apiObj.field0);
  }

  @protected
  void cst_api_fill_to_wire_bdk_error(
      BdkError apiObj, wire_cst_bdk_error wireObj) {
    if (apiObj is BdkError_HexError) {
      var pre_field0 = cst_encode_box_autoadd_bitcoin_hex_error(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.HexError.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_ConsensusError) {
      var pre_field0 =
          cst_encode_box_autoadd_bitcoin_consensus_error(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.ConsensusError.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_AddressError) {
      var pre_field0 =
          cst_encode_box_autoadd_bitcoin_address_error(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind.AddressError.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_bitcoin_address_error(
      BitcoinAddressError apiObj, wire_cst_bitcoin_address_error wireObj) {
    if (apiObj is BitcoinAddressError_Base58) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.Base58.field0 = pre_field0;
      return;
    }
    if (apiObj is BitcoinAddressError_Bech32) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.Bech32.field0 = pre_field0;
      return;
    }
    if (apiObj is BitcoinAddressError_EmptyBech32Payload) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is BitcoinAddressError_InvalidBech32Variant) {
      var pre_expected = cst_encode_variant(apiObj.expected);
      var pre_found = cst_encode_variant(apiObj.found);
      wireObj.tag = 3;
      wireObj.kind.InvalidBech32Variant.expected = pre_expected;
      wireObj.kind.InvalidBech32Variant.found = pre_found;
      return;
    }
    if (apiObj is BitcoinAddressError_InvalidWitnessVersion) {
      var pre_field0 = cst_encode_u_8(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind.InvalidWitnessVersion.field0 = pre_field0;
      return;
    }
    if (apiObj is BitcoinAddressError_UnparsableWitnessVersion) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.UnparsableWitnessVersion.field0 = pre_field0;
      return;
    }
    if (apiObj is BitcoinAddressError_MalformedWitnessVersion) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is BitcoinAddressError_InvalidWitnessProgramLength) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind.InvalidWitnessProgramLength.field0 = pre_field0;
      return;
    }
    if (apiObj is BitcoinAddressError_InvalidSegwitV0ProgramLength) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 8;
      wireObj.kind.InvalidSegwitV0ProgramLength.field0 = pre_field0;
      return;
    }
    if (apiObj is BitcoinAddressError_UncompressedPubkey) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is BitcoinAddressError_ExcessiveScriptSize) {
      wireObj.tag = 10;
      return;
    }
    if (apiObj is BitcoinAddressError_UnrecognizedScript) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is BitcoinAddressError_UnknownAddressType) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 12;
      wireObj.kind.UnknownAddressType.field0 = pre_field0;
      return;
    }
    if (apiObj is BitcoinAddressError_NetworkValidation) {
      var pre_network_required = cst_encode_network(apiObj.networkRequired);
      var pre_network_found = cst_encode_network(apiObj.networkFound);
      var pre_address = cst_encode_String(apiObj.address);
      wireObj.tag = 13;
      wireObj.kind.NetworkValidation.network_required = pre_network_required;
      wireObj.kind.NetworkValidation.network_found = pre_network_found;
      wireObj.kind.NetworkValidation.address = pre_address;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_bitcoin_consensus_error(
      BitcoinConsensusError apiObj, wire_cst_bitcoin_consensus_error wireObj) {
    if (apiObj is BitcoinConsensusError_Io) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.Io.field0 = pre_field0;
      return;
    }
    if (apiObj is BitcoinConsensusError_OversizedVectorAllocation) {
      var pre_requested = cst_encode_usize(apiObj.requested);
      var pre_max = cst_encode_usize(apiObj.max);
      wireObj.tag = 1;
      wireObj.kind.OversizedVectorAllocation.requested = pre_requested;
      wireObj.kind.OversizedVectorAllocation.max = pre_max;
      return;
    }
    if (apiObj is BitcoinConsensusError_InvalidChecksum) {
      var pre_expected = cst_encode_u_8_array_4(apiObj.expected);
      var pre_actual = cst_encode_u_8_array_4(apiObj.actual);
      wireObj.tag = 2;
      wireObj.kind.InvalidChecksum.expected = pre_expected;
      wireObj.kind.InvalidChecksum.actual = pre_actual;
      return;
    }
    if (apiObj is BitcoinConsensusError_NonMinimalVarInt) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is BitcoinConsensusError_ParseFailed) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind.ParseFailed.field0 = pre_field0;
      return;
    }
    if (apiObj is BitcoinConsensusError_UnsupportedSegwitFlag) {
      var pre_field0 = cst_encode_u_8(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.UnsupportedSegwitFlag.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_bitcoin_hex_error(
      BitcoinHexError apiObj, wire_cst_bitcoin_hex_error wireObj) {
    if (apiObj is BitcoinHexError_InvalidChar) {
      var pre_field0 = cst_encode_u_8(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.InvalidChar.field0 = pre_field0;
      return;
    }
    if (apiObj is BitcoinHexError_OddLengthString) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.OddLengthString.field0 = pre_field0;
      return;
    }
    if (apiObj is BitcoinHexError_InvalidLength) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      var pre_field1 = cst_encode_usize(apiObj.field1);
      wireObj.tag = 2;
      wireObj.kind.InvalidLength.field0 = pre_field0;
      wireObj.kind.InvalidLength.field1 = pre_field1;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_address_base(
      AddressBase apiObj, ffi.Pointer<wire_cst_address_base> wireObj) {
    cst_api_fill_to_wire_address_base(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bitcoin_address_error(
      BitcoinAddressError apiObj,
      ffi.Pointer<wire_cst_bitcoin_address_error> wireObj) {
    cst_api_fill_to_wire_bitcoin_address_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bitcoin_consensus_error(
      BitcoinConsensusError apiObj,
      ffi.Pointer<wire_cst_bitcoin_consensus_error> wireObj) {
    cst_api_fill_to_wire_bitcoin_consensus_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_bitcoin_hex_error(
      BitcoinHexError apiObj, ffi.Pointer<wire_cst_bitcoin_hex_error> wireObj) {
    cst_api_fill_to_wire_bitcoin_hex_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_script_buf_base(
      ScriptBufBase apiObj, ffi.Pointer<wire_cst_script_buf_base> wireObj) {
    cst_api_fill_to_wire_script_buf_base(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_transaction_base(
      TransactionBase apiObj, ffi.Pointer<wire_cst_transaction_base> wireObj) {
    cst_api_fill_to_wire_transaction_base(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_out_point(
      OutPoint apiObj, wire_cst_out_point wireObj) {
    wireObj.txid = cst_encode_String(apiObj.txid);
    wireObj.vout = cst_encode_u_32(apiObj.vout);
  }

  @protected
  void cst_api_fill_to_wire_payload(Payload apiObj, wire_cst_payload wireObj) {
    if (apiObj is Payload_PubkeyHash) {
      var pre_pubkey_hash = cst_encode_String(apiObj.pubkeyHash);
      wireObj.tag = 0;
      wireObj.kind.PubkeyHash.pubkey_hash = pre_pubkey_hash;
      return;
    }
    if (apiObj is Payload_ScriptHash) {
      var pre_script_hash = cst_encode_String(apiObj.scriptHash);
      wireObj.tag = 1;
      wireObj.kind.ScriptHash.script_hash = pre_script_hash;
      return;
    }
    if (apiObj is Payload_WitnessProgram) {
      var pre_version = cst_encode_witness_version(apiObj.version);
      var pre_program = cst_encode_list_prim_u_8_strict(apiObj.program);
      wireObj.tag = 2;
      wireObj.kind.WitnessProgram.version = pre_version;
      wireObj.kind.WitnessProgram.program = pre_program;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_script_buf_base(
      ScriptBufBase apiObj, wire_cst_script_buf_base wireObj) {
    wireObj.bytes = cst_encode_list_prim_u_8_strict(apiObj.bytes);
  }

  @protected
  void cst_api_fill_to_wire_transaction_base(
      TransactionBase apiObj, wire_cst_transaction_base wireObj) {
    wireObj.inner = cst_encode_String(apiObj.inner);
  }

  @protected
  void cst_api_fill_to_wire_tx_in(TxIn apiObj, wire_cst_tx_in wireObj) {
    cst_api_fill_to_wire_out_point(
        apiObj.previousOutput, wireObj.previous_output);
    cst_api_fill_to_wire_script_buf_base(apiObj.scriptSig, wireObj.script_sig);
    wireObj.sequence = cst_encode_u_32(apiObj.sequence);
    wireObj.witness = cst_encode_list_list_prim_u_8_strict(apiObj.witness);
  }

  @protected
  void cst_api_fill_to_wire_tx_out(TxOut apiObj, wire_cst_tx_out wireObj) {
    wireObj.value = cst_encode_u_64(apiObj.value);
    cst_api_fill_to_wire_script_buf_base(
        apiObj.scriptPubkey, wireObj.script_pubkey);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
      BdkBitcoinAddress raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
      BdkBitcoinAddress raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_network(Network raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  int cst_encode_variant(Variant raw);

  @protected
  int cst_encode_witness_version(WitnessVersion raw);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          BdkBitcoinAddress self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          BdkBitcoinAddress self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_address_base(AddressBase self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_error(BdkError self, SseSerializer serializer);

  @protected
  void sse_encode_bitcoin_address_error(
      BitcoinAddressError self, SseSerializer serializer);

  @protected
  void sse_encode_bitcoin_consensus_error(
      BitcoinConsensusError self, SseSerializer serializer);

  @protected
  void sse_encode_bitcoin_hex_error(
      BitcoinHexError self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_address_base(
      AddressBase self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bitcoin_address_error(
      BitcoinAddressError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bitcoin_consensus_error(
      BitcoinConsensusError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_bitcoin_hex_error(
      BitcoinHexError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_script_buf_base(
      ScriptBufBase self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_transaction_base(
      TransactionBase self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_list_list_prim_u_8_strict(
      List<Uint8List> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_tx_in(List<TxIn> self, SseSerializer serializer);

  @protected
  void sse_encode_list_tx_out(List<TxOut> self, SseSerializer serializer);

  @protected
  void sse_encode_network(Network self, SseSerializer serializer);

  @protected
  void sse_encode_out_point(OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_payload(Payload self, SseSerializer serializer);

  @protected
  void sse_encode_script_buf_base(ScriptBufBase self, SseSerializer serializer);

  @protected
  void sse_encode_transaction_base(
      TransactionBase self, SseSerializer serializer);

  @protected
  void sse_encode_tx_in(TxIn self, SseSerializer serializer);

  @protected
  void sse_encode_tx_out(TxOut self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_4(U8Array4 self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);

  @protected
  void sse_encode_variant(Variant self, SseSerializer serializer);

  @protected
  void sse_encode_witness_version(
      WitnessVersion self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class BdkCoreWire implements BaseWire {
  factory BdkCoreWire.fromExternalLibrary(ExternalLibrary lib) =>
      BdkCoreWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BdkCoreWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BdkCoreWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_AddressBase_as_string(
    int port_,
    ffi.Pointer<wire_cst_address_base> that,
  ) {
    return _wire_AddressBase_as_string(
      port_,
      that,
    );
  }

  late final _wire_AddressBase_as_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_address_base>)>>(
      'frbgen_bdk_flutter_wire_AddressBase_as_string');
  late final _wire_AddressBase_as_string = _wire_AddressBase_as_stringPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_address_base>)>();

  void wire_AddressBase_from_script(
    int port_,
    ffi.Pointer<wire_cst_script_buf_base> script,
    int network,
  ) {
    return _wire_AddressBase_from_script(
      port_,
      script,
      network,
    );
  }

  late final _wire_AddressBase_from_scriptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_script_buf_base>,
              ffi.Int32)>>('frbgen_bdk_flutter_wire_AddressBase_from_script');
  late final _wire_AddressBase_from_script =
      _wire_AddressBase_from_scriptPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_script_buf_base>, int)>();

  void wire_AddressBase_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> address,
    int network,
  ) {
    return _wire_AddressBase_from_string(
      port_,
      address,
      network,
    );
  }

  late final _wire_AddressBase_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Int32)>>('frbgen_bdk_flutter_wire_AddressBase_from_string');
  late final _wire_AddressBase_from_string =
      _wire_AddressBase_from_stringPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void wire_AddressBase_is_valid_for_network(
    int port_,
    ffi.Pointer<wire_cst_address_base> that,
    int network,
  ) {
    return _wire_AddressBase_is_valid_for_network(
      port_,
      that,
      network,
    );
  }

  late final _wire_AddressBase_is_valid_for_networkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_address_base>, ffi.Int32)>>(
      'frbgen_bdk_flutter_wire_AddressBase_is_valid_for_network');
  late final _wire_AddressBase_is_valid_for_network =
      _wire_AddressBase_is_valid_for_networkPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_address_base>, int)>();

  void wire_AddressBase_network(
    int port_,
    ffi.Pointer<wire_cst_address_base> that,
  ) {
    return _wire_AddressBase_network(
      port_,
      that,
    );
  }

  late final _wire_AddressBase_networkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_address_base>)>>(
      'frbgen_bdk_flutter_wire_AddressBase_network');
  late final _wire_AddressBase_network = _wire_AddressBase_networkPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_address_base>)>();

  void wire_AddressBase_payload(
    int port_,
    ffi.Pointer<wire_cst_address_base> that,
  ) {
    return _wire_AddressBase_payload(
      port_,
      that,
    );
  }

  late final _wire_AddressBase_payloadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_address_base>)>>(
      'frbgen_bdk_flutter_wire_AddressBase_payload');
  late final _wire_AddressBase_payload = _wire_AddressBase_payloadPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_address_base>)>();

  void wire_AddressBase_script_pubkey(
    int port_,
    ffi.Pointer<wire_cst_address_base> that,
  ) {
    return _wire_AddressBase_script_pubkey(
      port_,
      that,
    );
  }

  late final _wire_AddressBase_script_pubkeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_address_base>)>>(
      'frbgen_bdk_flutter_wire_AddressBase_script_pubkey');
  late final _wire_AddressBase_script_pubkey =
      _wire_AddressBase_script_pubkeyPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_address_base>)>();

  void wire_AddressBase_to_qr_uri(
    int port_,
    ffi.Pointer<wire_cst_address_base> that,
  ) {
    return _wire_AddressBase_to_qr_uri(
      port_,
      that,
    );
  }

  late final _wire_AddressBase_to_qr_uriPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_address_base>)>>(
      'frbgen_bdk_flutter_wire_AddressBase_to_qr_uri');
  late final _wire_AddressBase_to_qr_uri = _wire_AddressBase_to_qr_uriPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_address_base>)>();

  void wire_ScriptBufBase_empty(
    int port_,
  ) {
    return _wire_ScriptBufBase_empty(
      port_,
    );
  }

  late final _wire_ScriptBufBase_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_bdk_flutter_wire_ScriptBufBase_empty');
  late final _wire_ScriptBufBase_empty =
      _wire_ScriptBufBase_emptyPtr.asFunction<void Function(int)>();

  void wire_ScriptBufBase_from_hex(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> s,
  ) {
    return _wire_ScriptBufBase_from_hex(
      port_,
      s,
    );
  }

  late final _wire_ScriptBufBase_from_hexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire_ScriptBufBase_from_hex');
  late final _wire_ScriptBufBase_from_hex =
      _wire_ScriptBufBase_from_hexPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_ScriptBufBase_with_capacity(
    int port_,
    int capacity,
  ) {
    return _wire_ScriptBufBase_with_capacity(
      port_,
      capacity,
    );
  }

  late final _wire_ScriptBufBase_with_capacityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr)>>(
          'frbgen_bdk_flutter_wire_ScriptBufBase_with_capacity');
  late final _wire_ScriptBufBase_with_capacity =
      _wire_ScriptBufBase_with_capacityPtr
          .asFunction<void Function(int, int)>();

  void wire_TransactionBase_input(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_input(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_inputPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_input');
  late final _wire_TransactionBase_input = _wire_TransactionBase_inputPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_is_coin_base(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_is_coin_base(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_is_coin_basePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_is_coin_base');
  late final _wire_TransactionBase_is_coin_base =
      _wire_TransactionBase_is_coin_basePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_is_explicitly_rbf(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_is_explicitly_rbf(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_is_explicitly_rbfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_is_explicitly_rbf');
  late final _wire_TransactionBase_is_explicitly_rbf =
      _wire_TransactionBase_is_explicitly_rbfPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_is_lock_time_enabled(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_is_lock_time_enabled(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_is_lock_time_enabledPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_is_lock_time_enabled');
  late final _wire_TransactionBase_is_lock_time_enabled =
      _wire_TransactionBase_is_lock_time_enabledPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_lock_time(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_lock_time(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_lock_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_lock_time');
  late final _wire_TransactionBase_lock_time =
      _wire_TransactionBase_lock_timePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_new(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> transaction_bytes,
  ) {
    return _wire_TransactionBase_new(
      port_,
      transaction_bytes,
    );
  }

  late final _wire_TransactionBase_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_new');
  late final _wire_TransactionBase_new =
      _wire_TransactionBase_newPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>();

  void wire_TransactionBase_output(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_output(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_outputPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_output');
  late final _wire_TransactionBase_output = _wire_TransactionBase_outputPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_serialize(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_serialize(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_serializePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_serialize');
  late final _wire_TransactionBase_serialize =
      _wire_TransactionBase_serializePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_size(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_size(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_size');
  late final _wire_TransactionBase_size = _wire_TransactionBase_sizePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_txid(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_txid(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_txidPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_txid');
  late final _wire_TransactionBase_txid = _wire_TransactionBase_txidPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_version(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_version(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_versionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_version');
  late final _wire_TransactionBase_version = _wire_TransactionBase_versionPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_vsize(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_vsize(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_vsizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_vsize');
  late final _wire_TransactionBase_vsize = _wire_TransactionBase_vsizePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_weight(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_weight(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_weightPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_weight');
  late final _wire_TransactionBase_weight = _wire_TransactionBase_weightPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddressPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddressPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<wire_cst_address_base> cst_new_box_autoadd_address_base() {
    return _cst_new_box_autoadd_address_base();
  }

  late final _cst_new_box_autoadd_address_basePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_address_base> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_address_base');
  late final _cst_new_box_autoadd_address_base =
      _cst_new_box_autoadd_address_basePtr
          .asFunction<ffi.Pointer<wire_cst_address_base> Function()>();

  ffi.Pointer<wire_cst_bitcoin_address_error>
      cst_new_box_autoadd_bitcoin_address_error() {
    return _cst_new_box_autoadd_bitcoin_address_error();
  }

  late final _cst_new_box_autoadd_bitcoin_address_errorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_bitcoin_address_error> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_bitcoin_address_error');
  late final _cst_new_box_autoadd_bitcoin_address_error =
      _cst_new_box_autoadd_bitcoin_address_errorPtr
          .asFunction<ffi.Pointer<wire_cst_bitcoin_address_error> Function()>();

  ffi.Pointer<wire_cst_bitcoin_consensus_error>
      cst_new_box_autoadd_bitcoin_consensus_error() {
    return _cst_new_box_autoadd_bitcoin_consensus_error();
  }

  late final _cst_new_box_autoadd_bitcoin_consensus_errorPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_bitcoin_consensus_error> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_bitcoin_consensus_error');
  late final _cst_new_box_autoadd_bitcoin_consensus_error =
      _cst_new_box_autoadd_bitcoin_consensus_errorPtr.asFunction<
          ffi.Pointer<wire_cst_bitcoin_consensus_error> Function()>();

  ffi.Pointer<wire_cst_bitcoin_hex_error>
      cst_new_box_autoadd_bitcoin_hex_error() {
    return _cst_new_box_autoadd_bitcoin_hex_error();
  }

  late final _cst_new_box_autoadd_bitcoin_hex_errorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_bitcoin_hex_error> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_bitcoin_hex_error');
  late final _cst_new_box_autoadd_bitcoin_hex_error =
      _cst_new_box_autoadd_bitcoin_hex_errorPtr
          .asFunction<ffi.Pointer<wire_cst_bitcoin_hex_error> Function()>();

  ffi.Pointer<wire_cst_script_buf_base> cst_new_box_autoadd_script_buf_base() {
    return _cst_new_box_autoadd_script_buf_base();
  }

  late final _cst_new_box_autoadd_script_buf_basePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_script_buf_base> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_script_buf_base');
  late final _cst_new_box_autoadd_script_buf_base =
      _cst_new_box_autoadd_script_buf_basePtr
          .asFunction<ffi.Pointer<wire_cst_script_buf_base> Function()>();

  ffi.Pointer<wire_cst_transaction_base>
      cst_new_box_autoadd_transaction_base() {
    return _cst_new_box_autoadd_transaction_base();
  }

  late final _cst_new_box_autoadd_transaction_basePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_transaction_base> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_transaction_base');
  late final _cst_new_box_autoadd_transaction_base =
      _cst_new_box_autoadd_transaction_basePtr
          .asFunction<ffi.Pointer<wire_cst_transaction_base> Function()>();

  ffi.Pointer<wire_cst_list_list_prim_u_8_strict>
      cst_new_list_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_list_prim_u_8_strictPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_list_list_prim_u_8_strict> Function(
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_cst_new_list_list_prim_u_8_strict');
  late final _cst_new_list_list_prim_u_8_strict =
      _cst_new_list_list_prim_u_8_strictPtr.asFunction<
          ffi.Pointer<wire_cst_list_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_new_list_prim_u_8_loose(
    int len,
  ) {
    return _cst_new_list_prim_u_8_loose(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_loosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_prim_u_8_loose');
  late final _cst_new_list_prim_u_8_loose = _cst_new_list_prim_u_8_loosePtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_tx_in> cst_new_list_tx_in(
    int len,
  ) {
    return _cst_new_list_tx_in(
      len,
    );
  }

  late final _cst_new_list_tx_inPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_tx_in> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_tx_in');
  late final _cst_new_list_tx_in = _cst_new_list_tx_inPtr
      .asFunction<ffi.Pointer<wire_cst_list_tx_in> Function(int)>();

  ffi.Pointer<wire_cst_list_tx_out> cst_new_list_tx_out(
    int len,
  ) {
    return _cst_new_list_tx_out(
      len,
    );
  }

  late final _cst_new_list_tx_outPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_tx_out> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_tx_out');
  late final _cst_new_list_tx_out = _cst_new_list_tx_outPtr
      .asFunction<ffi.Pointer<wire_cst_list_tx_out> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

final class wire_cst_address_base extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_script_buf_base extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> bytes;
}

final class wire_cst_transaction_base extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> inner;
}

final class wire_cst_list_prim_u_8_loose extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_BitcoinAddressError_Base58 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BitcoinAddressError_Bech32 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BitcoinAddressError_InvalidBech32Variant
    extends ffi.Struct {
  @ffi.Int32()
  external int expected;

  @ffi.Int32()
  external int found;
}

final class wire_cst_BitcoinAddressError_InvalidWitnessVersion
    extends ffi.Struct {
  @ffi.Uint8()
  external int field0;
}

final class wire_cst_BitcoinAddressError_UnparsableWitnessVersion
    extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BitcoinAddressError_InvalidWitnessProgramLength
    extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_BitcoinAddressError_InvalidSegwitV0ProgramLength
    extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_BitcoinAddressError_UnknownAddressType extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BitcoinAddressError_NetworkValidation extends ffi.Struct {
  @ffi.Int32()
  external int network_required;

  @ffi.Int32()
  external int network_found;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> address;
}

final class BitcoinAddressErrorKind extends ffi.Union {
  external wire_cst_BitcoinAddressError_Base58 Base58;

  external wire_cst_BitcoinAddressError_Bech32 Bech32;

  external wire_cst_BitcoinAddressError_InvalidBech32Variant
      InvalidBech32Variant;

  external wire_cst_BitcoinAddressError_InvalidWitnessVersion
      InvalidWitnessVersion;

  external wire_cst_BitcoinAddressError_UnparsableWitnessVersion
      UnparsableWitnessVersion;

  external wire_cst_BitcoinAddressError_InvalidWitnessProgramLength
      InvalidWitnessProgramLength;

  external wire_cst_BitcoinAddressError_InvalidSegwitV0ProgramLength
      InvalidSegwitV0ProgramLength;

  external wire_cst_BitcoinAddressError_UnknownAddressType UnknownAddressType;

  external wire_cst_BitcoinAddressError_NetworkValidation NetworkValidation;
}

final class wire_cst_bitcoin_address_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external BitcoinAddressErrorKind kind;
}

final class wire_cst_BitcoinConsensusError_Io extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BitcoinConsensusError_OversizedVectorAllocation
    extends ffi.Struct {
  @ffi.UintPtr()
  external int requested;

  @ffi.UintPtr()
  external int max;
}

final class wire_cst_BitcoinConsensusError_InvalidChecksum extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> expected;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> actual;
}

final class wire_cst_BitcoinConsensusError_ParseFailed extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BitcoinConsensusError_UnsupportedSegwitFlag
    extends ffi.Struct {
  @ffi.Uint8()
  external int field0;
}

final class BitcoinConsensusErrorKind extends ffi.Union {
  external wire_cst_BitcoinConsensusError_Io Io;

  external wire_cst_BitcoinConsensusError_OversizedVectorAllocation
      OversizedVectorAllocation;

  external wire_cst_BitcoinConsensusError_InvalidChecksum InvalidChecksum;

  external wire_cst_BitcoinConsensusError_ParseFailed ParseFailed;

  external wire_cst_BitcoinConsensusError_UnsupportedSegwitFlag
      UnsupportedSegwitFlag;
}

final class wire_cst_bitcoin_consensus_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external BitcoinConsensusErrorKind kind;
}

final class wire_cst_BitcoinHexError_InvalidChar extends ffi.Struct {
  @ffi.Uint8()
  external int field0;
}

final class wire_cst_BitcoinHexError_OddLengthString extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_BitcoinHexError_InvalidLength extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;

  @ffi.UintPtr()
  external int field1;
}

final class BitcoinHexErrorKind extends ffi.Union {
  external wire_cst_BitcoinHexError_InvalidChar InvalidChar;

  external wire_cst_BitcoinHexError_OddLengthString OddLengthString;

  external wire_cst_BitcoinHexError_InvalidLength InvalidLength;
}

final class wire_cst_bitcoin_hex_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external BitcoinHexErrorKind kind;
}

final class wire_cst_list_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_cst_list_prim_u_8_strict>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_out_point extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> txid;

  @ffi.Uint32()
  external int vout;
}

final class wire_cst_tx_in extends ffi.Struct {
  external wire_cst_out_point previous_output;

  external wire_cst_script_buf_base script_sig;

  @ffi.Uint32()
  external int sequence;

  external ffi.Pointer<wire_cst_list_list_prim_u_8_strict> witness;
}

final class wire_cst_list_tx_in extends ffi.Struct {
  external ffi.Pointer<wire_cst_tx_in> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_tx_out extends ffi.Struct {
  @ffi.Uint64()
  external int value;

  external wire_cst_script_buf_base script_pubkey;
}

final class wire_cst_list_tx_out extends ffi.Struct {
  external ffi.Pointer<wire_cst_tx_out> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_BdkError_HexError extends ffi.Struct {
  external ffi.Pointer<wire_cst_bitcoin_hex_error> field0;
}

final class wire_cst_BdkError_ConsensusError extends ffi.Struct {
  external ffi.Pointer<wire_cst_bitcoin_consensus_error> field0;
}

final class wire_cst_BdkError_AddressError extends ffi.Struct {
  external ffi.Pointer<wire_cst_bitcoin_address_error> field0;
}

final class BdkErrorKind extends ffi.Union {
  external wire_cst_BdkError_HexError HexError;

  external wire_cst_BdkError_ConsensusError ConsensusError;

  external wire_cst_BdkError_AddressError AddressError;
}

final class wire_cst_bdk_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external BdkErrorKind kind;
}

final class wire_cst_Payload_PubkeyHash extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> pubkey_hash;
}

final class wire_cst_Payload_ScriptHash extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> script_hash;
}

final class wire_cst_Payload_WitnessProgram extends ffi.Struct {
  @ffi.Int32()
  external int version;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> program;
}

final class PayloadKind extends ffi.Union {
  external wire_cst_Payload_PubkeyHash PubkeyHash;

  external wire_cst_Payload_ScriptHash ScriptHash;

  external wire_cst_Payload_WitnessProgram WitnessProgram;
}

final class wire_cst_payload extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external PayloadKind kind;
}
