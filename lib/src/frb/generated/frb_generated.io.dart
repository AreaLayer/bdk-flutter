// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.25.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/descriptor.dart';
import 'api/key.dart';
import 'api/types.dart';
import 'api/wallet.dart';
import 'dart:async';
import 'dart:convert';
import 'dart:ffi' as ffi;
import 'frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated_io.dart';
import 'util/error.dart';

abstract class BdkCoreApiImplPlatform extends BaseApiImpl<BdkCoreWire> {
  BdkCoreApiImplPlatform({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcBitcoinBip32DerivationPathPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPathPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcKeysDescriptorPublicKeyPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKeyPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcKeysDescriptorSecretKeyPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKeyPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ArcKeysBip39MnemonicPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39MnemonicPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_ExtendedDescriptorPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptorPtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_MutexBdkWalletAnyDatabasePtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabasePtr;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BdkBitcoinAddressPtr => wire
          ._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddressPtr;

  CrossPlatformFinalizerArg get rust_arc_decrement_strong_count_KeysKeyMapPtr =>
      wire._rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMapPtr;

  @protected
  ArcBitcoinBip32DerivationPath
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath(
          dynamic raw);

  @protected
  ArcKeysDescriptorPublicKey
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey(
          dynamic raw);

  @protected
  ArcKeysDescriptorSecretKey
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey(
          dynamic raw);

  @protected
  ArcKeysBip39Mnemonic
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic(
          dynamic raw);

  @protected
  ExtendedDescriptor
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor(
          dynamic raw);

  @protected
  MutexBdkWalletAnyDatabase
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase(
          dynamic raw);

  @protected
  BdkBitcoinAddress
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          dynamic raw);

  @protected
  KeysKeyMap
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap(
          dynamic raw);

  @protected
  ArcBitcoinBip32DerivationPath
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath(
          dynamic raw);

  @protected
  ArcKeysDescriptorPublicKey
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey(
          dynamic raw);

  @protected
  ArcKeysDescriptorSecretKey
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey(
          dynamic raw);

  @protected
  ArcKeysBip39Mnemonic
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic(
          dynamic raw);

  @protected
  ExtendedDescriptor
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor(
          dynamic raw);

  @protected
  MutexBdkWalletAnyDatabase
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase(
          dynamic raw);

  @protected
  BdkBitcoinAddress
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          dynamic raw);

  @protected
  KeysKeyMap
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap(
          dynamic raw);

  @protected
  String dco_decode_String(dynamic raw);

  @protected
  AddressBase dco_decode_address_base(dynamic raw);

  @protected
  AddressError dco_decode_address_error(dynamic raw);

  @protected
  BdkError dco_decode_bdk_error(dynamic raw);

  @protected
  bool dco_decode_bool(dynamic raw);

  @protected
  AddressBase dco_decode_box_autoadd_address_base(dynamic raw);

  @protected
  AddressError dco_decode_box_autoadd_address_error(dynamic raw);

  @protected
  ConsensusError dco_decode_box_autoadd_consensus_error(dynamic raw);

  @protected
  DatabaseConfig dco_decode_box_autoadd_database_config(dynamic raw);

  @protected
  DerivationPathBase dco_decode_box_autoadd_derivation_path_base(dynamic raw);

  @protected
  DescriptorBase dco_decode_box_autoadd_descriptor_base(dynamic raw);

  @protected
  DescriptorError dco_decode_box_autoadd_descriptor_error(dynamic raw);

  @protected
  DescriptorPublicKeyBase dco_decode_box_autoadd_descriptor_public_key_base(
      dynamic raw);

  @protected
  DescriptorSecretKeyBase dco_decode_box_autoadd_descriptor_secret_key_base(
      dynamic raw);

  @protected
  HexError dco_decode_box_autoadd_hex_error(dynamic raw);

  @protected
  MnemonicBase dco_decode_box_autoadd_mnemonic_base(dynamic raw);

  @protected
  OutPoint dco_decode_box_autoadd_out_point(dynamic raw);

  @protected
  ScriptBufBase dco_decode_box_autoadd_script_buf_base(dynamic raw);

  @protected
  SledDbConfiguration dco_decode_box_autoadd_sled_db_configuration(dynamic raw);

  @protected
  SqliteDbConfiguration dco_decode_box_autoadd_sqlite_db_configuration(
      dynamic raw);

  @protected
  TransactionBase dco_decode_box_autoadd_transaction_base(dynamic raw);

  @protected
  ConsensusError dco_decode_consensus_error(dynamic raw);

  @protected
  DatabaseConfig dco_decode_database_config(dynamic raw);

  @protected
  DerivationPathBase dco_decode_derivation_path_base(dynamic raw);

  @protected
  DescriptorBase dco_decode_descriptor_base(dynamic raw);

  @protected
  DescriptorError dco_decode_descriptor_error(dynamic raw);

  @protected
  DescriptorPublicKeyBase dco_decode_descriptor_public_key_base(dynamic raw);

  @protected
  DescriptorSecretKeyBase dco_decode_descriptor_secret_key_base(dynamic raw);

  @protected
  double dco_decode_f_32(dynamic raw);

  @protected
  HexError dco_decode_hex_error(dynamic raw);

  @protected
  int dco_decode_i_32(dynamic raw);

  @protected
  KeychainKind dco_decode_keychain_kind(dynamic raw);

  @protected
  List<Uint8List> dco_decode_list_list_prim_u_8_strict(dynamic raw);

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw);

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw);

  @protected
  List<TxIn> dco_decode_list_tx_in(dynamic raw);

  @protected
  List<TxOut> dco_decode_list_tx_out(dynamic raw);

  @protected
  MnemonicBase dco_decode_mnemonic_base(dynamic raw);

  @protected
  Network dco_decode_network(dynamic raw);

  @protected
  String? dco_decode_opt_String(dynamic raw);

  @protected
  DescriptorBase? dco_decode_opt_box_autoadd_descriptor_base(dynamic raw);

  @protected
  OutPoint dco_decode_out_point(dynamic raw);

  @protected
  Payload dco_decode_payload(dynamic raw);

  @protected
  ScriptBufBase dco_decode_script_buf_base(dynamic raw);

  @protected
  SledDbConfiguration dco_decode_sled_db_configuration(dynamic raw);

  @protected
  SqliteDbConfiguration dco_decode_sqlite_db_configuration(dynamic raw);

  @protected
  TransactionBase dco_decode_transaction_base(dynamic raw);

  @protected
  TxIn dco_decode_tx_in(dynamic raw);

  @protected
  TxOut dco_decode_tx_out(dynamic raw);

  @protected
  int dco_decode_u_32(dynamic raw);

  @protected
  int dco_decode_u_64(dynamic raw);

  @protected
  int dco_decode_u_8(dynamic raw);

  @protected
  U8Array4 dco_decode_u_8_array_4(dynamic raw);

  @protected
  void dco_decode_unit(dynamic raw);

  @protected
  int dco_decode_usize(dynamic raw);

  @protected
  Variant dco_decode_variant(dynamic raw);

  @protected
  WalletBase dco_decode_wallet_base(dynamic raw);

  @protected
  WitnessVersion dco_decode_witness_version(dynamic raw);

  @protected
  WordCount dco_decode_word_count(dynamic raw);

  @protected
  ArcBitcoinBip32DerivationPath
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath(
          SseDeserializer deserializer);

  @protected
  ArcKeysDescriptorPublicKey
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey(
          SseDeserializer deserializer);

  @protected
  ArcKeysDescriptorSecretKey
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey(
          SseDeserializer deserializer);

  @protected
  ArcKeysBip39Mnemonic
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic(
          SseDeserializer deserializer);

  @protected
  ExtendedDescriptor
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor(
          SseDeserializer deserializer);

  @protected
  MutexBdkWalletAnyDatabase
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase(
          SseDeserializer deserializer);

  @protected
  BdkBitcoinAddress
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          SseDeserializer deserializer);

  @protected
  KeysKeyMap
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap(
          SseDeserializer deserializer);

  @protected
  ArcBitcoinBip32DerivationPath
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath(
          SseDeserializer deserializer);

  @protected
  ArcKeysDescriptorPublicKey
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey(
          SseDeserializer deserializer);

  @protected
  ArcKeysDescriptorSecretKey
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey(
          SseDeserializer deserializer);

  @protected
  ArcKeysBip39Mnemonic
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic(
          SseDeserializer deserializer);

  @protected
  ExtendedDescriptor
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor(
          SseDeserializer deserializer);

  @protected
  MutexBdkWalletAnyDatabase
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase(
          SseDeserializer deserializer);

  @protected
  BdkBitcoinAddress
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          SseDeserializer deserializer);

  @protected
  KeysKeyMap
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap(
          SseDeserializer deserializer);

  @protected
  String sse_decode_String(SseDeserializer deserializer);

  @protected
  AddressBase sse_decode_address_base(SseDeserializer deserializer);

  @protected
  AddressError sse_decode_address_error(SseDeserializer deserializer);

  @protected
  BdkError sse_decode_bdk_error(SseDeserializer deserializer);

  @protected
  bool sse_decode_bool(SseDeserializer deserializer);

  @protected
  AddressBase sse_decode_box_autoadd_address_base(SseDeserializer deserializer);

  @protected
  AddressError sse_decode_box_autoadd_address_error(
      SseDeserializer deserializer);

  @protected
  ConsensusError sse_decode_box_autoadd_consensus_error(
      SseDeserializer deserializer);

  @protected
  DatabaseConfig sse_decode_box_autoadd_database_config(
      SseDeserializer deserializer);

  @protected
  DerivationPathBase sse_decode_box_autoadd_derivation_path_base(
      SseDeserializer deserializer);

  @protected
  DescriptorBase sse_decode_box_autoadd_descriptor_base(
      SseDeserializer deserializer);

  @protected
  DescriptorError sse_decode_box_autoadd_descriptor_error(
      SseDeserializer deserializer);

  @protected
  DescriptorPublicKeyBase sse_decode_box_autoadd_descriptor_public_key_base(
      SseDeserializer deserializer);

  @protected
  DescriptorSecretKeyBase sse_decode_box_autoadd_descriptor_secret_key_base(
      SseDeserializer deserializer);

  @protected
  HexError sse_decode_box_autoadd_hex_error(SseDeserializer deserializer);

  @protected
  MnemonicBase sse_decode_box_autoadd_mnemonic_base(
      SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_box_autoadd_out_point(SseDeserializer deserializer);

  @protected
  ScriptBufBase sse_decode_box_autoadd_script_buf_base(
      SseDeserializer deserializer);

  @protected
  SledDbConfiguration sse_decode_box_autoadd_sled_db_configuration(
      SseDeserializer deserializer);

  @protected
  SqliteDbConfiguration sse_decode_box_autoadd_sqlite_db_configuration(
      SseDeserializer deserializer);

  @protected
  TransactionBase sse_decode_box_autoadd_transaction_base(
      SseDeserializer deserializer);

  @protected
  ConsensusError sse_decode_consensus_error(SseDeserializer deserializer);

  @protected
  DatabaseConfig sse_decode_database_config(SseDeserializer deserializer);

  @protected
  DerivationPathBase sse_decode_derivation_path_base(
      SseDeserializer deserializer);

  @protected
  DescriptorBase sse_decode_descriptor_base(SseDeserializer deserializer);

  @protected
  DescriptorError sse_decode_descriptor_error(SseDeserializer deserializer);

  @protected
  DescriptorPublicKeyBase sse_decode_descriptor_public_key_base(
      SseDeserializer deserializer);

  @protected
  DescriptorSecretKeyBase sse_decode_descriptor_secret_key_base(
      SseDeserializer deserializer);

  @protected
  double sse_decode_f_32(SseDeserializer deserializer);

  @protected
  HexError sse_decode_hex_error(SseDeserializer deserializer);

  @protected
  int sse_decode_i_32(SseDeserializer deserializer);

  @protected
  KeychainKind sse_decode_keychain_kind(SseDeserializer deserializer);

  @protected
  List<Uint8List> sse_decode_list_list_prim_u_8_strict(
      SseDeserializer deserializer);

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer);

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer);

  @protected
  List<TxIn> sse_decode_list_tx_in(SseDeserializer deserializer);

  @protected
  List<TxOut> sse_decode_list_tx_out(SseDeserializer deserializer);

  @protected
  MnemonicBase sse_decode_mnemonic_base(SseDeserializer deserializer);

  @protected
  Network sse_decode_network(SseDeserializer deserializer);

  @protected
  String? sse_decode_opt_String(SseDeserializer deserializer);

  @protected
  DescriptorBase? sse_decode_opt_box_autoadd_descriptor_base(
      SseDeserializer deserializer);

  @protected
  OutPoint sse_decode_out_point(SseDeserializer deserializer);

  @protected
  Payload sse_decode_payload(SseDeserializer deserializer);

  @protected
  ScriptBufBase sse_decode_script_buf_base(SseDeserializer deserializer);

  @protected
  SledDbConfiguration sse_decode_sled_db_configuration(
      SseDeserializer deserializer);

  @protected
  SqliteDbConfiguration sse_decode_sqlite_db_configuration(
      SseDeserializer deserializer);

  @protected
  TransactionBase sse_decode_transaction_base(SseDeserializer deserializer);

  @protected
  TxIn sse_decode_tx_in(SseDeserializer deserializer);

  @protected
  TxOut sse_decode_tx_out(SseDeserializer deserializer);

  @protected
  int sse_decode_u_32(SseDeserializer deserializer);

  @protected
  int sse_decode_u_64(SseDeserializer deserializer);

  @protected
  int sse_decode_u_8(SseDeserializer deserializer);

  @protected
  U8Array4 sse_decode_u_8_array_4(SseDeserializer deserializer);

  @protected
  void sse_decode_unit(SseDeserializer deserializer);

  @protected
  int sse_decode_usize(SseDeserializer deserializer);

  @protected
  Variant sse_decode_variant(SseDeserializer deserializer);

  @protected
  WalletBase sse_decode_wallet_base(SseDeserializer deserializer);

  @protected
  WitnessVersion sse_decode_witness_version(SseDeserializer deserializer);

  @protected
  WordCount sse_decode_word_count(SseDeserializer deserializer);

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_String(String raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_list_prim_u_8_strict(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_cst_address_base> cst_encode_box_autoadd_address_base(
      AddressBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_address_base();
    cst_api_fill_to_wire_address_base(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_address_error> cst_encode_box_autoadd_address_error(
      AddressError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_address_error();
    cst_api_fill_to_wire_address_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_consensus_error> cst_encode_box_autoadd_consensus_error(
      ConsensusError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_consensus_error();
    cst_api_fill_to_wire_consensus_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_database_config> cst_encode_box_autoadd_database_config(
      DatabaseConfig raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_database_config();
    cst_api_fill_to_wire_database_config(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_derivation_path_base>
      cst_encode_box_autoadd_derivation_path_base(DerivationPathBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_derivation_path_base();
    cst_api_fill_to_wire_derivation_path_base(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_descriptor_base> cst_encode_box_autoadd_descriptor_base(
      DescriptorBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_descriptor_base();
    cst_api_fill_to_wire_descriptor_base(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_descriptor_error>
      cst_encode_box_autoadd_descriptor_error(DescriptorError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_descriptor_error();
    cst_api_fill_to_wire_descriptor_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_descriptor_public_key_base>
      cst_encode_box_autoadd_descriptor_public_key_base(
          DescriptorPublicKeyBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_descriptor_public_key_base();
    cst_api_fill_to_wire_descriptor_public_key_base(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_descriptor_secret_key_base>
      cst_encode_box_autoadd_descriptor_secret_key_base(
          DescriptorSecretKeyBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_descriptor_secret_key_base();
    cst_api_fill_to_wire_descriptor_secret_key_base(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_hex_error> cst_encode_box_autoadd_hex_error(
      HexError raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_hex_error();
    cst_api_fill_to_wire_hex_error(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_mnemonic_base> cst_encode_box_autoadd_mnemonic_base(
      MnemonicBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_mnemonic_base();
    cst_api_fill_to_wire_mnemonic_base(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_out_point> cst_encode_box_autoadd_out_point(
      OutPoint raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_out_point();
    cst_api_fill_to_wire_out_point(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_script_buf_base> cst_encode_box_autoadd_script_buf_base(
      ScriptBufBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_script_buf_base();
    cst_api_fill_to_wire_script_buf_base(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_sled_db_configuration>
      cst_encode_box_autoadd_sled_db_configuration(SledDbConfiguration raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_sled_db_configuration();
    cst_api_fill_to_wire_sled_db_configuration(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_sqlite_db_configuration>
      cst_encode_box_autoadd_sqlite_db_configuration(
          SqliteDbConfiguration raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_sqlite_db_configuration();
    cst_api_fill_to_wire_sqlite_db_configuration(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_transaction_base>
      cst_encode_box_autoadd_transaction_base(TransactionBase raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ptr = wire.cst_new_box_autoadd_transaction_base();
    cst_api_fill_to_wire_transaction_base(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_cst_list_list_prim_u_8_strict>
      cst_encode_list_list_prim_u_8_strict(List<Uint8List> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_list_prim_u_8_strict(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      ans.ref.ptr[i] = cst_encode_list_prim_u_8_strict(raw[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_encode_list_prim_u_8_loose(
      List<int> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_loose(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_list_prim_u_8_strict(
      Uint8List raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_tx_in> cst_encode_list_tx_in(List<TxIn> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_tx_in(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_tx_in(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_tx_out> cst_encode_list_tx_out(List<TxOut> raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_tx_out(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      cst_api_fill_to_wire_tx_out(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_opt_String(
      String? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null ? ffi.nullptr : cst_encode_String(raw);
  }

  @protected
  ffi.Pointer<wire_cst_descriptor_base>
      cst_encode_opt_box_autoadd_descriptor_base(DescriptorBase? raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw == null
        ? ffi.nullptr
        : cst_encode_box_autoadd_descriptor_base(raw);
  }

  @protected
  int cst_encode_u_64(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw.toInt();
  }

  @protected
  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_encode_u_8_array_4(
      U8Array4 raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    final ans = wire.cst_new_list_prim_u_8_strict(4);
    ans.ref.ptr.asTypedList(4).setAll(0, raw);
    return ans;
  }

  @protected
  void cst_api_fill_to_wire_address_base(
      AddressBase apiObj, wire_cst_address_base wireObj) {
    wireObj.field0 =
        cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
            apiObj.field0);
  }

  @protected
  void cst_api_fill_to_wire_address_error(
      AddressError apiObj, wire_cst_address_error wireObj) {
    if (apiObj is AddressError_Base58) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.Base58.field0 = pre_field0;
      return;
    }
    if (apiObj is AddressError_Bech32) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.Bech32.field0 = pre_field0;
      return;
    }
    if (apiObj is AddressError_EmptyBech32Payload) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is AddressError_InvalidBech32Variant) {
      var pre_expected = cst_encode_variant(apiObj.expected);
      var pre_found = cst_encode_variant(apiObj.found);
      wireObj.tag = 3;
      wireObj.kind.InvalidBech32Variant.expected = pre_expected;
      wireObj.kind.InvalidBech32Variant.found = pre_found;
      return;
    }
    if (apiObj is AddressError_InvalidWitnessVersion) {
      var pre_field0 = cst_encode_u_8(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind.InvalidWitnessVersion.field0 = pre_field0;
      return;
    }
    if (apiObj is AddressError_UnparsableWitnessVersion) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.UnparsableWitnessVersion.field0 = pre_field0;
      return;
    }
    if (apiObj is AddressError_MalformedWitnessVersion) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is AddressError_InvalidWitnessProgramLength) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind.InvalidWitnessProgramLength.field0 = pre_field0;
      return;
    }
    if (apiObj is AddressError_InvalidSegwitV0ProgramLength) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 8;
      wireObj.kind.InvalidSegwitV0ProgramLength.field0 = pre_field0;
      return;
    }
    if (apiObj is AddressError_UncompressedPubkey) {
      wireObj.tag = 9;
      return;
    }
    if (apiObj is AddressError_ExcessiveScriptSize) {
      wireObj.tag = 10;
      return;
    }
    if (apiObj is AddressError_UnrecognizedScript) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is AddressError_UnknownAddressType) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 12;
      wireObj.kind.UnknownAddressType.field0 = pre_field0;
      return;
    }
    if (apiObj is AddressError_NetworkValidation) {
      var pre_network_required = cst_encode_network(apiObj.networkRequired);
      var pre_network_found = cst_encode_network(apiObj.networkFound);
      var pre_address = cst_encode_String(apiObj.address);
      wireObj.tag = 13;
      wireObj.kind.NetworkValidation.network_required = pre_network_required;
      wireObj.kind.NetworkValidation.network_found = pre_network_found;
      wireObj.kind.NetworkValidation.address = pre_address;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_bdk_error(
      BdkError apiObj, wire_cst_bdk_error wireObj) {
    if (apiObj is BdkError_Hex) {
      var pre_field0 = cst_encode_box_autoadd_hex_error(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.Hex.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Consensus) {
      var pre_field0 = cst_encode_box_autoadd_consensus_error(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.Consensus.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Address) {
      var pre_field0 = cst_encode_box_autoadd_address_error(apiObj.field0);
      wireObj.tag = 2;
      wireObj.kind.Address.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Descriptor) {
      var pre_field0 = cst_encode_box_autoadd_descriptor_error(apiObj.field0);
      wireObj.tag = 3;
      wireObj.kind.Descriptor.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_InvalidU32Bytes) {
      var pre_field0 = cst_encode_list_prim_u_8_strict(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind.InvalidU32Bytes.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Generic) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.Generic.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_ScriptDoesntHaveAddressForm) {
      wireObj.tag = 6;
      return;
    }
    if (apiObj is BdkError_NoRecipients) {
      wireObj.tag = 7;
      return;
    }
    if (apiObj is BdkError_NoUtxosSelected) {
      wireObj.tag = 8;
      return;
    }
    if (apiObj is BdkError_OutputBelowDustLimit) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 9;
      wireObj.kind.OutputBelowDustLimit.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_InsufficientFunds) {
      var pre_needed = cst_encode_u_64(apiObj.needed);
      var pre_available = cst_encode_u_64(apiObj.available);
      wireObj.tag = 10;
      wireObj.kind.InsufficientFunds.needed = pre_needed;
      wireObj.kind.InsufficientFunds.available = pre_available;
      return;
    }
    if (apiObj is BdkError_BnBTotalTriesExceeded) {
      wireObj.tag = 11;
      return;
    }
    if (apiObj is BdkError_BnBNoExactMatch) {
      wireObj.tag = 12;
      return;
    }
    if (apiObj is BdkError_UnknownUtxo) {
      wireObj.tag = 13;
      return;
    }
    if (apiObj is BdkError_TransactionNotFound) {
      wireObj.tag = 14;
      return;
    }
    if (apiObj is BdkError_TransactionConfirmed) {
      wireObj.tag = 15;
      return;
    }
    if (apiObj is BdkError_IrreplaceableTransaction) {
      wireObj.tag = 16;
      return;
    }
    if (apiObj is BdkError_FeeRateTooLow) {
      var pre_needed = cst_encode_f_32(apiObj.needed);
      wireObj.tag = 17;
      wireObj.kind.FeeRateTooLow.needed = pre_needed;
      return;
    }
    if (apiObj is BdkError_FeeTooLow) {
      var pre_needed = cst_encode_u_64(apiObj.needed);
      wireObj.tag = 18;
      wireObj.kind.FeeTooLow.needed = pre_needed;
      return;
    }
    if (apiObj is BdkError_FeeRateUnavailable) {
      wireObj.tag = 19;
      return;
    }
    if (apiObj is BdkError_MissingKeyOrigin) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 20;
      wireObj.kind.MissingKeyOrigin.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Key) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 21;
      wireObj.kind.Key.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_ChecksumMismatch) {
      wireObj.tag = 22;
      return;
    }
    if (apiObj is BdkError_SpendingPolicyRequired) {
      var pre_field0 = cst_encode_keychain_kind(apiObj.field0);
      wireObj.tag = 23;
      wireObj.kind.SpendingPolicyRequired.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_InvalidPolicyPathError) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 24;
      wireObj.kind.InvalidPolicyPathError.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Signer) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 25;
      wireObj.kind.Signer.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_InvalidNetwork) {
      var pre_requested = cst_encode_network(apiObj.requested);
      var pre_found = cst_encode_network(apiObj.found);
      wireObj.tag = 26;
      wireObj.kind.InvalidNetwork.requested = pre_requested;
      wireObj.kind.InvalidNetwork.found = pre_found;
      return;
    }
    if (apiObj is BdkError_InvalidOutpoint) {
      var pre_field0 = cst_encode_box_autoadd_out_point(apiObj.field0);
      wireObj.tag = 27;
      wireObj.kind.InvalidOutpoint.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Encode) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 28;
      wireObj.kind.Encode.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Miniscript) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 29;
      wireObj.kind.Miniscript.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_MiniscriptPsbt) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 30;
      wireObj.kind.MiniscriptPsbt.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Bip32) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 31;
      wireObj.kind.Bip32.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Bip39) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 32;
      wireObj.kind.Bip39.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Secp256k1) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 33;
      wireObj.kind.Secp256k1.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Json) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 34;
      wireObj.kind.Json.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Psbt) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 35;
      wireObj.kind.Psbt.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_PsbtParse) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 36;
      wireObj.kind.PsbtParse.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_MissingCachedScripts) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      var pre_field1 = cst_encode_usize(apiObj.field1);
      wireObj.tag = 37;
      wireObj.kind.MissingCachedScripts.field0 = pre_field0;
      wireObj.kind.MissingCachedScripts.field1 = pre_field1;
      return;
    }
    if (apiObj is BdkError_Electrum) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 38;
      wireObj.kind.Electrum.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Esplora) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 39;
      wireObj.kind.Esplora.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Sled) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 40;
      wireObj.kind.Sled.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Rpc) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 41;
      wireObj.kind.Rpc.field0 = pre_field0;
      return;
    }
    if (apiObj is BdkError_Rusqlite) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 42;
      wireObj.kind.Rusqlite.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_address_base(
      AddressBase apiObj, ffi.Pointer<wire_cst_address_base> wireObj) {
    cst_api_fill_to_wire_address_base(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_address_error(
      AddressError apiObj, ffi.Pointer<wire_cst_address_error> wireObj) {
    cst_api_fill_to_wire_address_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_consensus_error(
      ConsensusError apiObj, ffi.Pointer<wire_cst_consensus_error> wireObj) {
    cst_api_fill_to_wire_consensus_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_database_config(
      DatabaseConfig apiObj, ffi.Pointer<wire_cst_database_config> wireObj) {
    cst_api_fill_to_wire_database_config(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_derivation_path_base(
      DerivationPathBase apiObj,
      ffi.Pointer<wire_cst_derivation_path_base> wireObj) {
    cst_api_fill_to_wire_derivation_path_base(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_descriptor_base(
      DescriptorBase apiObj, ffi.Pointer<wire_cst_descriptor_base> wireObj) {
    cst_api_fill_to_wire_descriptor_base(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_descriptor_error(
      DescriptorError apiObj, ffi.Pointer<wire_cst_descriptor_error> wireObj) {
    cst_api_fill_to_wire_descriptor_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_descriptor_public_key_base(
      DescriptorPublicKeyBase apiObj,
      ffi.Pointer<wire_cst_descriptor_public_key_base> wireObj) {
    cst_api_fill_to_wire_descriptor_public_key_base(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_descriptor_secret_key_base(
      DescriptorSecretKeyBase apiObj,
      ffi.Pointer<wire_cst_descriptor_secret_key_base> wireObj) {
    cst_api_fill_to_wire_descriptor_secret_key_base(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_hex_error(
      HexError apiObj, ffi.Pointer<wire_cst_hex_error> wireObj) {
    cst_api_fill_to_wire_hex_error(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_mnemonic_base(
      MnemonicBase apiObj, ffi.Pointer<wire_cst_mnemonic_base> wireObj) {
    cst_api_fill_to_wire_mnemonic_base(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_out_point(
      OutPoint apiObj, ffi.Pointer<wire_cst_out_point> wireObj) {
    cst_api_fill_to_wire_out_point(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_script_buf_base(
      ScriptBufBase apiObj, ffi.Pointer<wire_cst_script_buf_base> wireObj) {
    cst_api_fill_to_wire_script_buf_base(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_sled_db_configuration(
      SledDbConfiguration apiObj,
      ffi.Pointer<wire_cst_sled_db_configuration> wireObj) {
    cst_api_fill_to_wire_sled_db_configuration(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_sqlite_db_configuration(
      SqliteDbConfiguration apiObj,
      ffi.Pointer<wire_cst_sqlite_db_configuration> wireObj) {
    cst_api_fill_to_wire_sqlite_db_configuration(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_box_autoadd_transaction_base(
      TransactionBase apiObj, ffi.Pointer<wire_cst_transaction_base> wireObj) {
    cst_api_fill_to_wire_transaction_base(apiObj, wireObj.ref);
  }

  @protected
  void cst_api_fill_to_wire_consensus_error(
      ConsensusError apiObj, wire_cst_consensus_error wireObj) {
    if (apiObj is ConsensusError_Io) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.Io.field0 = pre_field0;
      return;
    }
    if (apiObj is ConsensusError_OversizedVectorAllocation) {
      var pre_requested = cst_encode_usize(apiObj.requested);
      var pre_max = cst_encode_usize(apiObj.max);
      wireObj.tag = 1;
      wireObj.kind.OversizedVectorAllocation.requested = pre_requested;
      wireObj.kind.OversizedVectorAllocation.max = pre_max;
      return;
    }
    if (apiObj is ConsensusError_InvalidChecksum) {
      var pre_expected = cst_encode_u_8_array_4(apiObj.expected);
      var pre_actual = cst_encode_u_8_array_4(apiObj.actual);
      wireObj.tag = 2;
      wireObj.kind.InvalidChecksum.expected = pre_expected;
      wireObj.kind.InvalidChecksum.actual = pre_actual;
      return;
    }
    if (apiObj is ConsensusError_NonMinimalVarInt) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is ConsensusError_ParseFailed) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind.ParseFailed.field0 = pre_field0;
      return;
    }
    if (apiObj is ConsensusError_UnsupportedSegwitFlag) {
      var pre_field0 = cst_encode_u_8(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.UnsupportedSegwitFlag.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_database_config(
      DatabaseConfig apiObj, wire_cst_database_config wireObj) {
    if (apiObj is DatabaseConfig_Memory) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is DatabaseConfig_Sqlite) {
      var pre_config =
          cst_encode_box_autoadd_sqlite_db_configuration(apiObj.config);
      wireObj.tag = 1;
      wireObj.kind.Sqlite.config = pre_config;
      return;
    }
    if (apiObj is DatabaseConfig_Sled) {
      var pre_config =
          cst_encode_box_autoadd_sled_db_configuration(apiObj.config);
      wireObj.tag = 2;
      wireObj.kind.Sled.config = pre_config;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_derivation_path_base(
      DerivationPathBase apiObj, wire_cst_derivation_path_base wireObj) {
    wireObj.ptr =
        cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath(
            apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_descriptor_base(
      DescriptorBase apiObj, wire_cst_descriptor_base wireObj) {
    wireObj.extended_descriptor =
        cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor(
            apiObj.extendedDescriptor);
    wireObj.key_map =
        cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap(
            apiObj.keyMap);
  }

  @protected
  void cst_api_fill_to_wire_descriptor_error(
      DescriptorError apiObj, wire_cst_descriptor_error wireObj) {
    if (apiObj is DescriptorError_InvalidHdKeyPath) {
      wireObj.tag = 0;
      return;
    }
    if (apiObj is DescriptorError_InvalidDescriptorChecksum) {
      wireObj.tag = 1;
      return;
    }
    if (apiObj is DescriptorError_HardenedDerivationXpub) {
      wireObj.tag = 2;
      return;
    }
    if (apiObj is DescriptorError_MultiPath) {
      wireObj.tag = 3;
      return;
    }
    if (apiObj is DescriptorError_Key) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 4;
      wireObj.kind.Key.field0 = pre_field0;
      return;
    }
    if (apiObj is DescriptorError_Policy) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 5;
      wireObj.kind.Policy.field0 = pre_field0;
      return;
    }
    if (apiObj is DescriptorError_InvalidDescriptorCharacter) {
      var pre_field0 = cst_encode_u_8(apiObj.field0);
      wireObj.tag = 6;
      wireObj.kind.InvalidDescriptorCharacter.field0 = pre_field0;
      return;
    }
    if (apiObj is DescriptorError_Bip32) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 7;
      wireObj.kind.Bip32.field0 = pre_field0;
      return;
    }
    if (apiObj is DescriptorError_Base58) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 8;
      wireObj.kind.Base58.field0 = pre_field0;
      return;
    }
    if (apiObj is DescriptorError_Pk) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 9;
      wireObj.kind.Pk.field0 = pre_field0;
      return;
    }
    if (apiObj is DescriptorError_Miniscript) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 10;
      wireObj.kind.Miniscript.field0 = pre_field0;
      return;
    }
    if (apiObj is DescriptorError_Hex) {
      var pre_field0 = cst_encode_String(apiObj.field0);
      wireObj.tag = 11;
      wireObj.kind.Hex.field0 = pre_field0;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_descriptor_public_key_base(
      DescriptorPublicKeyBase apiObj,
      wire_cst_descriptor_public_key_base wireObj) {
    wireObj.ptr =
        cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey(
            apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_descriptor_secret_key_base(
      DescriptorSecretKeyBase apiObj,
      wire_cst_descriptor_secret_key_base wireObj) {
    wireObj.ptr =
        cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey(
            apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_hex_error(
      HexError apiObj, wire_cst_hex_error wireObj) {
    if (apiObj is HexError_InvalidChar) {
      var pre_field0 = cst_encode_u_8(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind.InvalidChar.field0 = pre_field0;
      return;
    }
    if (apiObj is HexError_OddLengthString) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind.OddLengthString.field0 = pre_field0;
      return;
    }
    if (apiObj is HexError_InvalidLength) {
      var pre_field0 = cst_encode_usize(apiObj.field0);
      var pre_field1 = cst_encode_usize(apiObj.field1);
      wireObj.tag = 2;
      wireObj.kind.InvalidLength.field0 = pre_field0;
      wireObj.kind.InvalidLength.field1 = pre_field1;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_mnemonic_base(
      MnemonicBase apiObj, wire_cst_mnemonic_base wireObj) {
    wireObj.ptr =
        cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic(
            apiObj.ptr);
  }

  @protected
  void cst_api_fill_to_wire_out_point(
      OutPoint apiObj, wire_cst_out_point wireObj) {
    wireObj.txid = cst_encode_String(apiObj.txid);
    wireObj.vout = cst_encode_u_32(apiObj.vout);
  }

  @protected
  void cst_api_fill_to_wire_payload(Payload apiObj, wire_cst_payload wireObj) {
    if (apiObj is Payload_PubkeyHash) {
      var pre_pubkey_hash = cst_encode_String(apiObj.pubkeyHash);
      wireObj.tag = 0;
      wireObj.kind.PubkeyHash.pubkey_hash = pre_pubkey_hash;
      return;
    }
    if (apiObj is Payload_ScriptHash) {
      var pre_script_hash = cst_encode_String(apiObj.scriptHash);
      wireObj.tag = 1;
      wireObj.kind.ScriptHash.script_hash = pre_script_hash;
      return;
    }
    if (apiObj is Payload_WitnessProgram) {
      var pre_version = cst_encode_witness_version(apiObj.version);
      var pre_program = cst_encode_list_prim_u_8_strict(apiObj.program);
      wireObj.tag = 2;
      wireObj.kind.WitnessProgram.version = pre_version;
      wireObj.kind.WitnessProgram.program = pre_program;
      return;
    }
  }

  @protected
  void cst_api_fill_to_wire_script_buf_base(
      ScriptBufBase apiObj, wire_cst_script_buf_base wireObj) {
    wireObj.bytes = cst_encode_list_prim_u_8_strict(apiObj.bytes);
  }

  @protected
  void cst_api_fill_to_wire_sled_db_configuration(
      SledDbConfiguration apiObj, wire_cst_sled_db_configuration wireObj) {
    wireObj.path = cst_encode_String(apiObj.path);
    wireObj.tree_name = cst_encode_String(apiObj.treeName);
  }

  @protected
  void cst_api_fill_to_wire_sqlite_db_configuration(
      SqliteDbConfiguration apiObj, wire_cst_sqlite_db_configuration wireObj) {
    wireObj.path = cst_encode_String(apiObj.path);
  }

  @protected
  void cst_api_fill_to_wire_transaction_base(
      TransactionBase apiObj, wire_cst_transaction_base wireObj) {
    wireObj.inner = cst_encode_String(apiObj.inner);
  }

  @protected
  void cst_api_fill_to_wire_tx_in(TxIn apiObj, wire_cst_tx_in wireObj) {
    cst_api_fill_to_wire_out_point(
        apiObj.previousOutput, wireObj.previous_output);
    cst_api_fill_to_wire_script_buf_base(apiObj.scriptSig, wireObj.script_sig);
    wireObj.sequence = cst_encode_u_32(apiObj.sequence);
    wireObj.witness = cst_encode_list_list_prim_u_8_strict(apiObj.witness);
  }

  @protected
  void cst_api_fill_to_wire_tx_out(TxOut apiObj, wire_cst_tx_out wireObj) {
    wireObj.value = cst_encode_u_64(apiObj.value);
    cst_api_fill_to_wire_script_buf_base(
        apiObj.scriptPubkey, wireObj.script_pubkey);
  }

  @protected
  void cst_api_fill_to_wire_wallet_base(
      WalletBase apiObj, wire_cst_wallet_base wireObj) {
    wireObj.ptr =
        cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase(
            apiObj.ptr);
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath(
      ArcBitcoinBip32DerivationPath raw);

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey(
      ArcKeysDescriptorPublicKey raw);

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey(
      ArcKeysDescriptorSecretKey raw);

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic(
      ArcKeysBip39Mnemonic raw);

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor(
      ExtendedDescriptor raw);

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase(
      MutexBdkWalletAnyDatabase raw);

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
      BdkBitcoinAddress raw);

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap(
      KeysKeyMap raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath(
      ArcBitcoinBip32DerivationPath raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey(
      ArcKeysDescriptorPublicKey raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey(
      ArcKeysDescriptorSecretKey raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic(
      ArcKeysBip39Mnemonic raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor(
      ExtendedDescriptor raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase(
      MutexBdkWalletAnyDatabase raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
      BdkBitcoinAddress raw);

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap(
      KeysKeyMap raw);

  @protected
  bool cst_encode_bool(bool raw);

  @protected
  double cst_encode_f_32(double raw);

  @protected
  int cst_encode_i_32(int raw);

  @protected
  int cst_encode_keychain_kind(KeychainKind raw);

  @protected
  int cst_encode_network(Network raw);

  @protected
  int cst_encode_u_32(int raw);

  @protected
  int cst_encode_u_8(int raw);

  @protected
  void cst_encode_unit(void raw);

  @protected
  int cst_encode_usize(int raw);

  @protected
  int cst_encode_variant(Variant raw);

  @protected
  int cst_encode_witness_version(WitnessVersion raw);

  @protected
  int cst_encode_word_count(WordCount raw);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath(
          ArcBitcoinBip32DerivationPath self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey(
          ArcKeysDescriptorPublicKey self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey(
          ArcKeysDescriptorSecretKey self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic(
          ArcKeysBip39Mnemonic self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor(
          ExtendedDescriptor self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase(
          MutexBdkWalletAnyDatabase self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          BdkBitcoinAddress self, SseSerializer serializer);

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap(
          KeysKeyMap self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath(
          ArcBitcoinBip32DerivationPath self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey(
          ArcKeysDescriptorPublicKey self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey(
          ArcKeysDescriptorSecretKey self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic(
          ArcKeysBip39Mnemonic self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor(
          ExtendedDescriptor self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase(
          MutexBdkWalletAnyDatabase self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          BdkBitcoinAddress self, SseSerializer serializer);

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap(
          KeysKeyMap self, SseSerializer serializer);

  @protected
  void sse_encode_String(String self, SseSerializer serializer);

  @protected
  void sse_encode_address_base(AddressBase self, SseSerializer serializer);

  @protected
  void sse_encode_address_error(AddressError self, SseSerializer serializer);

  @protected
  void sse_encode_bdk_error(BdkError self, SseSerializer serializer);

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_address_base(
      AddressBase self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_address_error(
      AddressError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_consensus_error(
      ConsensusError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_database_config(
      DatabaseConfig self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_derivation_path_base(
      DerivationPathBase self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_descriptor_base(
      DescriptorBase self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_descriptor_error(
      DescriptorError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_descriptor_public_key_base(
      DescriptorPublicKeyBase self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_descriptor_secret_key_base(
      DescriptorSecretKeyBase self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_hex_error(
      HexError self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_mnemonic_base(
      MnemonicBase self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_out_point(
      OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_script_buf_base(
      ScriptBufBase self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_sled_db_configuration(
      SledDbConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_sqlite_db_configuration(
      SqliteDbConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_box_autoadd_transaction_base(
      TransactionBase self, SseSerializer serializer);

  @protected
  void sse_encode_consensus_error(
      ConsensusError self, SseSerializer serializer);

  @protected
  void sse_encode_database_config(
      DatabaseConfig self, SseSerializer serializer);

  @protected
  void sse_encode_derivation_path_base(
      DerivationPathBase self, SseSerializer serializer);

  @protected
  void sse_encode_descriptor_base(
      DescriptorBase self, SseSerializer serializer);

  @protected
  void sse_encode_descriptor_error(
      DescriptorError self, SseSerializer serializer);

  @protected
  void sse_encode_descriptor_public_key_base(
      DescriptorPublicKeyBase self, SseSerializer serializer);

  @protected
  void sse_encode_descriptor_secret_key_base(
      DescriptorSecretKeyBase self, SseSerializer serializer);

  @protected
  void sse_encode_f_32(double self, SseSerializer serializer);

  @protected
  void sse_encode_hex_error(HexError self, SseSerializer serializer);

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_keychain_kind(KeychainKind self, SseSerializer serializer);

  @protected
  void sse_encode_list_list_prim_u_8_strict(
      List<Uint8List> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_loose(List<int> self, SseSerializer serializer);

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer);

  @protected
  void sse_encode_list_tx_in(List<TxIn> self, SseSerializer serializer);

  @protected
  void sse_encode_list_tx_out(List<TxOut> self, SseSerializer serializer);

  @protected
  void sse_encode_mnemonic_base(MnemonicBase self, SseSerializer serializer);

  @protected
  void sse_encode_network(Network self, SseSerializer serializer);

  @protected
  void sse_encode_opt_String(String? self, SseSerializer serializer);

  @protected
  void sse_encode_opt_box_autoadd_descriptor_base(
      DescriptorBase? self, SseSerializer serializer);

  @protected
  void sse_encode_out_point(OutPoint self, SseSerializer serializer);

  @protected
  void sse_encode_payload(Payload self, SseSerializer serializer);

  @protected
  void sse_encode_script_buf_base(ScriptBufBase self, SseSerializer serializer);

  @protected
  void sse_encode_sled_db_configuration(
      SledDbConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_sqlite_db_configuration(
      SqliteDbConfiguration self, SseSerializer serializer);

  @protected
  void sse_encode_transaction_base(
      TransactionBase self, SseSerializer serializer);

  @protected
  void sse_encode_tx_in(TxIn self, SseSerializer serializer);

  @protected
  void sse_encode_tx_out(TxOut self, SseSerializer serializer);

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer);

  @protected
  void sse_encode_u_8_array_4(U8Array4 self, SseSerializer serializer);

  @protected
  void sse_encode_unit(void self, SseSerializer serializer);

  @protected
  void sse_encode_usize(int self, SseSerializer serializer);

  @protected
  void sse_encode_variant(Variant self, SseSerializer serializer);

  @protected
  void sse_encode_wallet_base(WalletBase self, SseSerializer serializer);

  @protected
  void sse_encode_witness_version(
      WitnessVersion self, SseSerializer serializer);

  @protected
  void sse_encode_word_count(WordCount self, SseSerializer serializer);
}

// Section: wire_class

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class BdkCoreWire implements BaseWire {
  factory BdkCoreWire.fromExternalLibrary(ExternalLibrary lib) =>
      BdkCoreWire(lib.ffiDynamicLibrary);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BdkCoreWire(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BdkCoreWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();

  void wire_DescriptorBase_as_string(
    int port_,
    ffi.Pointer<wire_cst_descriptor_base> that,
  ) {
    return _wire_DescriptorBase_as_string(
      port_,
      that,
    );
  }

  late final _wire_DescriptorBase_as_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_descriptor_base>)>>(
      'frbgen_bdk_flutter_wire_DescriptorBase_as_string');
  late final _wire_DescriptorBase_as_string = _wire_DescriptorBase_as_stringPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_descriptor_base>)>();

  void wire_DescriptorBase_as_string_private(
    int port_,
    ffi.Pointer<wire_cst_descriptor_base> that,
  ) {
    return _wire_DescriptorBase_as_string_private(
      port_,
      that,
    );
  }

  late final _wire_DescriptorBase_as_string_privatePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_descriptor_base>)>>(
      'frbgen_bdk_flutter_wire_DescriptorBase_as_string_private');
  late final _wire_DescriptorBase_as_string_private =
      _wire_DescriptorBase_as_string_privatePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_descriptor_base>)>();

  void wire_DescriptorBase_max_satisfaction_weight(
    int port_,
    ffi.Pointer<wire_cst_descriptor_base> that,
  ) {
    return _wire_DescriptorBase_max_satisfaction_weight(
      port_,
      that,
    );
  }

  late final _wire_DescriptorBase_max_satisfaction_weightPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_descriptor_base>)>>(
      'frbgen_bdk_flutter_wire_DescriptorBase_max_satisfaction_weight');
  late final _wire_DescriptorBase_max_satisfaction_weight =
      _wire_DescriptorBase_max_satisfaction_weightPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_descriptor_base>)>();

  void wire_DescriptorBase_new(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> descriptor,
    int network,
  ) {
    return _wire_DescriptorBase_new(
      port_,
      descriptor,
      network,
    );
  }

  late final _wire_DescriptorBase_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Int32)>>('frbgen_bdk_flutter_wire_DescriptorBase_new');
  late final _wire_DescriptorBase_new = _wire_DescriptorBase_newPtr.asFunction<
      void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void wire_DescriptorBase_new_bip44(
    int port_,
    ffi.Pointer<wire_cst_descriptor_secret_key_base> secret_key,
    int keychain_kind,
    int network,
  ) {
    return _wire_DescriptorBase_new_bip44(
      port_,
      secret_key,
      keychain_kind,
      network,
    );
  }

  late final _wire_DescriptorBase_new_bip44Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_descriptor_secret_key_base>,
              ffi.Int32,
              ffi.Int32)>>('frbgen_bdk_flutter_wire_DescriptorBase_new_bip44');
  late final _wire_DescriptorBase_new_bip44 =
      _wire_DescriptorBase_new_bip44Ptr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_descriptor_secret_key_base>,
              int, int)>();

  void wire_DescriptorBase_new_bip44_public(
    int port_,
    ffi.Pointer<wire_cst_descriptor_public_key_base> public_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> fingerprint,
    int keychain_kind,
    int network,
  ) {
    return _wire_DescriptorBase_new_bip44_public(
      port_,
      public_key,
      fingerprint,
      keychain_kind,
      network,
    );
  }

  late final _wire_DescriptorBase_new_bip44_publicPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_descriptor_public_key_base>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Int32,
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_wire_DescriptorBase_new_bip44_public');
  late final _wire_DescriptorBase_new_bip44_public =
      _wire_DescriptorBase_new_bip44_publicPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_descriptor_public_key_base>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int, int)>();

  void wire_DescriptorBase_new_bip49(
    int port_,
    ffi.Pointer<wire_cst_descriptor_secret_key_base> secret_key,
    int keychain_kind,
    int network,
  ) {
    return _wire_DescriptorBase_new_bip49(
      port_,
      secret_key,
      keychain_kind,
      network,
    );
  }

  late final _wire_DescriptorBase_new_bip49Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_descriptor_secret_key_base>,
              ffi.Int32,
              ffi.Int32)>>('frbgen_bdk_flutter_wire_DescriptorBase_new_bip49');
  late final _wire_DescriptorBase_new_bip49 =
      _wire_DescriptorBase_new_bip49Ptr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_descriptor_secret_key_base>,
              int, int)>();

  void wire_DescriptorBase_new_bip49_public(
    int port_,
    ffi.Pointer<wire_cst_descriptor_public_key_base> public_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> fingerprint,
    int keychain_kind,
    int network,
  ) {
    return _wire_DescriptorBase_new_bip49_public(
      port_,
      public_key,
      fingerprint,
      keychain_kind,
      network,
    );
  }

  late final _wire_DescriptorBase_new_bip49_publicPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_descriptor_public_key_base>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Int32,
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_wire_DescriptorBase_new_bip49_public');
  late final _wire_DescriptorBase_new_bip49_public =
      _wire_DescriptorBase_new_bip49_publicPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_descriptor_public_key_base>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int, int)>();

  void wire_DescriptorBase_new_bip84(
    int port_,
    ffi.Pointer<wire_cst_descriptor_secret_key_base> secret_key,
    int keychain_kind,
    int network,
  ) {
    return _wire_DescriptorBase_new_bip84(
      port_,
      secret_key,
      keychain_kind,
      network,
    );
  }

  late final _wire_DescriptorBase_new_bip84Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_descriptor_secret_key_base>,
              ffi.Int32,
              ffi.Int32)>>('frbgen_bdk_flutter_wire_DescriptorBase_new_bip84');
  late final _wire_DescriptorBase_new_bip84 =
      _wire_DescriptorBase_new_bip84Ptr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_descriptor_secret_key_base>,
              int, int)>();

  void wire_DescriptorBase_new_bip84_public(
    int port_,
    ffi.Pointer<wire_cst_descriptor_public_key_base> public_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> fingerprint,
    int keychain_kind,
    int network,
  ) {
    return _wire_DescriptorBase_new_bip84_public(
      port_,
      public_key,
      fingerprint,
      keychain_kind,
      network,
    );
  }

  late final _wire_DescriptorBase_new_bip84_publicPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_descriptor_public_key_base>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Int32,
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_wire_DescriptorBase_new_bip84_public');
  late final _wire_DescriptorBase_new_bip84_public =
      _wire_DescriptorBase_new_bip84_publicPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_descriptor_public_key_base>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int, int)>();

  void wire_DescriptorBase_new_bip86(
    int port_,
    ffi.Pointer<wire_cst_descriptor_secret_key_base> secret_key,
    int keychain_kind,
    int network,
  ) {
    return _wire_DescriptorBase_new_bip86(
      port_,
      secret_key,
      keychain_kind,
      network,
    );
  }

  late final _wire_DescriptorBase_new_bip86Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_descriptor_secret_key_base>,
              ffi.Int32,
              ffi.Int32)>>('frbgen_bdk_flutter_wire_DescriptorBase_new_bip86');
  late final _wire_DescriptorBase_new_bip86 =
      _wire_DescriptorBase_new_bip86Ptr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_descriptor_secret_key_base>,
              int, int)>();

  void wire_DescriptorBase_new_bip86_public(
    int port_,
    ffi.Pointer<wire_cst_descriptor_public_key_base> public_key,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> fingerprint,
    int keychain_kind,
    int network,
  ) {
    return _wire_DescriptorBase_new_bip86_public(
      port_,
      public_key,
      fingerprint,
      keychain_kind,
      network,
    );
  }

  late final _wire_DescriptorBase_new_bip86_publicPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_descriptor_public_key_base>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>,
                  ffi.Int32,
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_wire_DescriptorBase_new_bip86_public');
  late final _wire_DescriptorBase_new_bip86_public =
      _wire_DescriptorBase_new_bip86_publicPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_descriptor_public_key_base>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>, int, int)>();

  void wire_DerivationPathBase_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> path,
  ) {
    return _wire_DerivationPathBase_from_string(
      port_,
      path,
    );
  }

  late final _wire_DerivationPathBase_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire_DerivationPathBase_from_string');
  late final _wire_DerivationPathBase_from_string =
      _wire_DerivationPathBase_from_stringPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_DescriptorPublicKeyBase_as_string(
    int port_,
    ffi.Pointer<wire_cst_descriptor_public_key_base> that,
  ) {
    return _wire_DescriptorPublicKeyBase_as_string(
      port_,
      that,
    );
  }

  late final _wire_DescriptorPublicKeyBase_as_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64,
                  ffi.Pointer<wire_cst_descriptor_public_key_base>)>>(
      'frbgen_bdk_flutter_wire_DescriptorPublicKeyBase_as_string');
  late final _wire_DescriptorPublicKeyBase_as_string =
      _wire_DescriptorPublicKeyBase_as_stringPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_cst_descriptor_public_key_base>)>();

  void wire_DescriptorPublicKeyBase_derive(
    int port_,
    ffi.Pointer<wire_cst_descriptor_public_key_base> that,
    ffi.Pointer<wire_cst_derivation_path_base> path,
  ) {
    return _wire_DescriptorPublicKeyBase_derive(
      port_,
      that,
      path,
    );
  }

  late final _wire_DescriptorPublicKeyBase_derivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_descriptor_public_key_base>,
                  ffi.Pointer<wire_cst_derivation_path_base>)>>(
      'frbgen_bdk_flutter_wire_DescriptorPublicKeyBase_derive');
  late final _wire_DescriptorPublicKeyBase_derive =
      _wire_DescriptorPublicKeyBase_derivePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_descriptor_public_key_base>,
              ffi.Pointer<wire_cst_derivation_path_base>)>();

  void wire_DescriptorPublicKeyBase_extend(
    int port_,
    ffi.Pointer<wire_cst_descriptor_public_key_base> that,
    ffi.Pointer<wire_cst_derivation_path_base> path,
  ) {
    return _wire_DescriptorPublicKeyBase_extend(
      port_,
      that,
      path,
    );
  }

  late final _wire_DescriptorPublicKeyBase_extendPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_descriptor_public_key_base>,
                  ffi.Pointer<wire_cst_derivation_path_base>)>>(
      'frbgen_bdk_flutter_wire_DescriptorPublicKeyBase_extend');
  late final _wire_DescriptorPublicKeyBase_extend =
      _wire_DescriptorPublicKeyBase_extendPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_descriptor_public_key_base>,
              ffi.Pointer<wire_cst_derivation_path_base>)>();

  void wire_DescriptorPublicKeyBase_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> public_key,
  ) {
    return _wire_DescriptorPublicKeyBase_from_string(
      port_,
      public_key,
    );
  }

  late final _wire_DescriptorPublicKeyBase_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire_DescriptorPublicKeyBase_from_string');
  late final _wire_DescriptorPublicKeyBase_from_string =
      _wire_DescriptorPublicKeyBase_from_stringPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_DescriptorSecretKeyBase_as_public(
    int port_,
    ffi.Pointer<wire_cst_descriptor_secret_key_base> that,
  ) {
    return _wire_DescriptorSecretKeyBase_as_public(
      port_,
      that,
    );
  }

  late final _wire_DescriptorSecretKeyBase_as_publicPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64,
                  ffi.Pointer<wire_cst_descriptor_secret_key_base>)>>(
      'frbgen_bdk_flutter_wire_DescriptorSecretKeyBase_as_public');
  late final _wire_DescriptorSecretKeyBase_as_public =
      _wire_DescriptorSecretKeyBase_as_publicPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_cst_descriptor_secret_key_base>)>();

  void wire_DescriptorSecretKeyBase_as_string(
    int port_,
    ffi.Pointer<wire_cst_descriptor_secret_key_base> that,
  ) {
    return _wire_DescriptorSecretKeyBase_as_string(
      port_,
      that,
    );
  }

  late final _wire_DescriptorSecretKeyBase_as_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64,
                  ffi.Pointer<wire_cst_descriptor_secret_key_base>)>>(
      'frbgen_bdk_flutter_wire_DescriptorSecretKeyBase_as_string');
  late final _wire_DescriptorSecretKeyBase_as_string =
      _wire_DescriptorSecretKeyBase_as_stringPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_cst_descriptor_secret_key_base>)>();

  void wire_DescriptorSecretKeyBase_create(
    int port_,
    int network,
    ffi.Pointer<wire_cst_mnemonic_base> mnemonic,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> password,
  ) {
    return _wire_DescriptorSecretKeyBase_create(
      port_,
      network,
      mnemonic,
      password,
    );
  }

  late final _wire_DescriptorSecretKeyBase_createPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_mnemonic_base>,
                  ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire_DescriptorSecretKeyBase_create');
  late final _wire_DescriptorSecretKeyBase_create =
      _wire_DescriptorSecretKeyBase_createPtr.asFunction<
          void Function(int, int, ffi.Pointer<wire_cst_mnemonic_base>,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_DescriptorSecretKeyBase_derive(
    int port_,
    ffi.Pointer<wire_cst_descriptor_secret_key_base> that,
    ffi.Pointer<wire_cst_derivation_path_base> path,
  ) {
    return _wire_DescriptorSecretKeyBase_derive(
      port_,
      that,
      path,
    );
  }

  late final _wire_DescriptorSecretKeyBase_derivePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_descriptor_secret_key_base>,
                  ffi.Pointer<wire_cst_derivation_path_base>)>>(
      'frbgen_bdk_flutter_wire_DescriptorSecretKeyBase_derive');
  late final _wire_DescriptorSecretKeyBase_derive =
      _wire_DescriptorSecretKeyBase_derivePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_descriptor_secret_key_base>,
              ffi.Pointer<wire_cst_derivation_path_base>)>();

  void wire_DescriptorSecretKeyBase_extend(
    int port_,
    ffi.Pointer<wire_cst_descriptor_secret_key_base> that,
    ffi.Pointer<wire_cst_derivation_path_base> path,
  ) {
    return _wire_DescriptorSecretKeyBase_extend(
      port_,
      that,
      path,
    );
  }

  late final _wire_DescriptorSecretKeyBase_extendPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_descriptor_secret_key_base>,
                  ffi.Pointer<wire_cst_derivation_path_base>)>>(
      'frbgen_bdk_flutter_wire_DescriptorSecretKeyBase_extend');
  late final _wire_DescriptorSecretKeyBase_extend =
      _wire_DescriptorSecretKeyBase_extendPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_descriptor_secret_key_base>,
              ffi.Pointer<wire_cst_derivation_path_base>)>();

  void wire_DescriptorSecretKeyBase_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> key_str,
  ) {
    return _wire_DescriptorSecretKeyBase_from_string(
      port_,
      key_str,
    );
  }

  late final _wire_DescriptorSecretKeyBase_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire_DescriptorSecretKeyBase_from_string');
  late final _wire_DescriptorSecretKeyBase_from_string =
      _wire_DescriptorSecretKeyBase_from_stringPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_DescriptorSecretKeyBase_secret_bytes(
    int port_,
    ffi.Pointer<wire_cst_descriptor_secret_key_base> that,
  ) {
    return _wire_DescriptorSecretKeyBase_secret_bytes(
      port_,
      that,
    );
  }

  late final _wire_DescriptorSecretKeyBase_secret_bytesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Int64,
                  ffi.Pointer<wire_cst_descriptor_secret_key_base>)>>(
      'frbgen_bdk_flutter_wire_DescriptorSecretKeyBase_secret_bytes');
  late final _wire_DescriptorSecretKeyBase_secret_bytes =
      _wire_DescriptorSecretKeyBase_secret_bytesPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_cst_descriptor_secret_key_base>)>();

  void wire_MnemonicBase_as_string(
    int port_,
    ffi.Pointer<wire_cst_mnemonic_base> that,
  ) {
    return _wire_MnemonicBase_as_string(
      port_,
      that,
    );
  }

  late final _wire_MnemonicBase_as_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_mnemonic_base>)>>(
      'frbgen_bdk_flutter_wire_MnemonicBase_as_string');
  late final _wire_MnemonicBase_as_string = _wire_MnemonicBase_as_stringPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_mnemonic_base>)>();

  void wire_MnemonicBase_from_entropy(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> entropy,
  ) {
    return _wire_MnemonicBase_from_entropy(
      port_,
      entropy,
    );
  }

  late final _wire_MnemonicBase_from_entropyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>>(
      'frbgen_bdk_flutter_wire_MnemonicBase_from_entropy');
  late final _wire_MnemonicBase_from_entropy =
      _wire_MnemonicBase_from_entropyPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>();

  void wire_MnemonicBase_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> mnemonic,
  ) {
    return _wire_MnemonicBase_from_string(
      port_,
      mnemonic,
    );
  }

  late final _wire_MnemonicBase_from_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire_MnemonicBase_from_string');
  late final _wire_MnemonicBase_from_string =
      _wire_MnemonicBase_from_stringPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_MnemonicBase_new(
    int port_,
    int word_count,
  ) {
    return _wire_MnemonicBase_new(
      port_,
      word_count,
    );
  }

  late final _wire_MnemonicBase_newPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.Int32)>>(
          'frbgen_bdk_flutter_wire_MnemonicBase_new');
  late final _wire_MnemonicBase_new =
      _wire_MnemonicBase_newPtr.asFunction<void Function(int, int)>();

  void wire_AddressBase_as_string(
    int port_,
    ffi.Pointer<wire_cst_address_base> that,
  ) {
    return _wire_AddressBase_as_string(
      port_,
      that,
    );
  }

  late final _wire_AddressBase_as_stringPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_address_base>)>>(
      'frbgen_bdk_flutter_wire_AddressBase_as_string');
  late final _wire_AddressBase_as_string = _wire_AddressBase_as_stringPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_address_base>)>();

  void wire_AddressBase_from_script(
    int port_,
    ffi.Pointer<wire_cst_script_buf_base> script,
    int network,
  ) {
    return _wire_AddressBase_from_script(
      port_,
      script,
      network,
    );
  }

  late final _wire_AddressBase_from_scriptPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64, ffi.Pointer<wire_cst_script_buf_base>,
              ffi.Int32)>>('frbgen_bdk_flutter_wire_AddressBase_from_script');
  late final _wire_AddressBase_from_script =
      _wire_AddressBase_from_scriptPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_script_buf_base>, int)>();

  void wire_AddressBase_from_string(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> address,
    int network,
  ) {
    return _wire_AddressBase_from_string(
      port_,
      address,
      network,
    );
  }

  late final _wire_AddressBase_from_stringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Int64,
              ffi.Pointer<wire_cst_list_prim_u_8_strict>,
              ffi.Int32)>>('frbgen_bdk_flutter_wire_AddressBase_from_string');
  late final _wire_AddressBase_from_string =
      _wire_AddressBase_from_stringPtr.asFunction<
          void Function(
              int, ffi.Pointer<wire_cst_list_prim_u_8_strict>, int)>();

  void wire_AddressBase_is_valid_for_network(
    int port_,
    ffi.Pointer<wire_cst_address_base> that,
    int network,
  ) {
    return _wire_AddressBase_is_valid_for_network(
      port_,
      that,
      network,
    );
  }

  late final _wire_AddressBase_is_valid_for_networkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_address_base>, ffi.Int32)>>(
      'frbgen_bdk_flutter_wire_AddressBase_is_valid_for_network');
  late final _wire_AddressBase_is_valid_for_network =
      _wire_AddressBase_is_valid_for_networkPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_address_base>, int)>();

  void wire_AddressBase_network(
    int port_,
    ffi.Pointer<wire_cst_address_base> that,
  ) {
    return _wire_AddressBase_network(
      port_,
      that,
    );
  }

  late final _wire_AddressBase_networkPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_address_base>)>>(
      'frbgen_bdk_flutter_wire_AddressBase_network');
  late final _wire_AddressBase_network = _wire_AddressBase_networkPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_address_base>)>();

  void wire_AddressBase_payload(
    int port_,
    ffi.Pointer<wire_cst_address_base> that,
  ) {
    return _wire_AddressBase_payload(
      port_,
      that,
    );
  }

  late final _wire_AddressBase_payloadPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_address_base>)>>(
      'frbgen_bdk_flutter_wire_AddressBase_payload');
  late final _wire_AddressBase_payload = _wire_AddressBase_payloadPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_address_base>)>();

  void wire_AddressBase_script_pubkey(
    int port_,
    ffi.Pointer<wire_cst_address_base> that,
  ) {
    return _wire_AddressBase_script_pubkey(
      port_,
      that,
    );
  }

  late final _wire_AddressBase_script_pubkeyPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_address_base>)>>(
      'frbgen_bdk_flutter_wire_AddressBase_script_pubkey');
  late final _wire_AddressBase_script_pubkey =
      _wire_AddressBase_script_pubkeyPtr
          .asFunction<void Function(int, ffi.Pointer<wire_cst_address_base>)>();

  void wire_AddressBase_to_qr_uri(
    int port_,
    ffi.Pointer<wire_cst_address_base> that,
  ) {
    return _wire_AddressBase_to_qr_uri(
      port_,
      that,
    );
  }

  late final _wire_AddressBase_to_qr_uriPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_address_base>)>>(
      'frbgen_bdk_flutter_wire_AddressBase_to_qr_uri');
  late final _wire_AddressBase_to_qr_uri = _wire_AddressBase_to_qr_uriPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_address_base>)>();

  void wire_ScriptBufBase_empty(
    int port_,
  ) {
    return _wire_ScriptBufBase_empty(
      port_,
    );
  }

  late final _wire_ScriptBufBase_emptyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>(
          'frbgen_bdk_flutter_wire_ScriptBufBase_empty');
  late final _wire_ScriptBufBase_empty =
      _wire_ScriptBufBase_emptyPtr.asFunction<void Function(int)>();

  void wire_ScriptBufBase_from_hex(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_strict> s,
  ) {
    return _wire_ScriptBufBase_from_hex(
      port_,
      s,
    );
  }

  late final _wire_ScriptBufBase_from_hexPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>>(
      'frbgen_bdk_flutter_wire_ScriptBufBase_from_hex');
  late final _wire_ScriptBufBase_from_hex =
      _wire_ScriptBufBase_from_hexPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_strict>)>();

  void wire_ScriptBufBase_with_capacity(
    int port_,
    int capacity,
  ) {
    return _wire_ScriptBufBase_with_capacity(
      port_,
      capacity,
    );
  }

  late final _wire_ScriptBufBase_with_capacityPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr)>>(
          'frbgen_bdk_flutter_wire_ScriptBufBase_with_capacity');
  late final _wire_ScriptBufBase_with_capacity =
      _wire_ScriptBufBase_with_capacityPtr
          .asFunction<void Function(int, int)>();

  void wire_TransactionBase_input(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_input(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_inputPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_input');
  late final _wire_TransactionBase_input = _wire_TransactionBase_inputPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_is_coin_base(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_is_coin_base(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_is_coin_basePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_is_coin_base');
  late final _wire_TransactionBase_is_coin_base =
      _wire_TransactionBase_is_coin_basePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_is_explicitly_rbf(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_is_explicitly_rbf(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_is_explicitly_rbfPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_is_explicitly_rbf');
  late final _wire_TransactionBase_is_explicitly_rbf =
      _wire_TransactionBase_is_explicitly_rbfPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_is_lock_time_enabled(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_is_lock_time_enabled(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_is_lock_time_enabledPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_is_lock_time_enabled');
  late final _wire_TransactionBase_is_lock_time_enabled =
      _wire_TransactionBase_is_lock_time_enabledPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_lock_time(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_lock_time(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_lock_timePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_lock_time');
  late final _wire_TransactionBase_lock_time =
      _wire_TransactionBase_lock_timePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_new(
    int port_,
    ffi.Pointer<wire_cst_list_prim_u_8_loose> transaction_bytes,
  ) {
    return _wire_TransactionBase_new(
      port_,
      transaction_bytes,
    );
  }

  late final _wire_TransactionBase_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_new');
  late final _wire_TransactionBase_new =
      _wire_TransactionBase_newPtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_list_prim_u_8_loose>)>();

  void wire_TransactionBase_output(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_output(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_outputPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_output');
  late final _wire_TransactionBase_output = _wire_TransactionBase_outputPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_serialize(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_serialize(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_serializePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_serialize');
  late final _wire_TransactionBase_serialize =
      _wire_TransactionBase_serializePtr.asFunction<
          void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_size(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_size(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_sizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_size');
  late final _wire_TransactionBase_size = _wire_TransactionBase_sizePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_txid(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_txid(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_txidPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_txid');
  late final _wire_TransactionBase_txid = _wire_TransactionBase_txidPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_version(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_version(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_versionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_version');
  late final _wire_TransactionBase_version = _wire_TransactionBase_versionPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_vsize(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_vsize(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_vsizePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_vsize');
  late final _wire_TransactionBase_vsize = _wire_TransactionBase_vsizePtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_TransactionBase_weight(
    int port_,
    ffi.Pointer<wire_cst_transaction_base> that,
  ) {
    return _wire_TransactionBase_weight(
      port_,
      that,
    );
  }

  late final _wire_TransactionBase_weightPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64, ffi.Pointer<wire_cst_transaction_base>)>>(
      'frbgen_bdk_flutter_wire_TransactionBase_weight');
  late final _wire_TransactionBase_weight = _wire_TransactionBase_weightPtr
      .asFunction<void Function(int, ffi.Pointer<wire_cst_transaction_base>)>();

  void wire_WalletBase_new(
    int port_,
    ffi.Pointer<wire_cst_descriptor_base> descriptor,
    ffi.Pointer<wire_cst_descriptor_base> change_descriptor,
    int network,
    ffi.Pointer<wire_cst_database_config> database_config,
  ) {
    return _wire_WalletBase_new(
      port_,
      descriptor,
      change_descriptor,
      network,
      database_config,
    );
  }

  late final _wire_WalletBase_newPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  ffi.Int64,
                  ffi.Pointer<wire_cst_descriptor_base>,
                  ffi.Pointer<wire_cst_descriptor_base>,
                  ffi.Int32,
                  ffi.Pointer<wire_cst_database_config>)>>(
      'frbgen_bdk_flutter_wire_WalletBase_new');
  late final _wire_WalletBase_new = _wire_WalletBase_newPtr.asFunction<
      void Function(
          int,
          ffi.Pointer<wire_cst_descriptor_base>,
          ffi.Pointer<wire_cst_descriptor_base>,
          int,
          ffi.Pointer<wire_cst_database_config>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPathPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPath =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArcbitcoinbip32DerivationPathPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKeyPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKey =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorPublicKeyPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKeyPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKey =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysDescriptorSecretKeyPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39MnemonicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39MnemonicPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39MnemonicPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39Mnemonic =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockArckeysbip39MnemonicPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptorPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptor =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockExtendedDescriptorPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabasePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabasePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabase =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockMutexbdkWalletAnyDatabasePtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddressPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddressPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddressPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap(
      ptr,
    );
  }

  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap');
  late final _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap =
      _rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMapPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void
      rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap(
      ptr,
    );
  }

  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'frbgen_bdk_flutter_rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap');
  late final _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMap =
      _rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockkeysKeyMapPtr
          .asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<wire_cst_address_base> cst_new_box_autoadd_address_base() {
    return _cst_new_box_autoadd_address_base();
  }

  late final _cst_new_box_autoadd_address_basePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_address_base> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_address_base');
  late final _cst_new_box_autoadd_address_base =
      _cst_new_box_autoadd_address_basePtr
          .asFunction<ffi.Pointer<wire_cst_address_base> Function()>();

  ffi.Pointer<wire_cst_address_error> cst_new_box_autoadd_address_error() {
    return _cst_new_box_autoadd_address_error();
  }

  late final _cst_new_box_autoadd_address_errorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_address_error> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_address_error');
  late final _cst_new_box_autoadd_address_error =
      _cst_new_box_autoadd_address_errorPtr
          .asFunction<ffi.Pointer<wire_cst_address_error> Function()>();

  ffi.Pointer<wire_cst_consensus_error> cst_new_box_autoadd_consensus_error() {
    return _cst_new_box_autoadd_consensus_error();
  }

  late final _cst_new_box_autoadd_consensus_errorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_consensus_error> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_consensus_error');
  late final _cst_new_box_autoadd_consensus_error =
      _cst_new_box_autoadd_consensus_errorPtr
          .asFunction<ffi.Pointer<wire_cst_consensus_error> Function()>();

  ffi.Pointer<wire_cst_database_config> cst_new_box_autoadd_database_config() {
    return _cst_new_box_autoadd_database_config();
  }

  late final _cst_new_box_autoadd_database_configPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_database_config> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_database_config');
  late final _cst_new_box_autoadd_database_config =
      _cst_new_box_autoadd_database_configPtr
          .asFunction<ffi.Pointer<wire_cst_database_config> Function()>();

  ffi.Pointer<wire_cst_derivation_path_base>
      cst_new_box_autoadd_derivation_path_base() {
    return _cst_new_box_autoadd_derivation_path_base();
  }

  late final _cst_new_box_autoadd_derivation_path_basePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_derivation_path_base> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_derivation_path_base');
  late final _cst_new_box_autoadd_derivation_path_base =
      _cst_new_box_autoadd_derivation_path_basePtr
          .asFunction<ffi.Pointer<wire_cst_derivation_path_base> Function()>();

  ffi.Pointer<wire_cst_descriptor_base> cst_new_box_autoadd_descriptor_base() {
    return _cst_new_box_autoadd_descriptor_base();
  }

  late final _cst_new_box_autoadd_descriptor_basePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_descriptor_base> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_descriptor_base');
  late final _cst_new_box_autoadd_descriptor_base =
      _cst_new_box_autoadd_descriptor_basePtr
          .asFunction<ffi.Pointer<wire_cst_descriptor_base> Function()>();

  ffi.Pointer<wire_cst_descriptor_error>
      cst_new_box_autoadd_descriptor_error() {
    return _cst_new_box_autoadd_descriptor_error();
  }

  late final _cst_new_box_autoadd_descriptor_errorPtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_descriptor_error> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_descriptor_error');
  late final _cst_new_box_autoadd_descriptor_error =
      _cst_new_box_autoadd_descriptor_errorPtr
          .asFunction<ffi.Pointer<wire_cst_descriptor_error> Function()>();

  ffi.Pointer<wire_cst_descriptor_public_key_base>
      cst_new_box_autoadd_descriptor_public_key_base() {
    return _cst_new_box_autoadd_descriptor_public_key_base();
  }

  late final _cst_new_box_autoadd_descriptor_public_key_basePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_descriptor_public_key_base> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_descriptor_public_key_base');
  late final _cst_new_box_autoadd_descriptor_public_key_base =
      _cst_new_box_autoadd_descriptor_public_key_basePtr.asFunction<
          ffi.Pointer<wire_cst_descriptor_public_key_base> Function()>();

  ffi.Pointer<wire_cst_descriptor_secret_key_base>
      cst_new_box_autoadd_descriptor_secret_key_base() {
    return _cst_new_box_autoadd_descriptor_secret_key_base();
  }

  late final _cst_new_box_autoadd_descriptor_secret_key_basePtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_descriptor_secret_key_base> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_descriptor_secret_key_base');
  late final _cst_new_box_autoadd_descriptor_secret_key_base =
      _cst_new_box_autoadd_descriptor_secret_key_basePtr.asFunction<
          ffi.Pointer<wire_cst_descriptor_secret_key_base> Function()>();

  ffi.Pointer<wire_cst_hex_error> cst_new_box_autoadd_hex_error() {
    return _cst_new_box_autoadd_hex_error();
  }

  late final _cst_new_box_autoadd_hex_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_hex_error> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_hex_error');
  late final _cst_new_box_autoadd_hex_error = _cst_new_box_autoadd_hex_errorPtr
      .asFunction<ffi.Pointer<wire_cst_hex_error> Function()>();

  ffi.Pointer<wire_cst_mnemonic_base> cst_new_box_autoadd_mnemonic_base() {
    return _cst_new_box_autoadd_mnemonic_base();
  }

  late final _cst_new_box_autoadd_mnemonic_basePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_mnemonic_base> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_mnemonic_base');
  late final _cst_new_box_autoadd_mnemonic_base =
      _cst_new_box_autoadd_mnemonic_basePtr
          .asFunction<ffi.Pointer<wire_cst_mnemonic_base> Function()>();

  ffi.Pointer<wire_cst_out_point> cst_new_box_autoadd_out_point() {
    return _cst_new_box_autoadd_out_point();
  }

  late final _cst_new_box_autoadd_out_pointPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<wire_cst_out_point> Function()>>(
          'frbgen_bdk_flutter_cst_new_box_autoadd_out_point');
  late final _cst_new_box_autoadd_out_point = _cst_new_box_autoadd_out_pointPtr
      .asFunction<ffi.Pointer<wire_cst_out_point> Function()>();

  ffi.Pointer<wire_cst_script_buf_base> cst_new_box_autoadd_script_buf_base() {
    return _cst_new_box_autoadd_script_buf_base();
  }

  late final _cst_new_box_autoadd_script_buf_basePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<wire_cst_script_buf_base> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_script_buf_base');
  late final _cst_new_box_autoadd_script_buf_base =
      _cst_new_box_autoadd_script_buf_basePtr
          .asFunction<ffi.Pointer<wire_cst_script_buf_base> Function()>();

  ffi.Pointer<wire_cst_sled_db_configuration>
      cst_new_box_autoadd_sled_db_configuration() {
    return _cst_new_box_autoadd_sled_db_configuration();
  }

  late final _cst_new_box_autoadd_sled_db_configurationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_sled_db_configuration> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_sled_db_configuration');
  late final _cst_new_box_autoadd_sled_db_configuration =
      _cst_new_box_autoadd_sled_db_configurationPtr
          .asFunction<ffi.Pointer<wire_cst_sled_db_configuration> Function()>();

  ffi.Pointer<wire_cst_sqlite_db_configuration>
      cst_new_box_autoadd_sqlite_db_configuration() {
    return _cst_new_box_autoadd_sqlite_db_configuration();
  }

  late final _cst_new_box_autoadd_sqlite_db_configurationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_sqlite_db_configuration> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_sqlite_db_configuration');
  late final _cst_new_box_autoadd_sqlite_db_configuration =
      _cst_new_box_autoadd_sqlite_db_configurationPtr.asFunction<
          ffi.Pointer<wire_cst_sqlite_db_configuration> Function()>();

  ffi.Pointer<wire_cst_transaction_base>
      cst_new_box_autoadd_transaction_base() {
    return _cst_new_box_autoadd_transaction_base();
  }

  late final _cst_new_box_autoadd_transaction_basePtr = _lookup<
          ffi
          .NativeFunction<ffi.Pointer<wire_cst_transaction_base> Function()>>(
      'frbgen_bdk_flutter_cst_new_box_autoadd_transaction_base');
  late final _cst_new_box_autoadd_transaction_base =
      _cst_new_box_autoadd_transaction_basePtr
          .asFunction<ffi.Pointer<wire_cst_transaction_base> Function()>();

  ffi.Pointer<wire_cst_list_list_prim_u_8_strict>
      cst_new_list_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_list_prim_u_8_strictPtr = _lookup<
          ffi.NativeFunction<
              ffi.Pointer<wire_cst_list_list_prim_u_8_strict> Function(
                  ffi.Int32)>>(
      'frbgen_bdk_flutter_cst_new_list_list_prim_u_8_strict');
  late final _cst_new_list_list_prim_u_8_strict =
      _cst_new_list_list_prim_u_8_strictPtr.asFunction<
          ffi.Pointer<wire_cst_list_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_loose> cst_new_list_prim_u_8_loose(
    int len,
  ) {
    return _cst_new_list_prim_u_8_loose(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_loosePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_prim_u_8_loose');
  late final _cst_new_list_prim_u_8_loose = _cst_new_list_prim_u_8_loosePtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_loose> Function(int)>();

  ffi.Pointer<wire_cst_list_prim_u_8_strict> cst_new_list_prim_u_8_strict(
    int len,
  ) {
    return _cst_new_list_prim_u_8_strict(
      len,
    );
  }

  late final _cst_new_list_prim_u_8_strictPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_prim_u_8_strict');
  late final _cst_new_list_prim_u_8_strict = _cst_new_list_prim_u_8_strictPtr
      .asFunction<ffi.Pointer<wire_cst_list_prim_u_8_strict> Function(int)>();

  ffi.Pointer<wire_cst_list_tx_in> cst_new_list_tx_in(
    int len,
  ) {
    return _cst_new_list_tx_in(
      len,
    );
  }

  late final _cst_new_list_tx_inPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_tx_in> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_tx_in');
  late final _cst_new_list_tx_in = _cst_new_list_tx_inPtr
      .asFunction<ffi.Pointer<wire_cst_list_tx_in> Function(int)>();

  ffi.Pointer<wire_cst_list_tx_out> cst_new_list_tx_out(
    int len,
  ) {
    return _cst_new_list_tx_out(
      len,
    );
  }

  late final _cst_new_list_tx_outPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_cst_list_tx_out> Function(
              ffi.Int32)>>('frbgen_bdk_flutter_cst_new_list_tx_out');
  late final _cst_new_list_tx_out = _cst_new_list_tx_outPtr
      .asFunction<ffi.Pointer<wire_cst_list_tx_out> Function(int)>();

  int dummy_method_to_enforce_bundling() {
    return _dummy_method_to_enforce_bundling();
  }

  late final _dummy_method_to_enforce_bundlingPtr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function()>>(
          'dummy_method_to_enforce_bundling');
  late final _dummy_method_to_enforce_bundling =
      _dummy_method_to_enforce_bundlingPtr.asFunction<int Function()>();
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;

final class wire_cst_descriptor_base extends ffi.Struct {
  @ffi.UintPtr()
  external int extended_descriptor;

  @ffi.UintPtr()
  external int key_map;
}

final class wire_cst_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_descriptor_secret_key_base extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_descriptor_public_key_base extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_derivation_path_base extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_mnemonic_base extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}

final class wire_cst_list_prim_u_8_loose extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_address_base extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_script_buf_base extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> bytes;
}

final class wire_cst_transaction_base extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> inner;
}

final class wire_cst_sqlite_db_configuration extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> path;
}

final class wire_cst_DatabaseConfig_Sqlite extends ffi.Struct {
  external ffi.Pointer<wire_cst_sqlite_db_configuration> config;
}

final class wire_cst_sled_db_configuration extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> path;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> tree_name;
}

final class wire_cst_DatabaseConfig_Sled extends ffi.Struct {
  external ffi.Pointer<wire_cst_sled_db_configuration> config;
}

final class DatabaseConfigKind extends ffi.Union {
  external wire_cst_DatabaseConfig_Sqlite Sqlite;

  external wire_cst_DatabaseConfig_Sled Sled;
}

final class wire_cst_database_config extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external DatabaseConfigKind kind;
}

final class wire_cst_AddressError_Base58 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_AddressError_Bech32 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_AddressError_InvalidBech32Variant extends ffi.Struct {
  @ffi.Int32()
  external int expected;

  @ffi.Int32()
  external int found;
}

final class wire_cst_AddressError_InvalidWitnessVersion extends ffi.Struct {
  @ffi.Uint8()
  external int field0;
}

final class wire_cst_AddressError_UnparsableWitnessVersion extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_AddressError_InvalidWitnessProgramLength
    extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_AddressError_InvalidSegwitV0ProgramLength
    extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_AddressError_UnknownAddressType extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_AddressError_NetworkValidation extends ffi.Struct {
  @ffi.Int32()
  external int network_required;

  @ffi.Int32()
  external int network_found;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> address;
}

final class AddressErrorKind extends ffi.Union {
  external wire_cst_AddressError_Base58 Base58;

  external wire_cst_AddressError_Bech32 Bech32;

  external wire_cst_AddressError_InvalidBech32Variant InvalidBech32Variant;

  external wire_cst_AddressError_InvalidWitnessVersion InvalidWitnessVersion;

  external wire_cst_AddressError_UnparsableWitnessVersion
      UnparsableWitnessVersion;

  external wire_cst_AddressError_InvalidWitnessProgramLength
      InvalidWitnessProgramLength;

  external wire_cst_AddressError_InvalidSegwitV0ProgramLength
      InvalidSegwitV0ProgramLength;

  external wire_cst_AddressError_UnknownAddressType UnknownAddressType;

  external wire_cst_AddressError_NetworkValidation NetworkValidation;
}

final class wire_cst_address_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external AddressErrorKind kind;
}

final class wire_cst_ConsensusError_Io extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_ConsensusError_OversizedVectorAllocation
    extends ffi.Struct {
  @ffi.UintPtr()
  external int requested;

  @ffi.UintPtr()
  external int max;
}

final class wire_cst_ConsensusError_InvalidChecksum extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> expected;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> actual;
}

final class wire_cst_ConsensusError_ParseFailed extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_ConsensusError_UnsupportedSegwitFlag extends ffi.Struct {
  @ffi.Uint8()
  external int field0;
}

final class ConsensusErrorKind extends ffi.Union {
  external wire_cst_ConsensusError_Io Io;

  external wire_cst_ConsensusError_OversizedVectorAllocation
      OversizedVectorAllocation;

  external wire_cst_ConsensusError_InvalidChecksum InvalidChecksum;

  external wire_cst_ConsensusError_ParseFailed ParseFailed;

  external wire_cst_ConsensusError_UnsupportedSegwitFlag UnsupportedSegwitFlag;
}

final class wire_cst_consensus_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ConsensusErrorKind kind;
}

final class wire_cst_DescriptorError_Key extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_DescriptorError_Policy extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_DescriptorError_InvalidDescriptorCharacter
    extends ffi.Struct {
  @ffi.Uint8()
  external int field0;
}

final class wire_cst_DescriptorError_Bip32 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_DescriptorError_Base58 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_DescriptorError_Pk extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_DescriptorError_Miniscript extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_DescriptorError_Hex extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class DescriptorErrorKind extends ffi.Union {
  external wire_cst_DescriptorError_Key Key;

  external wire_cst_DescriptorError_Policy Policy;

  external wire_cst_DescriptorError_InvalidDescriptorCharacter
      InvalidDescriptorCharacter;

  external wire_cst_DescriptorError_Bip32 Bip32;

  external wire_cst_DescriptorError_Base58 Base58;

  external wire_cst_DescriptorError_Pk Pk;

  external wire_cst_DescriptorError_Miniscript Miniscript;

  external wire_cst_DescriptorError_Hex Hex;
}

final class wire_cst_descriptor_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external DescriptorErrorKind kind;
}

final class wire_cst_HexError_InvalidChar extends ffi.Struct {
  @ffi.Uint8()
  external int field0;
}

final class wire_cst_HexError_OddLengthString extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_HexError_InvalidLength extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;

  @ffi.UintPtr()
  external int field1;
}

final class HexErrorKind extends ffi.Union {
  external wire_cst_HexError_InvalidChar InvalidChar;

  external wire_cst_HexError_OddLengthString OddLengthString;

  external wire_cst_HexError_InvalidLength InvalidLength;
}

final class wire_cst_hex_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external HexErrorKind kind;
}

final class wire_cst_out_point extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> txid;

  @ffi.Uint32()
  external int vout;
}

final class wire_cst_list_list_prim_u_8_strict extends ffi.Struct {
  external ffi.Pointer<ffi.Pointer<wire_cst_list_prim_u_8_strict>> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_tx_in extends ffi.Struct {
  external wire_cst_out_point previous_output;

  external wire_cst_script_buf_base script_sig;

  @ffi.Uint32()
  external int sequence;

  external ffi.Pointer<wire_cst_list_list_prim_u_8_strict> witness;
}

final class wire_cst_list_tx_in extends ffi.Struct {
  external ffi.Pointer<wire_cst_tx_in> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_tx_out extends ffi.Struct {
  @ffi.Uint64()
  external int value;

  external wire_cst_script_buf_base script_pubkey;
}

final class wire_cst_list_tx_out extends ffi.Struct {
  external ffi.Pointer<wire_cst_tx_out> ptr;

  @ffi.Int32()
  external int len;
}

final class wire_cst_BdkError_Hex extends ffi.Struct {
  external ffi.Pointer<wire_cst_hex_error> field0;
}

final class wire_cst_BdkError_Consensus extends ffi.Struct {
  external ffi.Pointer<wire_cst_consensus_error> field0;
}

final class wire_cst_BdkError_Address extends ffi.Struct {
  external ffi.Pointer<wire_cst_address_error> field0;
}

final class wire_cst_BdkError_Descriptor extends ffi.Struct {
  external ffi.Pointer<wire_cst_descriptor_error> field0;
}

final class wire_cst_BdkError_InvalidU32Bytes extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Generic extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_OutputBelowDustLimit extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;
}

final class wire_cst_BdkError_InsufficientFunds extends ffi.Struct {
  @ffi.Uint64()
  external int needed;

  @ffi.Uint64()
  external int available;
}

final class wire_cst_BdkError_FeeRateTooLow extends ffi.Struct {
  @ffi.Float()
  external double needed;
}

final class wire_cst_BdkError_FeeTooLow extends ffi.Struct {
  @ffi.Uint64()
  external int needed;
}

final class wire_cst_BdkError_MissingKeyOrigin extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Key extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_SpendingPolicyRequired extends ffi.Struct {
  @ffi.Int32()
  external int field0;
}

final class wire_cst_BdkError_InvalidPolicyPathError extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Signer extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_InvalidNetwork extends ffi.Struct {
  @ffi.Int32()
  external int requested;

  @ffi.Int32()
  external int found;
}

final class wire_cst_BdkError_InvalidOutpoint extends ffi.Struct {
  external ffi.Pointer<wire_cst_out_point> field0;
}

final class wire_cst_BdkError_Encode extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Miniscript extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_MiniscriptPsbt extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Bip32 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Bip39 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Secp256k1 extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Json extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Psbt extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_PsbtParse extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_MissingCachedScripts extends ffi.Struct {
  @ffi.UintPtr()
  external int field0;

  @ffi.UintPtr()
  external int field1;
}

final class wire_cst_BdkError_Electrum extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Esplora extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Sled extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Rpc extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class wire_cst_BdkError_Rusqlite extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> field0;
}

final class BdkErrorKind extends ffi.Union {
  external wire_cst_BdkError_Hex Hex;

  external wire_cst_BdkError_Consensus Consensus;

  external wire_cst_BdkError_Address Address;

  external wire_cst_BdkError_Descriptor Descriptor;

  external wire_cst_BdkError_InvalidU32Bytes InvalidU32Bytes;

  external wire_cst_BdkError_Generic Generic;

  external wire_cst_BdkError_OutputBelowDustLimit OutputBelowDustLimit;

  external wire_cst_BdkError_InsufficientFunds InsufficientFunds;

  external wire_cst_BdkError_FeeRateTooLow FeeRateTooLow;

  external wire_cst_BdkError_FeeTooLow FeeTooLow;

  external wire_cst_BdkError_MissingKeyOrigin MissingKeyOrigin;

  external wire_cst_BdkError_Key Key;

  external wire_cst_BdkError_SpendingPolicyRequired SpendingPolicyRequired;

  external wire_cst_BdkError_InvalidPolicyPathError InvalidPolicyPathError;

  external wire_cst_BdkError_Signer Signer;

  external wire_cst_BdkError_InvalidNetwork InvalidNetwork;

  external wire_cst_BdkError_InvalidOutpoint InvalidOutpoint;

  external wire_cst_BdkError_Encode Encode;

  external wire_cst_BdkError_Miniscript Miniscript;

  external wire_cst_BdkError_MiniscriptPsbt MiniscriptPsbt;

  external wire_cst_BdkError_Bip32 Bip32;

  external wire_cst_BdkError_Bip39 Bip39;

  external wire_cst_BdkError_Secp256k1 Secp256k1;

  external wire_cst_BdkError_Json Json;

  external wire_cst_BdkError_Psbt Psbt;

  external wire_cst_BdkError_PsbtParse PsbtParse;

  external wire_cst_BdkError_MissingCachedScripts MissingCachedScripts;

  external wire_cst_BdkError_Electrum Electrum;

  external wire_cst_BdkError_Esplora Esplora;

  external wire_cst_BdkError_Sled Sled;

  external wire_cst_BdkError_Rpc Rpc;

  external wire_cst_BdkError_Rusqlite Rusqlite;
}

final class wire_cst_bdk_error extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external BdkErrorKind kind;
}

final class wire_cst_Payload_PubkeyHash extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> pubkey_hash;
}

final class wire_cst_Payload_ScriptHash extends ffi.Struct {
  external ffi.Pointer<wire_cst_list_prim_u_8_strict> script_hash;
}

final class wire_cst_Payload_WitnessProgram extends ffi.Struct {
  @ffi.Int32()
  external int version;

  external ffi.Pointer<wire_cst_list_prim_u_8_strict> program;
}

final class PayloadKind extends ffi.Union {
  external wire_cst_Payload_PubkeyHash PubkeyHash;

  external wire_cst_Payload_ScriptHash ScriptHash;

  external wire_cst_Payload_WitnessProgram WitnessProgram;
}

final class wire_cst_payload extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external PayloadKind kind;
}

final class wire_cst_wallet_base extends ffi.Struct {
  @ffi.UintPtr()
  external int ptr;
}
