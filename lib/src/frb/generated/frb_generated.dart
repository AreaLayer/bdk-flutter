// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.25.

// ignore_for_file: unused_import, unused_element, unnecessary_import, duplicate_ignore, invalid_use_of_internal_member, annotate_overrides, non_constant_identifier_names, curly_braces_in_flow_control_structures, prefer_const_literals_to_create_immutables, unused_field

import 'api/types.dart';
import 'dart:async';
import 'dart:convert';
import 'frb_generated.io.dart' if (dart.library.html) 'frb_generated.web.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'util/error.dart';

/// Main entrypoint of the Rust API
class BdkCore extends BaseEntrypoint<BdkCoreApi, BdkCoreApiImpl, BdkCoreWire> {
  @internal
  static final instance = BdkCore._();

  BdkCore._();

  /// Initialize flutter_rust_bridge
  static Future<void> init({
    BdkCoreApi? api,
    BaseHandler? handler,
    ExternalLibrary? externalLibrary,
  }) async {
    await instance.initImpl(
      api: api,
      handler: handler,
      externalLibrary: externalLibrary,
    );
  }

  /// Dispose flutter_rust_bridge
  ///
  /// The call to this function is optional, since flutter_rust_bridge (and everything else)
  /// is automatically disposed when the app stops.
  static void dispose() => instance.disposeImpl();

  @override
  ApiImplConstructor<BdkCoreApiImpl, BdkCoreWire> get apiImplConstructor =>
      BdkCoreApiImpl.new;

  @override
  WireConstructor<BdkCoreWire> get wireConstructor =>
      BdkCoreWire.fromExternalLibrary;

  @override
  Future<void> executeRustInitializers() async {}

  @override
  ExternalLibraryLoaderConfig get defaultExternalLibraryLoaderConfig =>
      kDefaultExternalLibraryLoaderConfig;

  @override
  String get codegenVersion => '2.0.0-dev.25';

  static const kDefaultExternalLibraryLoaderConfig =
      ExternalLibraryLoaderConfig(
    stem: 'bdk_flutter',
    ioDirectory: 'rust/target/release/',
    webPrefix: 'pkg/',
  );
}

abstract class BdkCoreApi extends BaseApi {
  Future<String> addressBaseAsString({required AddressBase that, dynamic hint});

  Future<AddressBase> addressBaseFromScript(
      {required ScriptBufBase script, required Network network, dynamic hint});

  Future<AddressBase> addressBaseFromString(
      {required String address, required Network network, dynamic hint});

  Future<bool> addressBaseIsValidForNetwork(
      {required AddressBase that, required Network network, dynamic hint});

  Future<Network> addressBaseNetwork({required AddressBase that, dynamic hint});

  Future<Payload> addressBasePayload({required AddressBase that, dynamic hint});

  Future<ScriptBufBase> addressBaseScriptPubkey(
      {required AddressBase that, dynamic hint});

  Future<String> addressBaseToQrUri({required AddressBase that, dynamic hint});

  Future<ScriptBufBase> scriptBufBaseEmpty({dynamic hint});

  Future<ScriptBufBase> scriptBufBaseFromHex({required String s, dynamic hint});

  Future<ScriptBufBase> scriptBufBaseWithCapacity(
      {required int capacity, dynamic hint});

  Future<List<TxIn>> transactionBaseInput(
      {required TransactionBase that, dynamic hint});

  Future<bool> transactionBaseIsCoinBase(
      {required TransactionBase that, dynamic hint});

  Future<bool> transactionBaseIsExplicitlyRbf(
      {required TransactionBase that, dynamic hint});

  Future<bool> transactionBaseIsLockTimeEnabled(
      {required TransactionBase that, dynamic hint});

  Future<int> transactionBaseLockTime(
      {required TransactionBase that, dynamic hint});

  Future<TransactionBase> transactionBaseNew(
      {required List<int> transactionBytes, dynamic hint});

  Future<List<TxOut>> transactionBaseOutput(
      {required TransactionBase that, dynamic hint});

  Future<Uint8List> transactionBaseSerialize(
      {required TransactionBase that, dynamic hint});

  Future<int> transactionBaseSize(
      {required TransactionBase that, dynamic hint});

  Future<String> transactionBaseTxid(
      {required TransactionBase that, dynamic hint});

  Future<int> transactionBaseVersion(
      {required TransactionBase that, dynamic hint});

  Future<int> transactionBaseVsize(
      {required TransactionBase that, dynamic hint});

  Future<int> transactionBaseWeight(
      {required TransactionBase that, dynamic hint});

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BdkBitcoinAddress;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BdkBitcoinAddress;

  CrossPlatformFinalizerArg
      get rust_arc_decrement_strong_count_BdkBitcoinAddressPtr;
}

class BdkCoreApiImpl extends BdkCoreApiImplPlatform implements BdkCoreApi {
  BdkCoreApiImpl({
    required super.handler,
    required super.wire,
    required super.generalizedFrbRustBinding,
    required super.portManager,
  });

  @override
  Future<String> addressBaseAsString(
      {required AddressBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_address_base(that);
        return wire.wire_AddressBase_as_string(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kAddressBaseAsStringConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddressBaseAsStringConstMeta => const TaskConstMeta(
        debugName: "AddressBase_as_string",
        argNames: ["that"],
      );

  @override
  Future<AddressBase> addressBaseFromScript(
      {required ScriptBufBase script, required Network network, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_script_buf_base(script);
        var arg1 = cst_encode_network(network);
        return wire.wire_AddressBase_from_script(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_address_base,
        decodeErrorData: dco_decode_bdk_error,
      ),
      constMeta: kAddressBaseFromScriptConstMeta,
      argValues: [script, network],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddressBaseFromScriptConstMeta => const TaskConstMeta(
        debugName: "AddressBase_from_script",
        argNames: ["script", "network"],
      );

  @override
  Future<AddressBase> addressBaseFromString(
      {required String address, required Network network, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(address);
        var arg1 = cst_encode_network(network);
        return wire.wire_AddressBase_from_string(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_address_base,
        decodeErrorData: dco_decode_bdk_error,
      ),
      constMeta: kAddressBaseFromStringConstMeta,
      argValues: [address, network],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddressBaseFromStringConstMeta => const TaskConstMeta(
        debugName: "AddressBase_from_string",
        argNames: ["address", "network"],
      );

  @override
  Future<bool> addressBaseIsValidForNetwork(
      {required AddressBase that, required Network network, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_address_base(that);
        var arg1 = cst_encode_network(network);
        return wire.wire_AddressBase_is_valid_for_network(port_, arg0, arg1);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kAddressBaseIsValidForNetworkConstMeta,
      argValues: [that, network],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddressBaseIsValidForNetworkConstMeta =>
      const TaskConstMeta(
        debugName: "AddressBase_is_valid_for_network",
        argNames: ["that", "network"],
      );

  @override
  Future<Network> addressBaseNetwork(
      {required AddressBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_address_base(that);
        return wire.wire_AddressBase_network(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_network,
        decodeErrorData: null,
      ),
      constMeta: kAddressBaseNetworkConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddressBaseNetworkConstMeta => const TaskConstMeta(
        debugName: "AddressBase_network",
        argNames: ["that"],
      );

  @override
  Future<Payload> addressBasePayload(
      {required AddressBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_address_base(that);
        return wire.wire_AddressBase_payload(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_payload,
        decodeErrorData: null,
      ),
      constMeta: kAddressBasePayloadConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddressBasePayloadConstMeta => const TaskConstMeta(
        debugName: "AddressBase_payload",
        argNames: ["that"],
      );

  @override
  Future<ScriptBufBase> addressBaseScriptPubkey(
      {required AddressBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_address_base(that);
        return wire.wire_AddressBase_script_pubkey(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_script_buf_base,
        decodeErrorData: null,
      ),
      constMeta: kAddressBaseScriptPubkeyConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddressBaseScriptPubkeyConstMeta => const TaskConstMeta(
        debugName: "AddressBase_script_pubkey",
        argNames: ["that"],
      );

  @override
  Future<String> addressBaseToQrUri({required AddressBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_address_base(that);
        return wire.wire_AddressBase_to_qr_uri(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kAddressBaseToQrUriConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kAddressBaseToQrUriConstMeta => const TaskConstMeta(
        debugName: "AddressBase_to_qr_uri",
        argNames: ["that"],
      );

  @override
  Future<ScriptBufBase> scriptBufBaseEmpty({dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        return wire.wire_ScriptBufBase_empty(port_);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_script_buf_base,
        decodeErrorData: null,
      ),
      constMeta: kScriptBufBaseEmptyConstMeta,
      argValues: [],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kScriptBufBaseEmptyConstMeta => const TaskConstMeta(
        debugName: "ScriptBufBase_empty",
        argNames: [],
      );

  @override
  Future<ScriptBufBase> scriptBufBaseFromHex(
      {required String s, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_String(s);
        return wire.wire_ScriptBufBase_from_hex(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_script_buf_base,
        decodeErrorData: dco_decode_bdk_error,
      ),
      constMeta: kScriptBufBaseFromHexConstMeta,
      argValues: [s],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kScriptBufBaseFromHexConstMeta => const TaskConstMeta(
        debugName: "ScriptBufBase_from_hex",
        argNames: ["s"],
      );

  @override
  Future<ScriptBufBase> scriptBufBaseWithCapacity(
      {required int capacity, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_usize(capacity);
        return wire.wire_ScriptBufBase_with_capacity(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_script_buf_base,
        decodeErrorData: null,
      ),
      constMeta: kScriptBufBaseWithCapacityConstMeta,
      argValues: [capacity],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kScriptBufBaseWithCapacityConstMeta => const TaskConstMeta(
        debugName: "ScriptBufBase_with_capacity",
        argNames: ["capacity"],
      );

  @override
  Future<List<TxIn>> transactionBaseInput(
      {required TransactionBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_transaction_base(that);
        return wire.wire_TransactionBase_input(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_tx_in,
        decodeErrorData: null,
      ),
      constMeta: kTransactionBaseInputConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionBaseInputConstMeta => const TaskConstMeta(
        debugName: "TransactionBase_input",
        argNames: ["that"],
      );

  @override
  Future<bool> transactionBaseIsCoinBase(
      {required TransactionBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_transaction_base(that);
        return wire.wire_TransactionBase_is_coin_base(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kTransactionBaseIsCoinBaseConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionBaseIsCoinBaseConstMeta => const TaskConstMeta(
        debugName: "TransactionBase_is_coin_base",
        argNames: ["that"],
      );

  @override
  Future<bool> transactionBaseIsExplicitlyRbf(
      {required TransactionBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_transaction_base(that);
        return wire.wire_TransactionBase_is_explicitly_rbf(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kTransactionBaseIsExplicitlyRbfConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionBaseIsExplicitlyRbfConstMeta =>
      const TaskConstMeta(
        debugName: "TransactionBase_is_explicitly_rbf",
        argNames: ["that"],
      );

  @override
  Future<bool> transactionBaseIsLockTimeEnabled(
      {required TransactionBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_transaction_base(that);
        return wire.wire_TransactionBase_is_lock_time_enabled(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_bool,
        decodeErrorData: null,
      ),
      constMeta: kTransactionBaseIsLockTimeEnabledConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionBaseIsLockTimeEnabledConstMeta =>
      const TaskConstMeta(
        debugName: "TransactionBase_is_lock_time_enabled",
        argNames: ["that"],
      );

  @override
  Future<int> transactionBaseLockTime(
      {required TransactionBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_transaction_base(that);
        return wire.wire_TransactionBase_lock_time(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_32,
        decodeErrorData: null,
      ),
      constMeta: kTransactionBaseLockTimeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionBaseLockTimeConstMeta => const TaskConstMeta(
        debugName: "TransactionBase_lock_time",
        argNames: ["that"],
      );

  @override
  Future<TransactionBase> transactionBaseNew(
      {required List<int> transactionBytes, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_list_prim_u_8_loose(transactionBytes);
        return wire.wire_TransactionBase_new(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_transaction_base,
        decodeErrorData: dco_decode_bdk_error,
      ),
      constMeta: kTransactionBaseNewConstMeta,
      argValues: [transactionBytes],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionBaseNewConstMeta => const TaskConstMeta(
        debugName: "TransactionBase_new",
        argNames: ["transactionBytes"],
      );

  @override
  Future<List<TxOut>> transactionBaseOutput(
      {required TransactionBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_transaction_base(that);
        return wire.wire_TransactionBase_output(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_tx_out,
        decodeErrorData: null,
      ),
      constMeta: kTransactionBaseOutputConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionBaseOutputConstMeta => const TaskConstMeta(
        debugName: "TransactionBase_output",
        argNames: ["that"],
      );

  @override
  Future<Uint8List> transactionBaseSerialize(
      {required TransactionBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_transaction_base(that);
        return wire.wire_TransactionBase_serialize(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_list_prim_u_8_strict,
        decodeErrorData: null,
      ),
      constMeta: kTransactionBaseSerializeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionBaseSerializeConstMeta => const TaskConstMeta(
        debugName: "TransactionBase_serialize",
        argNames: ["that"],
      );

  @override
  Future<int> transactionBaseSize(
      {required TransactionBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_transaction_base(that);
        return wire.wire_TransactionBase_size(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kTransactionBaseSizeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionBaseSizeConstMeta => const TaskConstMeta(
        debugName: "TransactionBase_size",
        argNames: ["that"],
      );

  @override
  Future<String> transactionBaseTxid(
      {required TransactionBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_transaction_base(that);
        return wire.wire_TransactionBase_txid(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_String,
        decodeErrorData: null,
      ),
      constMeta: kTransactionBaseTxidConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionBaseTxidConstMeta => const TaskConstMeta(
        debugName: "TransactionBase_txid",
        argNames: ["that"],
      );

  @override
  Future<int> transactionBaseVersion(
      {required TransactionBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_transaction_base(that);
        return wire.wire_TransactionBase_version(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_i_32,
        decodeErrorData: null,
      ),
      constMeta: kTransactionBaseVersionConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionBaseVersionConstMeta => const TaskConstMeta(
        debugName: "TransactionBase_version",
        argNames: ["that"],
      );

  @override
  Future<int> transactionBaseVsize(
      {required TransactionBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_transaction_base(that);
        return wire.wire_TransactionBase_vsize(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kTransactionBaseVsizeConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionBaseVsizeConstMeta => const TaskConstMeta(
        debugName: "TransactionBase_vsize",
        argNames: ["that"],
      );

  @override
  Future<int> transactionBaseWeight(
      {required TransactionBase that, dynamic hint}) {
    return handler.executeNormal(NormalTask(
      callFfi: (port_) {
        var arg0 = cst_encode_box_autoadd_transaction_base(that);
        return wire.wire_TransactionBase_weight(port_, arg0);
      },
      codec: DcoCodec(
        decodeSuccessData: dco_decode_u_64,
        decodeErrorData: null,
      ),
      constMeta: kTransactionBaseWeightConstMeta,
      argValues: [that],
      apiImpl: this,
      hint: hint,
    ));
  }

  TaskConstMeta get kTransactionBaseWeightConstMeta => const TaskConstMeta(
        debugName: "TransactionBase_weight",
        argNames: ["that"],
      );

  RustArcIncrementStrongCountFnType
      get rust_arc_increment_strong_count_BdkBitcoinAddress => wire
          .rust_arc_increment_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress;

  RustArcDecrementStrongCountFnType
      get rust_arc_decrement_strong_count_BdkBitcoinAddress => wire
          .rust_arc_decrement_strong_count_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress;

  @protected
  BdkBitcoinAddress
      dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BdkBitcoinAddress.dcoDecode(raw as List<dynamic>);
  }

  @protected
  BdkBitcoinAddress
      dco_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return BdkBitcoinAddress.dcoDecode(raw as List<dynamic>);
  }

  @protected
  String dco_decode_String(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as String;
  }

  @protected
  AddressBase dco_decode_address_base(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return AddressBase(
      field0:
          dco_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
              arr[0]),
    );
  }

  @protected
  BdkError dco_decode_bdk_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BdkError_HexError(
          dco_decode_box_autoadd_bitcoin_hex_error(raw[1]),
        );
      case 1:
        return BdkError_ConsensusError(
          dco_decode_box_autoadd_bitcoin_consensus_error(raw[1]),
        );
      case 2:
        return BdkError_AddressError(
          dco_decode_box_autoadd_bitcoin_address_error(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  BitcoinAddressError dco_decode_bitcoin_address_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BitcoinAddressError_Base58(
          dco_decode_String(raw[1]),
        );
      case 1:
        return BitcoinAddressError_Bech32(
          dco_decode_String(raw[1]),
        );
      case 2:
        return BitcoinAddressError_EmptyBech32Payload();
      case 3:
        return BitcoinAddressError_InvalidBech32Variant(
          expected: dco_decode_variant(raw[1]),
          found: dco_decode_variant(raw[2]),
        );
      case 4:
        return BitcoinAddressError_InvalidWitnessVersion(
          dco_decode_u_8(raw[1]),
        );
      case 5:
        return BitcoinAddressError_UnparsableWitnessVersion(
          dco_decode_String(raw[1]),
        );
      case 6:
        return BitcoinAddressError_MalformedWitnessVersion();
      case 7:
        return BitcoinAddressError_InvalidWitnessProgramLength(
          dco_decode_usize(raw[1]),
        );
      case 8:
        return BitcoinAddressError_InvalidSegwitV0ProgramLength(
          dco_decode_usize(raw[1]),
        );
      case 9:
        return BitcoinAddressError_UncompressedPubkey();
      case 10:
        return BitcoinAddressError_ExcessiveScriptSize();
      case 11:
        return BitcoinAddressError_UnrecognizedScript();
      case 12:
        return BitcoinAddressError_UnknownAddressType(
          dco_decode_String(raw[1]),
        );
      case 13:
        return BitcoinAddressError_NetworkValidation(
          networkRequired: dco_decode_network(raw[1]),
          networkFound: dco_decode_network(raw[2]),
          address: dco_decode_String(raw[3]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  BitcoinConsensusError dco_decode_bitcoin_consensus_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BitcoinConsensusError_Io(
          dco_decode_String(raw[1]),
        );
      case 1:
        return BitcoinConsensusError_OversizedVectorAllocation(
          requested: dco_decode_usize(raw[1]),
          max: dco_decode_usize(raw[2]),
        );
      case 2:
        return BitcoinConsensusError_InvalidChecksum(
          expected: dco_decode_u_8_array_4(raw[1]),
          actual: dco_decode_u_8_array_4(raw[2]),
        );
      case 3:
        return BitcoinConsensusError_NonMinimalVarInt();
      case 4:
        return BitcoinConsensusError_ParseFailed(
          dco_decode_String(raw[1]),
        );
      case 5:
        return BitcoinConsensusError_UnsupportedSegwitFlag(
          dco_decode_u_8(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  BitcoinHexError dco_decode_bitcoin_hex_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return BitcoinHexError_InvalidChar(
          dco_decode_u_8(raw[1]),
        );
      case 1:
        return BitcoinHexError_OddLengthString(
          dco_decode_usize(raw[1]),
        );
      case 2:
        return BitcoinHexError_InvalidLength(
          dco_decode_usize(raw[1]),
          dco_decode_usize(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  bool dco_decode_bool(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as bool;
  }

  @protected
  AddressBase dco_decode_box_autoadd_address_base(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_address_base(raw);
  }

  @protected
  BitcoinAddressError dco_decode_box_autoadd_bitcoin_address_error(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bitcoin_address_error(raw);
  }

  @protected
  BitcoinConsensusError dco_decode_box_autoadd_bitcoin_consensus_error(
      dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bitcoin_consensus_error(raw);
  }

  @protected
  BitcoinHexError dco_decode_box_autoadd_bitcoin_hex_error(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_bitcoin_hex_error(raw);
  }

  @protected
  ScriptBufBase dco_decode_box_autoadd_script_buf_base(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_script_buf_base(raw);
  }

  @protected
  TransactionBase dco_decode_box_autoadd_transaction_base(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dco_decode_transaction_base(raw);
  }

  @protected
  int dco_decode_i_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  List<Uint8List> dco_decode_list_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_list_prim_u_8_strict).toList();
  }

  @protected
  List<int> dco_decode_list_prim_u_8_loose(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as List<int>;
  }

  @protected
  Uint8List dco_decode_list_prim_u_8_strict(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as Uint8List;
  }

  @protected
  List<TxIn> dco_decode_list_tx_in(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_in).toList();
  }

  @protected
  List<TxOut> dco_decode_list_tx_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return (raw as List<dynamic>).map(dco_decode_tx_out).toList();
  }

  @protected
  Network dco_decode_network(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Network.values[raw as int];
  }

  @protected
  OutPoint dco_decode_out_point(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return OutPoint(
      txid: dco_decode_String(arr[0]),
      vout: dco_decode_u_32(arr[1]),
    );
  }

  @protected
  Payload dco_decode_payload(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    switch (raw[0]) {
      case 0:
        return Payload_PubkeyHash(
          pubkeyHash: dco_decode_String(raw[1]),
        );
      case 1:
        return Payload_ScriptHash(
          scriptHash: dco_decode_String(raw[1]),
        );
      case 2:
        return Payload_WitnessProgram(
          version: dco_decode_witness_version(raw[1]),
          program: dco_decode_list_prim_u_8_strict(raw[2]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  @protected
  ScriptBufBase dco_decode_script_buf_base(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return ScriptBufBase(
      bytes: dco_decode_list_prim_u_8_strict(arr[0]),
    );
  }

  @protected
  TransactionBase dco_decode_transaction_base(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 1)
      throw Exception('unexpected arr length: expect 1 but see ${arr.length}');
    return TransactionBase(
      inner: dco_decode_String(arr[0]),
    );
  }

  @protected
  TxIn dco_decode_tx_in(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 4)
      throw Exception('unexpected arr length: expect 4 but see ${arr.length}');
    return TxIn(
      previousOutput: dco_decode_out_point(arr[0]),
      scriptSig: dco_decode_script_buf_base(arr[1]),
      sequence: dco_decode_u_32(arr[2]),
      witness: dco_decode_list_list_prim_u_8_strict(arr[3]),
    );
  }

  @protected
  TxOut dco_decode_tx_out(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    final arr = raw as List<dynamic>;
    if (arr.length != 2)
      throw Exception('unexpected arr length: expect 2 but see ${arr.length}');
    return TxOut(
      value: dco_decode_u_64(arr[0]),
      scriptPubkey: dco_decode_script_buf_base(arr[1]),
    );
  }

  @protected
  int dco_decode_u_32(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  int dco_decode_u_64(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  int dco_decode_u_8(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return raw as int;
  }

  @protected
  U8Array4 dco_decode_u_8_array_4(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return U8Array4(dco_decode_list_prim_u_8_strict(raw));
  }

  @protected
  void dco_decode_unit(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return;
  }

  @protected
  int dco_decode_usize(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return dcoDecodeI64OrU64(raw);
  }

  @protected
  Variant dco_decode_variant(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return Variant.values[raw as int];
  }

  @protected
  WitnessVersion dco_decode_witness_version(dynamic raw) {
    // Codec=Dco (DartCObject based), see doc to use other codecs
    return WitnessVersion.values[raw as int];
  }

  @protected
  BdkBitcoinAddress
      sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BdkBitcoinAddress.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  BdkBitcoinAddress
      sse_decode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return BdkBitcoinAddress.sseDecode(
        sse_decode_usize(deserializer), sse_decode_i_32(deserializer));
  }

  @protected
  String sse_decode_String(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return utf8.decoder.convert(inner);
  }

  @protected
  AddressBase sse_decode_address_base(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_field0 =
        sse_decode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
            deserializer);
    return AddressBase(field0: var_field0);
  }

  @protected
  BdkError sse_decode_bdk_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_box_autoadd_bitcoin_hex_error(deserializer);
        return BdkError_HexError(var_field0);
      case 1:
        var var_field0 =
            sse_decode_box_autoadd_bitcoin_consensus_error(deserializer);
        return BdkError_ConsensusError(var_field0);
      case 2:
        var var_field0 =
            sse_decode_box_autoadd_bitcoin_address_error(deserializer);
        return BdkError_AddressError(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  BitcoinAddressError sse_decode_bitcoin_address_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return BitcoinAddressError_Base58(var_field0);
      case 1:
        var var_field0 = sse_decode_String(deserializer);
        return BitcoinAddressError_Bech32(var_field0);
      case 2:
        return BitcoinAddressError_EmptyBech32Payload();
      case 3:
        var var_expected = sse_decode_variant(deserializer);
        var var_found = sse_decode_variant(deserializer);
        return BitcoinAddressError_InvalidBech32Variant(
            expected: var_expected, found: var_found);
      case 4:
        var var_field0 = sse_decode_u_8(deserializer);
        return BitcoinAddressError_InvalidWitnessVersion(var_field0);
      case 5:
        var var_field0 = sse_decode_String(deserializer);
        return BitcoinAddressError_UnparsableWitnessVersion(var_field0);
      case 6:
        return BitcoinAddressError_MalformedWitnessVersion();
      case 7:
        var var_field0 = sse_decode_usize(deserializer);
        return BitcoinAddressError_InvalidWitnessProgramLength(var_field0);
      case 8:
        var var_field0 = sse_decode_usize(deserializer);
        return BitcoinAddressError_InvalidSegwitV0ProgramLength(var_field0);
      case 9:
        return BitcoinAddressError_UncompressedPubkey();
      case 10:
        return BitcoinAddressError_ExcessiveScriptSize();
      case 11:
        return BitcoinAddressError_UnrecognizedScript();
      case 12:
        var var_field0 = sse_decode_String(deserializer);
        return BitcoinAddressError_UnknownAddressType(var_field0);
      case 13:
        var var_networkRequired = sse_decode_network(deserializer);
        var var_networkFound = sse_decode_network(deserializer);
        var var_address = sse_decode_String(deserializer);
        return BitcoinAddressError_NetworkValidation(
            networkRequired: var_networkRequired,
            networkFound: var_networkFound,
            address: var_address);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  BitcoinConsensusError sse_decode_bitcoin_consensus_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_String(deserializer);
        return BitcoinConsensusError_Io(var_field0);
      case 1:
        var var_requested = sse_decode_usize(deserializer);
        var var_max = sse_decode_usize(deserializer);
        return BitcoinConsensusError_OversizedVectorAllocation(
            requested: var_requested, max: var_max);
      case 2:
        var var_expected = sse_decode_u_8_array_4(deserializer);
        var var_actual = sse_decode_u_8_array_4(deserializer);
        return BitcoinConsensusError_InvalidChecksum(
            expected: var_expected, actual: var_actual);
      case 3:
        return BitcoinConsensusError_NonMinimalVarInt();
      case 4:
        var var_field0 = sse_decode_String(deserializer);
        return BitcoinConsensusError_ParseFailed(var_field0);
      case 5:
        var var_field0 = sse_decode_u_8(deserializer);
        return BitcoinConsensusError_UnsupportedSegwitFlag(var_field0);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  BitcoinHexError sse_decode_bitcoin_hex_error(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_field0 = sse_decode_u_8(deserializer);
        return BitcoinHexError_InvalidChar(var_field0);
      case 1:
        var var_field0 = sse_decode_usize(deserializer);
        return BitcoinHexError_OddLengthString(var_field0);
      case 2:
        var var_field0 = sse_decode_usize(deserializer);
        var var_field1 = sse_decode_usize(deserializer);
        return BitcoinHexError_InvalidLength(var_field0, var_field1);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  bool sse_decode_bool(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8() != 0;
  }

  @protected
  AddressBase sse_decode_box_autoadd_address_base(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_address_base(deserializer));
  }

  @protected
  BitcoinAddressError sse_decode_box_autoadd_bitcoin_address_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bitcoin_address_error(deserializer));
  }

  @protected
  BitcoinConsensusError sse_decode_box_autoadd_bitcoin_consensus_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bitcoin_consensus_error(deserializer));
  }

  @protected
  BitcoinHexError sse_decode_box_autoadd_bitcoin_hex_error(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_bitcoin_hex_error(deserializer));
  }

  @protected
  ScriptBufBase sse_decode_box_autoadd_script_buf_base(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_script_buf_base(deserializer));
  }

  @protected
  TransactionBase sse_decode_box_autoadd_transaction_base(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return (sse_decode_transaction_base(deserializer));
  }

  @protected
  int sse_decode_i_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getInt32();
  }

  @protected
  List<Uint8List> sse_decode_list_list_prim_u_8_strict(
      SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <Uint8List>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_list_prim_u_8_strict(deserializer));
    }
    return ans_;
  }

  @protected
  List<int> sse_decode_list_prim_u_8_loose(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  Uint8List sse_decode_list_prim_u_8_strict(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var len_ = sse_decode_i_32(deserializer);
    return deserializer.buffer.getUint8List(len_);
  }

  @protected
  List<TxIn> sse_decode_list_tx_in(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxIn>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_in(deserializer));
    }
    return ans_;
  }

  @protected
  List<TxOut> sse_decode_list_tx_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var len_ = sse_decode_i_32(deserializer);
    var ans_ = <TxOut>[];
    for (var idx_ = 0; idx_ < len_; ++idx_) {
      ans_.add(sse_decode_tx_out(deserializer));
    }
    return ans_;
  }

  @protected
  Network sse_decode_network(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Network.values[inner];
  }

  @protected
  OutPoint sse_decode_out_point(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_txid = sse_decode_String(deserializer);
    var var_vout = sse_decode_u_32(deserializer);
    return OutPoint(txid: var_txid, vout: var_vout);
  }

  @protected
  Payload sse_decode_payload(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs

    var tag_ = sse_decode_i_32(deserializer);
    switch (tag_) {
      case 0:
        var var_pubkeyHash = sse_decode_String(deserializer);
        return Payload_PubkeyHash(pubkeyHash: var_pubkeyHash);
      case 1:
        var var_scriptHash = sse_decode_String(deserializer);
        return Payload_ScriptHash(scriptHash: var_scriptHash);
      case 2:
        var var_version = sse_decode_witness_version(deserializer);
        var var_program = sse_decode_list_prim_u_8_strict(deserializer);
        return Payload_WitnessProgram(
            version: var_version, program: var_program);
      default:
        throw UnimplementedError('');
    }
  }

  @protected
  ScriptBufBase sse_decode_script_buf_base(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_bytes = sse_decode_list_prim_u_8_strict(deserializer);
    return ScriptBufBase(bytes: var_bytes);
  }

  @protected
  TransactionBase sse_decode_transaction_base(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_inner = sse_decode_String(deserializer);
    return TransactionBase(inner: var_inner);
  }

  @protected
  TxIn sse_decode_tx_in(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_previousOutput = sse_decode_out_point(deserializer);
    var var_scriptSig = sse_decode_script_buf_base(deserializer);
    var var_sequence = sse_decode_u_32(deserializer);
    var var_witness = sse_decode_list_list_prim_u_8_strict(deserializer);
    return TxIn(
        previousOutput: var_previousOutput,
        scriptSig: var_scriptSig,
        sequence: var_sequence,
        witness: var_witness);
  }

  @protected
  TxOut sse_decode_tx_out(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var var_value = sse_decode_u_64(deserializer);
    var var_scriptPubkey = sse_decode_script_buf_base(deserializer);
    return TxOut(value: var_value, scriptPubkey: var_scriptPubkey);
  }

  @protected
  int sse_decode_u_32(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint32();
  }

  @protected
  int sse_decode_u_64(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  int sse_decode_u_8(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint8();
  }

  @protected
  U8Array4 sse_decode_u_8_array_4(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_list_prim_u_8_strict(deserializer);
    return U8Array4(inner);
  }

  @protected
  void sse_decode_unit(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  int sse_decode_usize(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    return deserializer.buffer.getUint64();
  }

  @protected
  Variant sse_decode_variant(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return Variant.values[inner];
  }

  @protected
  WitnessVersion sse_decode_witness_version(SseDeserializer deserializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    var inner = sse_decode_i_32(deserializer);
    return WitnessVersion.values[inner];
  }

  @protected
  int cst_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
      BdkBitcoinAddress raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode(move: true);
  }

  @protected
  int cst_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
      BdkBitcoinAddress raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
// ignore: invalid_use_of_internal_member
    return raw.cstEncode();
  }

  @protected
  bool cst_encode_bool(bool raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_i_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_network(Network raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_u_32(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_u_8(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  void cst_encode_unit(void raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_usize(int raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return raw;
  }

  @protected
  int cst_encode_variant(Variant raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  int cst_encode_witness_version(WitnessVersion raw) {
    // Codec=Cst (C-struct based), see doc to use other codecs
    return cst_encode_i_32(raw.index);
  }

  @protected
  void
      sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          BdkBitcoinAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: true), serializer);
  }

  @protected
  void
      sse_encode_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
          BdkBitcoinAddress self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_usize(self.sseEncode(move: null), serializer);
  }

  @protected
  void sse_encode_String(String self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(utf8.encoder.convert(self), serializer);
  }

  @protected
  void sse_encode_address_base(AddressBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_Auto_Owned_RustOpaque_flutter_rust_bridgefor_generatedrust_asyncRwLockbdkbitcoinAddress(
        self.field0, serializer);
  }

  @protected
  void sse_encode_bdk_error(BdkError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BdkError_HexError(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_box_autoadd_bitcoin_hex_error(field0, serializer);
      case BdkError_ConsensusError(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_box_autoadd_bitcoin_consensus_error(field0, serializer);
      case BdkError_AddressError(field0: final field0):
        sse_encode_i_32(2, serializer);
        sse_encode_box_autoadd_bitcoin_address_error(field0, serializer);
    }
  }

  @protected
  void sse_encode_bitcoin_address_error(
      BitcoinAddressError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BitcoinAddressError_Base58(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case BitcoinAddressError_Bech32(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_String(field0, serializer);
      case BitcoinAddressError_EmptyBech32Payload():
        sse_encode_i_32(2, serializer);
      case BitcoinAddressError_InvalidBech32Variant(
          expected: final expected,
          found: final found
        ):
        sse_encode_i_32(3, serializer);
        sse_encode_variant(expected, serializer);
        sse_encode_variant(found, serializer);
      case BitcoinAddressError_InvalidWitnessVersion(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_u_8(field0, serializer);
      case BitcoinAddressError_UnparsableWitnessVersion(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_String(field0, serializer);
      case BitcoinAddressError_MalformedWitnessVersion():
        sse_encode_i_32(6, serializer);
      case BitcoinAddressError_InvalidWitnessProgramLength(
          field0: final field0
        ):
        sse_encode_i_32(7, serializer);
        sse_encode_usize(field0, serializer);
      case BitcoinAddressError_InvalidSegwitV0ProgramLength(
          field0: final field0
        ):
        sse_encode_i_32(8, serializer);
        sse_encode_usize(field0, serializer);
      case BitcoinAddressError_UncompressedPubkey():
        sse_encode_i_32(9, serializer);
      case BitcoinAddressError_ExcessiveScriptSize():
        sse_encode_i_32(10, serializer);
      case BitcoinAddressError_UnrecognizedScript():
        sse_encode_i_32(11, serializer);
      case BitcoinAddressError_UnknownAddressType(field0: final field0):
        sse_encode_i_32(12, serializer);
        sse_encode_String(field0, serializer);
      case BitcoinAddressError_NetworkValidation(
          networkRequired: final networkRequired,
          networkFound: final networkFound,
          address: final address
        ):
        sse_encode_i_32(13, serializer);
        sse_encode_network(networkRequired, serializer);
        sse_encode_network(networkFound, serializer);
        sse_encode_String(address, serializer);
    }
  }

  @protected
  void sse_encode_bitcoin_consensus_error(
      BitcoinConsensusError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BitcoinConsensusError_Io(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_String(field0, serializer);
      case BitcoinConsensusError_OversizedVectorAllocation(
          requested: final requested,
          max: final max
        ):
        sse_encode_i_32(1, serializer);
        sse_encode_usize(requested, serializer);
        sse_encode_usize(max, serializer);
      case BitcoinConsensusError_InvalidChecksum(
          expected: final expected,
          actual: final actual
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_u_8_array_4(expected, serializer);
        sse_encode_u_8_array_4(actual, serializer);
      case BitcoinConsensusError_NonMinimalVarInt():
        sse_encode_i_32(3, serializer);
      case BitcoinConsensusError_ParseFailed(field0: final field0):
        sse_encode_i_32(4, serializer);
        sse_encode_String(field0, serializer);
      case BitcoinConsensusError_UnsupportedSegwitFlag(field0: final field0):
        sse_encode_i_32(5, serializer);
        sse_encode_u_8(field0, serializer);
    }
  }

  @protected
  void sse_encode_bitcoin_hex_error(
      BitcoinHexError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case BitcoinHexError_InvalidChar(field0: final field0):
        sse_encode_i_32(0, serializer);
        sse_encode_u_8(field0, serializer);
      case BitcoinHexError_OddLengthString(field0: final field0):
        sse_encode_i_32(1, serializer);
        sse_encode_usize(field0, serializer);
      case BitcoinHexError_InvalidLength(
          field0: final field0,
          field1: final field1
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_usize(field0, serializer);
        sse_encode_usize(field1, serializer);
    }
  }

  @protected
  void sse_encode_bool(bool self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self ? 1 : 0);
  }

  @protected
  void sse_encode_box_autoadd_address_base(
      AddressBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_address_base(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bitcoin_address_error(
      BitcoinAddressError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bitcoin_address_error(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bitcoin_consensus_error(
      BitcoinConsensusError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bitcoin_consensus_error(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_bitcoin_hex_error(
      BitcoinHexError self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_bitcoin_hex_error(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_script_buf_base(
      ScriptBufBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_script_buf_base(self, serializer);
  }

  @protected
  void sse_encode_box_autoadd_transaction_base(
      TransactionBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_transaction_base(self, serializer);
  }

  @protected
  void sse_encode_i_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putInt32(self);
  }

  @protected
  void sse_encode_list_list_prim_u_8_strict(
      List<Uint8List> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_list_prim_u_8_strict(item, serializer);
    }
  }

  @protected
  void sse_encode_list_prim_u_8_loose(
      List<int> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer
        .putUint8List(self is Uint8List ? self : Uint8List.fromList(self));
  }

  @protected
  void sse_encode_list_prim_u_8_strict(
      Uint8List self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    serializer.buffer.putUint8List(self);
  }

  @protected
  void sse_encode_list_tx_in(List<TxIn> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_in(item, serializer);
    }
  }

  @protected
  void sse_encode_list_tx_out(List<TxOut> self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.length, serializer);
    for (final item in self) {
      sse_encode_tx_out(item, serializer);
    }
  }

  @protected
  void sse_encode_network(Network self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_out_point(OutPoint self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.txid, serializer);
    sse_encode_u_32(self.vout, serializer);
  }

  @protected
  void sse_encode_payload(Payload self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    switch (self) {
      case Payload_PubkeyHash(pubkeyHash: final pubkeyHash):
        sse_encode_i_32(0, serializer);
        sse_encode_String(pubkeyHash, serializer);
      case Payload_ScriptHash(scriptHash: final scriptHash):
        sse_encode_i_32(1, serializer);
        sse_encode_String(scriptHash, serializer);
      case Payload_WitnessProgram(
          version: final version,
          program: final program
        ):
        sse_encode_i_32(2, serializer);
        sse_encode_witness_version(version, serializer);
        sse_encode_list_prim_u_8_strict(program, serializer);
    }
  }

  @protected
  void sse_encode_script_buf_base(
      ScriptBufBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.bytes, serializer);
  }

  @protected
  void sse_encode_transaction_base(
      TransactionBase self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_String(self.inner, serializer);
  }

  @protected
  void sse_encode_tx_in(TxIn self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_out_point(self.previousOutput, serializer);
    sse_encode_script_buf_base(self.scriptSig, serializer);
    sse_encode_u_32(self.sequence, serializer);
    sse_encode_list_list_prim_u_8_strict(self.witness, serializer);
  }

  @protected
  void sse_encode_tx_out(TxOut self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_u_64(self.value, serializer);
    sse_encode_script_buf_base(self.scriptPubkey, serializer);
  }

  @protected
  void sse_encode_u_32(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint32(self);
  }

  @protected
  void sse_encode_u_64(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_u_8(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint8(self);
  }

  @protected
  void sse_encode_u_8_array_4(U8Array4 self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_list_prim_u_8_strict(self.inner, serializer);
  }

  @protected
  void sse_encode_unit(void self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
  }

  @protected
  void sse_encode_usize(int self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    serializer.buffer.putUint64(self);
  }

  @protected
  void sse_encode_variant(Variant self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }

  @protected
  void sse_encode_witness_version(
      WitnessVersion self, SseSerializer serializer) {
    // Codec=Sse (Serialization based), see doc to use other codecs
    sse_encode_i_32(self.index, serializer);
  }
}
