// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`.

// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports

import 'dart:convert';
import 'dart:typed_data';

import 'dart:convert';
import 'dart:typed_data';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'dart:ffi' as ffi;

abstract class Rust {
  Future<ExtendedKeyInfo> generateExtendedKey(
      {required String network, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kGenerateExtendedKeyConstMeta;

  Future<String> createDescriptor({required String xprv, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateDescriptorConstMeta;

  Future<String> createChangeDescriptor({required String xprv, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCreateChangeDescriptorConstMeta;
}

class ExtendedKeyInfo {
  final String mnemonic;
  final String xprv;
  final String fingerprint;

  ExtendedKeyInfo({
    required this.mnemonic,
    required this.xprv,
    required this.fingerprint,
  });
}

class RustImpl extends FlutterRustBridgeBase<RustWire> implements Rust {
  factory RustImpl(ffi.DynamicLibrary dylib) => RustImpl.raw(RustWire(dylib));

  RustImpl.raw(RustWire inner) : super(inner);

  Future<ExtendedKeyInfo> generateExtendedKey(
          {required String network, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_generate_extended_key(port_, _api2wire_String(network)),
        parseSuccessData: _wire2api_extended_key_info,
        constMeta: kGenerateExtendedKeyConstMeta,
        argValues: [network],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kGenerateExtendedKeyConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "generate_extended_key",
        argNames: ["network"],
      );

  Future<String> createDescriptor({required String xprv, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_create_descriptor(port_, _api2wire_String(xprv)),
        parseSuccessData: _wire2api_String,
        constMeta: kCreateDescriptorConstMeta,
        argValues: [xprv],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateDescriptorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_descriptor",
        argNames: ["xprv"],
      );

  Future<String> createChangeDescriptor({required String xprv, dynamic hint}) =>
      executeNormal(FlutterRustBridgeTask(
        callFfi: (port_) =>
            inner.wire_create_change_descriptor(port_, _api2wire_String(xprv)),
        parseSuccessData: _wire2api_String,
        constMeta: kCreateChangeDescriptorConstMeta,
        argValues: [xprv],
        hint: hint,
      ));

  FlutterRustBridgeTaskConstMeta get kCreateChangeDescriptorConstMeta =>
      const FlutterRustBridgeTaskConstMeta(
        debugName: "create_change_descriptor",
        argNames: ["xprv"],
      );

  // Section: api2wire
  ffi.Pointer<wire_uint_8_list> _api2wire_String(String raw) {
    return _api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  int _api2wire_u8(int raw) {
    return raw;
  }

  ffi.Pointer<wire_uint_8_list> _api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

  // Section: api_fill_to_wire

}

// Section: wire2api
String _wire2api_String(dynamic raw) {
  return raw as String;
}

ExtendedKeyInfo _wire2api_extended_key_info(dynamic raw) {
  final arr = raw as List<dynamic>;
  if (arr.length != 3)
    throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
  return ExtendedKeyInfo(
    mnemonic: _wire2api_String(arr[0]),
    xprv: _wire2api_String(arr[1]),
    fingerprint: _wire2api_String(arr[2]),
  );
}

int _wire2api_u8(dynamic raw) {
  return raw as int;
}

Uint8List _wire2api_uint_8_list(dynamic raw) {
  return raw as Uint8List;
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.

/// generated by flutter_rust_bridge
class RustWire implements FlutterRustBridgeWireBase {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  RustWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  RustWire.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void wire_generate_extended_key(
    int port_,
    ffi.Pointer<wire_uint_8_list> network,
  ) {
    return _wire_generate_extended_key(
      port_,
      network,
    );
  }

  late final _wire_generate_extended_keyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_generate_extended_key');
  late final _wire_generate_extended_key = _wire_generate_extended_keyPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_descriptor(
    int port_,
    ffi.Pointer<wire_uint_8_list> xprv,
  ) {
    return _wire_create_descriptor(
      port_,
      xprv,
    );
  }

  late final _wire_create_descriptorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_create_descriptor');
  late final _wire_create_descriptor = _wire_create_descriptorPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  void wire_create_change_descriptor(
    int port_,
    ffi.Pointer<wire_uint_8_list> xprv,
  ) {
    return _wire_create_change_descriptor(
      port_,
      xprv,
    );
  }

  late final _wire_create_change_descriptorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int64,
              ffi.Pointer<wire_uint_8_list>)>>('wire_create_change_descriptor');
  late final _wire_create_change_descriptor = _wire_create_change_descriptorPtr
      .asFunction<void Function(int, ffi.Pointer<wire_uint_8_list>)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<wire_uint_8_list> Function(
              ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr
      .asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  void free_WireSyncReturnStruct(
    WireSyncReturnStruct val,
  ) {
    return _free_WireSyncReturnStruct(
      val,
    );
  }

  late final _free_WireSyncReturnStructPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturnStruct)>>(
          'free_WireSyncReturnStruct');
  late final _free_WireSyncReturnStruct = _free_WireSyncReturnStructPtr
      .asFunction<void Function(WireSyncReturnStruct)>();

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>(
          'store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr
      .asFunction<void Function(DartPostCObjectFnType)>();
}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<
    ffi.NativeFunction<ffi.Bool Function(DartPort, ffi.Pointer<ffi.Void>)>>;
typedef DartPort = ffi.Int64;
